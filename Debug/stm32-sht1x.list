
stm32-sht1x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000573c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08005850  08005850  00015850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c94  08005c94  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005c94  08005c94  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c94  08005c94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001dc  08005e78  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005e78  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0e4  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002a2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002c230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00005ebd  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002751  00000000  00000000  00033095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000357e6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003010  00000000  00000000  0003583c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005834 	.word	0x08005834

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005834 	.word	0x08005834

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_GPIO_Init+0x8c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHT1x_SCK_Pin|SHT1x_DAT_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	21c0      	movs	r1, #192	; 0xc0
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <MX_GPIO_Init+0x90>)
 8000f0e:	f000 fd5a 	bl	80019c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SHT1x_SCK_Pin|SHT1x_DAT_Pin;
 8000f12:	23c0      	movs	r3, #192	; 0xc0
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0x90>)
 8000f2a:	f000 fbb1 	bl	8001690 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <_write>:
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#ifdef __cplusplus
extern "C" int _write(int32_t file, uint8_t *ptr, int32_t len) {
#else
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
#endif
    if( HAL_UART_Transmit(&huart1, ptr, len, len) == HAL_OK ) return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <_write+0x30>)
 8000f56:	f001 f9b6 	bl	80022c6 <HAL_UART_Transmit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <_write+0x24>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	e000      	b.n	8000f66 <_write+0x26>
    else return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000204 	.word	0x20000204

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f000 fa1f 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f82d 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f7ff ff93 	bl	8000eac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f86:	f000 f97d 	bl	8001284 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SHT1x_Handler_t Handler;
  SHT1x_Sample_t  Sample;

  SHT1x_Platform_Init(&Handler);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 feea 	bl	8002d68 <SHT1x_Platform_Init>
  SHT1x_Init(&Handler);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fe01 	bl	8002ba0 <SHT1x_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SHT1x_ReadSample(&Handler, &Sample);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 fdb2 	bl	8002b10 <SHT1x_ReadSample>
	printf("Temperature: %f°C\r\n",  Sample.TempCelsius);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff faee 	bl	8000590 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <main+0x60>)
 8000fba:	f002 fbad 	bl	8003718 <iprintf>
	printf("Humidity: %f%%\r\n\r\n",  Sample.HumidityPercent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fae5 	bl	8000590 <__aeabi_f2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <main+0x64>)
 8000fcc:	f002 fba4 	bl	8003718 <iprintf>
	SHT1x_ReadSample(&Handler, &Sample);
 8000fd0:	e7e5      	b.n	8000f9e <main+0x2a>
 8000fd2:	bf00      	nop
 8000fd4:	08005850 	.word	0x08005850
 8000fd8:	08005868 	.word	0x08005868

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	; 0x40
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2228      	movs	r2, #40	; 0x28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 ff2c 	bl	8002e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800101a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fce7 	bl	80019f8 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001030:	f000 f819 	bl	8001066 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 ff52 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800105a:	f000 f804 	bl	8001066 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3740      	adds	r7, #64	; 0x40
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106a:	b672      	cpsid	i
}
 800106c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106e:	e7fe      	b.n	800106e <Error_Handler+0x8>

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_MspInit+0x5c>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_MspInit+0x5c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x5c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x5c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_MspInit+0x60>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_MspInit+0x60>)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>
	...

080010dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("Hardfault!!");
 80010e0:	4801      	ldr	r0, [pc, #4]	; (80010e8 <HardFault_Handler+0xc>)
 80010e2:	f002 fb19 	bl	8003718 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0xa>
 80010e8:	0800587c 	.word	0x0800587c

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f98f 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
	return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <_kill>:

int _kill(int pid, int sig)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001146:	f001 fe55 	bl	8002df4 <__errno>
 800114a:	4603      	mov	r3, r0
 800114c:	2216      	movs	r2, #22
 800114e:	601a      	str	r2, [r3, #0]
	return -1;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_exit>:

void _exit (int status)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe7 	bl	800113c <_kill>
	while (1) {}		/* Make sure we hang here */
 800116e:	e7fe      	b.n	800116e <_exit+0x12>

08001170 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00a      	b.n	8001198 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001182:	f3af 8000 	nop.w
 8001186:	4601      	mov	r1, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf0      	blt.n	8001182 <_read+0x12>
	}

return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d0:	605a      	str	r2, [r3, #4]
	return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
	return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f001 fdda 	bl	8002df4 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20005000 	.word	0x20005000
 800126c:	00000400 	.word	0x00000400
 8001270:	200001f8 	.word	0x200001f8
 8001274:	20000260 	.word	0x20000260

08001278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART1_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012bc:	f000 ffb6 	bl	800222c <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f7ff fece 	bl	8001066 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000204 	.word	0x20000204
 80012d4:	40013800 	.word	0x40013800

080012d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_UART_MspInit+0x8c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d131      	bne.n	800135c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_UART_MspInit+0x90>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <HAL_UART_MspInit+0x90>)
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x90>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0x90>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <HAL_UART_MspInit+0x90>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_UART_MspInit+0x90>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <HAL_UART_MspInit+0x94>)
 800133e:	f000 f9a7 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8001342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_UART_MspInit+0x94>)
 8001358:	f000 f99a 	bl	8001690 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40013800 	.word	0x40013800
 8001368:	40021000 	.word	0x40021000
 800136c:	40010800 	.word	0x40010800

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	; (80013a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	; (80013b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001396:	f7ff ff6f 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f001 fd31 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fde9 	bl	8000f74 <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80013ac:	08005c9c 	.word	0x08005c9c
  ldr r2, =_sbss
 80013b0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80013b4:	2000025c 	.word	0x2000025c

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f92b 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fe4a 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f935 	bl	8001676 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f000 f90b 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000008 	.word	0x20000008
 8001468:	20000248 	.word	0x20000248

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000248 	.word	0x20000248

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001608:	f7ff ff90 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff49 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff5e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff90 	bl	8001580 <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5f 	bl	800152c <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffb0 	bl	80015e4 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e169      	b.n	8001978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a4:	2201      	movs	r2, #1
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8158 	bne.w	8001972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a9a      	ldr	r2, [pc, #616]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d05e      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016cc:	4a98      	ldr	r2, [pc, #608]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d875      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016d2:	4a98      	ldr	r2, [pc, #608]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d058      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016d8:	4a96      	ldr	r2, [pc, #600]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d86f      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016de:	4a96      	ldr	r2, [pc, #600]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d052      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016e4:	4a94      	ldr	r2, [pc, #592]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d869      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016ea:	4a94      	ldr	r2, [pc, #592]	; (800193c <HAL_GPIO_Init+0x2ac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04c      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016f0:	4a92      	ldr	r2, [pc, #584]	; (800193c <HAL_GPIO_Init+0x2ac>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d863      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016f6:	4a92      	ldr	r2, [pc, #584]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d046      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016fc:	4a90      	ldr	r2, [pc, #576]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d85d      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d82a      	bhi.n	800175c <HAL_GPIO_Init+0xcc>
 8001706:	2b12      	cmp	r3, #18
 8001708:	d859      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_GPIO_Init+0x80>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	0800178b 	.word	0x0800178b
 8001714:	08001765 	.word	0x08001765
 8001718:	08001777 	.word	0x08001777
 800171c:	080017b9 	.word	0x080017b9
 8001720:	080017bf 	.word	0x080017bf
 8001724:	080017bf 	.word	0x080017bf
 8001728:	080017bf 	.word	0x080017bf
 800172c:	080017bf 	.word	0x080017bf
 8001730:	080017bf 	.word	0x080017bf
 8001734:	080017bf 	.word	0x080017bf
 8001738:	080017bf 	.word	0x080017bf
 800173c:	080017bf 	.word	0x080017bf
 8001740:	080017bf 	.word	0x080017bf
 8001744:	080017bf 	.word	0x080017bf
 8001748:	080017bf 	.word	0x080017bf
 800174c:	080017bf 	.word	0x080017bf
 8001750:	080017bf 	.word	0x080017bf
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001781 	.word	0x08001781
 800175c:	4a79      	ldr	r2, [pc, #484]	; (8001944 <HAL_GPIO_Init+0x2b4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001762:	e02c      	b.n	80017be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e029      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e024      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	3308      	adds	r3, #8
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e01f      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	330c      	adds	r3, #12
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e01a      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001792:	2304      	movs	r3, #4
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e013      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]
          break;
 80017aa:	e009      	b.n	80017c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	615a      	str	r2, [r3, #20]
          break;
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          break;
 80017be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d801      	bhi.n	80017ca <HAL_GPIO_Init+0x13a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_Init+0x13e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	; 0xff
 80017d4:	d802      	bhi.n	80017dc <HAL_GPIO_Init+0x14c>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x152>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	3b08      	subs	r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	210f      	movs	r1, #15
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	6a39      	ldr	r1, [r7, #32]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80b1 	beq.w	8001972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2bc>)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a40      	ldr	r2, [pc, #256]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <HAL_GPIO_Init+0x2c4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a3e      	ldr	r2, [pc, #248]	; (8001958 <HAL_GPIO_Init+0x2c8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3d      	ldr	r2, [pc, #244]	; (800195c <HAL_GPIO_Init+0x2cc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1e0>
 800186c:	2303      	movs	r3, #3
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001870:	2304      	movs	r3, #4
 8001872:	e004      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001874:	2302      	movs	r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 800187c:	2300      	movs	r3, #0
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188e:	492f      	ldr	r1, [pc, #188]	; (800194c <HAL_GPIO_Init+0x2bc>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	492c      	ldr	r1, [pc, #176]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4928      	ldr	r1, [pc, #160]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4922      	ldr	r1, [pc, #136]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	491e      	ldr	r1, [pc, #120]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4918      	ldr	r1, [pc, #96]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4914      	ldr	r1, [pc, #80]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e021      	b.n	8001972 <HAL_GPIO_Init+0x2e2>
 800192e:	bf00      	nop
 8001930:	10320000 	.word	0x10320000
 8001934:	10310000 	.word	0x10310000
 8001938:	10220000 	.word	0x10220000
 800193c:	10210000 	.word	0x10210000
 8001940:	10120000 	.word	0x10120000
 8001944:	10110000 	.word	0x10110000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_GPIO_Init+0x304>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	43db      	mvns	r3, r3
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <HAL_GPIO_Init+0x304>)
 800196e:	4013      	ands	r3, r2
 8001970:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f ae8e 	bne.w	80016a4 <HAL_GPIO_Init+0x14>
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	372c      	adds	r7, #44	; 0x2c
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
 80019d2:	4613      	mov	r3, r2
 80019d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d6:	787b      	ldrb	r3, [r7, #1]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e26c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8087 	beq.w	8001b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a18:	4b92      	ldr	r3, [pc, #584]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d00c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a24:	4b8f      	ldr	r3, [pc, #572]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d112      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
 8001a30:	4b8c      	ldr	r3, [pc, #560]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d10b      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3e:	4b89      	ldr	r3, [pc, #548]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d06c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x12c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d168      	bne.n	8001b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e246      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x76>
 8001a60:	4b80      	ldr	r3, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a7f      	ldr	r2, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e02e      	b.n	8001acc <HAL_RCC_OscConfig+0xd4>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x98>
 8001a76:	4b7b      	ldr	r3, [pc, #492]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7a      	ldr	r2, [pc, #488]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a77      	ldr	r2, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e01d      	b.n	8001acc <HAL_RCC_OscConfig+0xd4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xbc>
 8001a9a:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a71      	ldr	r2, [pc, #452]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6e      	ldr	r2, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0xd4>
 8001ab4:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a6a      	ldr	r2, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a67      	ldr	r2, [pc, #412]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fcca 	bl	800146c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fcc6 	bl	800146c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1fa      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0xe4>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fcb6 	bl	800146c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fcb2 	bl	800146c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1e6      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x10c>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d063      	beq.n	8001bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b32:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x18c>
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x176>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e1ba      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4939      	ldr	r1, [pc, #228]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	e03a      	b.n	8001bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fc6b 	bl	800146c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fc67 	bl	800146c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e19b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4927      	ldr	r1, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc4a 	bl	800146c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fc46 	bl	800146c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e17a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03a      	beq.n	8001c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d019      	beq.n	8001c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fc2a 	bl	800146c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fc26 	bl	800146c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e15a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f000 fad8 	bl	80021f0 <RCC_Delay>
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7ff fc10 	bl	800146c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc0c 	bl	800146c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d908      	bls.n	8001c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e140      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	42420000 	.word	0x42420000
 8001c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	4b9e      	ldr	r3, [pc, #632]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e9      	bne.n	8001c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a6 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b97      	ldr	r3, [pc, #604]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a93      	ldr	r2, [pc, #588]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b8e      	ldr	r3, [pc, #568]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a8a      	ldr	r2, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fbcd 	bl	800146c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff fbc9 	bl	800146c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0fd      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x312>
 8001cfc:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a7a      	ldr	r2, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e02d      	b.n	8001d66 <HAL_RCC_OscConfig+0x36e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x334>
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a75      	ldr	r2, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a72      	ldr	r2, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	e01c      	b.n	8001d66 <HAL_RCC_OscConfig+0x36e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x356>
 8001d34:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a6c      	ldr	r2, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a69      	ldr	r2, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x36e>
 8001d4e:	4b67      	ldr	r3, [pc, #412]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a66      	ldr	r2, [pc, #408]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	4b64      	ldr	r3, [pc, #400]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a63      	ldr	r2, [pc, #396]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d015      	beq.n	8001d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb7d 	bl	800146c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fb79 	bl	800146c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0ab      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ee      	beq.n	8001d76 <HAL_RCC_OscConfig+0x37e>
 8001d98:	e014      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb67 	bl	800146c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff fb63 	bl	800146c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e095      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d105      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4b48      	ldr	r3, [pc, #288]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8081 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d061      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d146      	bne.n	8001e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x4fc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb37 	bl	800146c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fb33 	bl	800146c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e067      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d108      	bne.n	8001e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	492d      	ldr	r1, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a19      	ldr	r1, [r3, #32]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	4927      	ldr	r1, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x4fc>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb07 	bl	800146c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff fb03 	bl	800146c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e037      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x46a>
 8001e80:	e02f      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_RCC_OscConfig+0x4fc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff faf0 	bl	800146c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff faec 	bl	800146c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e020      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x498>
 8001eae:	e018      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42420060 	.word	0x42420060

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4965      	ldr	r1, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e073      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4936      	ldr	r1, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7ff fa40 	bl	800146c <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7ff fa3c 	bl	800146c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e053      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1cc>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f99e 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08005898 	.word	0x08005898
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b490      	push	{r4, r7}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020d2:	4b2a      	ldr	r3, [pc, #168]	; (800217c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020d4:	1d3c      	adds	r4, r7, #4
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020dc:	f240 2301 	movw	r3, #513	; 0x201
 80020e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 8002106:	2b08      	cmp	r3, #8
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x46>
 800210a:	e02d      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	e02d      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800211e:	4413      	add	r3, r2
 8002120:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002124:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	0c5b      	lsrs	r3, r3, #17
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800213e:	4413      	add	r3, r2
 8002140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002144:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214a:	fb02 f203 	mul.w	r2, r2, r3
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e004      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	623b      	str	r3, [r7, #32]
      break;
 8002166:	e002      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216a:	623b      	str	r3, [r7, #32]
      break;
 800216c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216e:	6a3b      	ldr	r3, [r7, #32]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bc90      	pop	{r4, r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	08005888 	.word	0x08005888
 8002180:	40021000 	.word	0x40021000
 8002184:	007a1200 	.word	0x007a1200
 8002188:	003d0900 	.word	0x003d0900

0800218c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <HAL_RCC_GetHCLKFreq+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a4:	f7ff fff2 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4903      	ldr	r1, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	080058a8 	.word	0x080058a8

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021cc:	f7ff ffde 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0adb      	lsrs	r3, r3, #11
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4903      	ldr	r1, [pc, #12]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080058a8 	.word	0x080058a8

080021f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <RCC_Delay+0x34>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <RCC_Delay+0x38>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0a5b      	lsrs	r3, r3, #9
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800220c:	bf00      	nop
  }
  while (Delay --);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	60fa      	str	r2, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <RCC_Delay+0x1c>
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000000 	.word	0x20000000
 8002228:	10624dd3 	.word	0x10624dd3

0800222c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e03f      	b.n	80022be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff f840 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f905 	bl	8002480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b08a      	sub	sp, #40	; 0x28
 80022ca:	af02      	add	r7, sp, #8
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d17c      	bne.n	80023e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_UART_Transmit+0x2c>
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e075      	b.n	80023e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_UART_Transmit+0x3e>
 8002300:	2302      	movs	r3, #2
 8002302:	e06e      	b.n	80023e2 <HAL_UART_Transmit+0x11c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2221      	movs	r2, #33	; 0x21
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231a:	f7ff f8a7 	bl	800146c <HAL_GetTick>
 800231e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002334:	d108      	bne.n	8002348 <HAL_UART_Transmit+0x82>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e003      	b.n	8002350 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002358:	e02a      	b.n	80023b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f840 	bl	80023ea <UART_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e036      	b.n	80023e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002388:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	3302      	adds	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	e007      	b.n	80023a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1cf      	bne.n	800235a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f810 	bl	80023ea <UART_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e006      	b.n	80023e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
  }
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fa:	e02c      	b.n	8002456 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002402:	d028      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <UART_WaitOnFlagUntilTimeout+0x30>
 800240a:	f7ff f82f 	bl	800146c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	429a      	cmp	r2, r3
 8002418:	d21d      	bcs.n	8002456 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002428:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e00f      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d0c3      	beq.n	80023fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024ba:	f023 030c 	bic.w	r3, r3, #12
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <UART_SetConfig+0x114>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d103      	bne.n	80024f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024e8:	f7ff fe6e 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	e002      	b.n	80024f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024f0:	f7ff fe56 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80024f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	009a      	lsls	r2, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	4a22      	ldr	r2, [pc, #136]	; (8002598 <UART_SetConfig+0x118>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	0119      	lsls	r1, r3, #4
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009a      	lsls	r2, r3, #2
 8002520:	441a      	add	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fbb2 f2f3 	udiv	r2, r2, r3
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <UART_SetConfig+0x118>)
 800252e:	fba3 0302 	umull	r0, r3, r3, r2
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2064      	movs	r0, #100	; 0x64
 8002536:	fb00 f303 	mul.w	r3, r0, r3
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	3332      	adds	r3, #50	; 0x32
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <UART_SetConfig+0x118>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254c:	4419      	add	r1, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fbb2 f2f3 	udiv	r2, r2, r3
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <UART_SetConfig+0x118>)
 8002566:	fba3 0302 	umull	r0, r3, r3, r2
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2064      	movs	r0, #100	; 0x64
 800256e:	fb00 f303 	mul.w	r3, r0, r3
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	3332      	adds	r3, #50	; 0x32
 8002578:	4a07      	ldr	r2, [pc, #28]	; (8002598 <UART_SetConfig+0x118>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	440a      	add	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013800 	.word	0x40013800
 8002598:	51eb851f 	.word	0x51eb851f

0800259c <SHT1x_Start>:
 ==================================================================================
 */

static inline void
SHT1x_Start(SHT1x_Handler_t *Handler)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
   * SCK  _|  |__|  |__
   *      __       ____
   * DATA   |_____|
   */

  Handler->DataWriteHigh();
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4798      	blx	r3
  Handler->DelayUs(2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	2002      	movs	r0, #2
 80025b0:	4798      	blx	r3

  Handler->SckWriteHigh();
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	4798      	blx	r3
  Handler->DelayUs(2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	2002      	movs	r0, #2
 80025be:	4798      	blx	r3

  Handler->DataWriteLow();
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4798      	blx	r3
  Handler->DelayUs(2);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	2002      	movs	r0, #2
 80025cc:	4798      	blx	r3

  Handler->SckWriteLow();
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4798      	blx	r3
  Handler->DelayUs(8);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	2008      	movs	r0, #8
 80025da:	4798      	blx	r3

  Handler->SckWriteHigh();
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	4798      	blx	r3
  Handler->DelayUs(2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	2002      	movs	r0, #2
 80025e8:	4798      	blx	r3

  Handler->DataWriteHigh();
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4798      	blx	r3
  Handler->DelayUs(2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	2002      	movs	r0, #2
 80025f6:	4798      	blx	r3

  Handler->SckWriteLow();
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4798      	blx	r3
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <SHT1x_SendACK>:

static inline void
SHT1x_SendACK(SHT1x_Handler_t *Handler)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  Handler->DataConfigOut();
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	4798      	blx	r3

  Handler->DataWriteLow();
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4798      	blx	r3
  Handler->DelayUs(4);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	2004      	movs	r0, #4
 8002620:	4798      	blx	r3
  Handler->SckWriteHigh();
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4798      	blx	r3
  Handler->DelayUs(4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	2004      	movs	r0, #4
 800262e:	4798      	blx	r3
  Handler->SckWriteLow();
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4798      	blx	r3
  Handler->DelayUs(4);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	2004      	movs	r0, #4
 800263c:	4798      	blx	r3
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <SHT1x_ShiftIn>:

static inline void
SHT1x_ShiftIn(SHT1x_Handler_t *Handler, uint8_t *Data)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  uint8_t DataBuff = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]

  for (int8_t counter = 7; counter >= 0; --counter)
 8002654:	2307      	movs	r3, #7
 8002656:	73bb      	strb	r3, [r7, #14]
 8002658:	e020      	b.n	800269c <SHT1x_ShiftIn+0x56>
  {
    Handler->SckWriteHigh();
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	4798      	blx	r3
    Handler->DelayUs(4);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	2004      	movs	r0, #4
 8002666:	4798      	blx	r3
    DataBuff |= (Handler->DataRead() << counter);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4798      	blx	r3
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	b25a      	sxtb	r2, r3
 800267c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002680:	4313      	orrs	r3, r2
 8002682:	b25b      	sxtb	r3, r3
 8002684:	73fb      	strb	r3, [r7, #15]
    Handler->SckWriteLow();
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4798      	blx	r3
    Handler->DelayUs(4);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	2004      	movs	r0, #4
 8002692:	4798      	blx	r3
  for (int8_t counter = 7; counter >= 0; --counter)
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	3b01      	subs	r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	73bb      	strb	r3, [r7, #14]
 800269c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	dada      	bge.n	800265a <SHT1x_ShiftIn+0x14>
  }

  *Data = DataBuff;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	701a      	strb	r2, [r3, #0]
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <SHT1x_shiftDataIn>:

//Read measurement from sensor
static void
SHT1x_shiftDataIn(SHT1x_Handler_t *Handler, uint16_t *Data)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  uint16_t val1 = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	81fb      	strh	r3, [r7, #14]
  uint8_t read1 = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	737b      	strb	r3, [r7, #13]

  Handler->DataConfigIn();
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	4798      	blx	r3

  SHT1x_ShiftIn(Handler, &read1); // read MSB byte
 80026ca:	f107 030d 	add.w	r3, r7, #13
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ffb8 	bl	8002646 <SHT1x_ShiftIn>

  val1 = (read1 << 8); //read1*256;
 80026d6:	7b7b      	ldrb	r3, [r7, #13]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	81fb      	strh	r3, [r7, #14]

  //Send acknowledgment to sensor that MSB byte is read
  SHT1x_SendACK(Handler);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff91 	bl	8002606 <SHT1x_SendACK>

  Handler->DataConfigIn();
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	4798      	blx	r3

  //read LSB byte of from the sensor
  SHT1x_ShiftIn(Handler, &read1);
 80026ea:	f107 030d 	add.w	r3, r7, #13
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ffa8 	bl	8002646 <SHT1x_ShiftIn>
  val1 |= read1;
 80026f6:	7b7b      	ldrb	r3, [r7, #13]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	81fb      	strh	r3, [r7, #14]

  //return the read value from sensor
  *Data = val1;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	89fa      	ldrh	r2, [r7, #14]
 8002704:	801a      	strh	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <SHT1x_SendCmd>:

//Send the command to read temp or humidity to micro controller
static SHT1x_Result_t
SHT1x_SendCmd(SHT1x_Handler_t *Handler, uint8_t CMD)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	70fb      	strb	r3, [r7, #3]
  Handler->DataConfigOut();
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4798      	blx	r3
  Handler->SckConfigOut();
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	4798      	blx	r3

  //Initiate the start signal to sensor
  SHT1x_Start(Handler);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff38 	bl	800259c <SHT1x_Start>

  // send the command to sensor
  for (uint8_t counter = 0; counter < 8; counter++, CMD <<= 1)
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e01e      	b.n	8002770 <SHT1x_SendCmd+0x62>
  {
    if (CMD & 0x80)
 8002732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	da03      	bge.n	8002742 <SHT1x_SendCmd+0x34>
      Handler->DataWriteHigh();
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	4798      	blx	r3
 8002740:	e002      	b.n	8002748 <SHT1x_SendCmd+0x3a>
    else
      Handler->DataWriteLow();
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4798      	blx	r3

    Handler->DelayUs(4);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	2004      	movs	r0, #4
 800274e:	4798      	blx	r3
    Handler->SckWriteHigh();
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	4798      	blx	r3

    Handler->DelayUs(4);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	2004      	movs	r0, #4
 800275c:	4798      	blx	r3
    Handler->SckWriteLow();
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4798      	blx	r3
  for (uint8_t counter = 0; counter < 8; counter++, CMD <<= 1)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b07      	cmp	r3, #7
 8002774:	d9dd      	bls.n	8002732 <SHT1x_SendCmd+0x24>
  }

  Handler->DataConfigIn();
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4798      	blx	r3

  //Check acknowledgments if the sensor has ack the cmd
  if (Handler->DataRead())
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4798      	blx	r3
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <SHT1x_SendCmd+0x7e>
    return SHT1x_FAIL;
 8002788:	2301      	movs	r3, #1
 800278a:	e00e      	b.n	80027aa <SHT1x_SendCmd+0x9c>

  Handler->DelayUs(4);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	2004      	movs	r0, #4
 8002792:	4798      	blx	r3
  Handler->SckWriteHigh();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	4798      	blx	r3
  Handler->DelayUs(4);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	2004      	movs	r0, #4
 80027a0:	4798      	blx	r3
  Handler->SckWriteLow();
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4798      	blx	r3

  return SHT1x_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <SHT1x_WaitForResult>:

// pooling for the sensor to complete measuring data
static SHT1x_Result_t
SHT1x_WaitForResult(SHT1x_Handler_t *Handler)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint8_t ack = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	737b      	strb	r3, [r7, #13]

  Handler->DataConfigIn();
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4798      	blx	r3

  for (uint16_t counter = 0; counter < 50; counter++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	81fb      	strh	r3, [r7, #14]
 80027c8:	e010      	b.n	80027ec <SHT1x_WaitForResult+0x3a>
  {
    ack = Handler->DataRead();
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4798      	blx	r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	737b      	strb	r3, [r7, #13]
    if (!ack)
 80027d4:	7b7b      	ldrb	r3, [r7, #13]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <SHT1x_WaitForResult+0x2c>
      return SHT1x_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e00a      	b.n	80027f4 <SHT1x_WaitForResult+0x42>

    Handler->DelayMs(10);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	200a      	movs	r0, #10
 80027e4:	4798      	blx	r3
  for (uint16_t counter = 0; counter < 50; counter++)
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	3301      	adds	r3, #1
 80027ea:	81fb      	strh	r3, [r7, #14]
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	2b31      	cmp	r3, #49	; 0x31
 80027f0:	d9eb      	bls.n	80027ca <SHT1x_WaitForResult+0x18>
  }

  return SHT1x_TIME_OUT;
 80027f2:	2302      	movs	r3, #2
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <SHT1x_CheckCRC>:

//Skip the CRC
static SHT1x_Result_t
SHT1x_CheckCRC(SHT1x_Handler_t *Handler)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  Handler->DataConfigOut();
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4798      	blx	r3
  Handler->DataWriteHigh();
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4798      	blx	r3

  for (uint8_t counter = 0; counter < 9; counter++)
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e010      	b.n	8002838 <SHT1x_CheckCRC+0x3c>
  {
    Handler->DelayUs(4);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	2004      	movs	r0, #4
 800281c:	4798      	blx	r3
    Handler->SckWriteHigh();
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	4798      	blx	r3
    Handler->DelayUs(4);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	2004      	movs	r0, #4
 800282a:	4798      	blx	r3
    Handler->SckWriteLow();
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	4798      	blx	r3
  for (uint8_t counter = 0; counter < 9; counter++)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	3301      	adds	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d9eb      	bls.n	8002816 <SHT1x_CheckCRC+0x1a>
  }

  SHT1x_Start(Handler);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff feac 	bl	800259c <SHT1x_Start>

  return SHT1x_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <SHT1x_ReadTemp>:
  return SHT1x_OK;
}

static SHT1x_Result_t
SHT1x_ReadTemp(SHT1x_Handler_t *Handler, uint16_t *TempRaw)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  if (SHT1x_SendCmd(Handler, SHT1x_CMD_MeasureTemperature) != SHT1x_OK)
 8002858:	2103      	movs	r1, #3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ff57 	bl	800270e <SHT1x_SendCmd>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <SHT1x_ReadTemp+0x1c>
    return SHT1x_FAIL;
 8002866:	2301      	movs	r3, #1
 8002868:	e01a      	b.n	80028a0 <SHT1x_ReadTemp+0x52>

  Handler->DataConfigIn();
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4798      	blx	r3

  //check if sensor has started measuring data after ack
  if (!Handler->DataRead())
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4798      	blx	r3
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <SHT1x_ReadTemp+0x32>
    return SHT1x_FAIL;
 800287c:	2301      	movs	r3, #1
 800287e:	e00f      	b.n	80028a0 <SHT1x_ReadTemp+0x52>

  //wait till sensor finishes reading data
  if (SHT1x_WaitForResult(Handler) != SHT1x_OK)
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff96 	bl	80027b2 <SHT1x_WaitForResult>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <SHT1x_ReadTemp+0x42>
    return SHT1x_TIME_OUT;
 800288c:	2302      	movs	r3, #2
 800288e:	e007      	b.n	80028a0 <SHT1x_ReadTemp+0x52>

  //read the data from the Sensor
  SHT1x_shiftDataIn(Handler, TempRaw);
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ff0d 	bl	80026b2 <SHT1x_shiftDataIn>
  SHT1x_CheckCRC(Handler);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffaf 	bl	80027fc <SHT1x_CheckCRC>

  return SHT1x_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <SHT1x_ReadHumidity>:

static SHT1x_Result_t
SHT1x_ReadHumidity(SHT1x_Handler_t *Handler, uint16_t *HumidityRaw)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  Handler->DataConfigIn();
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4798      	blx	r3
  Handler->SckConfigOut();
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	4798      	blx	r3

  // send cmd to read humidity to sensor
  if (SHT1x_SendCmd(Handler, SHT1x_CMD_MeasureHumidity) != SHT1x_OK)
 80028be:	2105      	movs	r1, #5
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff24 	bl	800270e <SHT1x_SendCmd>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <SHT1x_ReadHumidity+0x28>
    return SHT1x_FAIL;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e01a      	b.n	8002906 <SHT1x_ReadHumidity+0x5e>

  Handler->DataConfigIn();
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4798      	blx	r3

  //check if sensor has started measuring data after ack
  if (!Handler->DataRead())
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4798      	blx	r3
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <SHT1x_ReadHumidity+0x3e>
    return SHT1x_FAIL;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <SHT1x_ReadHumidity+0x5e>

  //poll until sensor has finished measuring data
  if (SHT1x_WaitForResult(Handler) != SHT1x_OK)
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff63 	bl	80027b2 <SHT1x_WaitForResult>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <SHT1x_ReadHumidity+0x4e>
    return SHT1x_TIME_OUT;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e007      	b.n	8002906 <SHT1x_ReadHumidity+0x5e>

  //read the data from the Sensor
  SHT1x_shiftDataIn(Handler, HumidityRaw);
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff feda 	bl	80026b2 <SHT1x_shiftDataIn>
  SHT1x_CheckCRC(Handler);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff7c 	bl	80027fc <SHT1x_CheckCRC>

  return SHT1x_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <SHT1x_TempConvertRawC>:

static float
SHT1x_TempConvertRawC(SHT1x_Handler_t *Handler, uint16_t RawTemp)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  const float D1 = Handler->D1Celsius;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60bb      	str	r3, [r7, #8]
  float D2 = 0.01;
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <SHT1x_TempConvertRawC+0x58>)
 8002924:	60fb      	str	r3, [r7, #12]

  switch (Handler->ResolutionStatus)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7a1b      	ldrb	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <SHT1x_TempConvertRawC+0x24>
 800292e:	2b01      	cmp	r3, #1
 8002930:	d003      	beq.n	800293a <SHT1x_TempConvertRawC+0x2a>
 8002932:	e005      	b.n	8002940 <SHT1x_TempConvertRawC+0x30>
  {
  case SHT1x_LowResolution:
    //Temperature constant for sht11 at 12bit
    D2 = 0.04;
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <SHT1x_TempConvertRawC+0x5c>)
 8002936:	60fb      	str	r3, [r7, #12]
    break;
 8002938:	e002      	b.n	8002940 <SHT1x_TempConvertRawC+0x30>

  case SHT1x_HighResolution:
    //Temperature constants for sht11 at 14bit
    D2 = 0.01;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <SHT1x_TempConvertRawC+0x58>)
 800293c:	60fb      	str	r3, [r7, #12]
    break;
 800293e:	bf00      	nop
  }

  //calculation for temperature given in data sheet
  return D1 + (D2 * RawTemp);
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fa5e 	bl	8000e04 <__aeabi_i2f>
 8002948:	4603      	mov	r3, r0
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fc07 	bl	8000160 <__aeabi_fmul>
 8002952:	4603      	mov	r3, r0
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f9a0 	bl	8000c9c <__addsf3>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	3c23d70a 	.word	0x3c23d70a
 800296c:	3d23d70a 	.word	0x3d23d70a

08002970 <SHT1x_TempConvertRawF>:
 * @param  RawTemp: Raw temperature
 * @retval Temperature in Fahrenheit
 */
static float
SHT1x_TempConvertRawF(SHT1x_Handler_t *Handler, uint16_t RawTemp)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
  const float D1 = Handler->D1Fahrenheit;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60bb      	str	r3, [r7, #8]
  float D2 = 0.018;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <SHT1x_TempConvertRawF+0x58>)
 8002984:	60fb      	str	r3, [r7, #12]

  switch (Handler->ResolutionStatus)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7a1b      	ldrb	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <SHT1x_TempConvertRawF+0x24>
 800298e:	2b01      	cmp	r3, #1
 8002990:	d003      	beq.n	800299a <SHT1x_TempConvertRawF+0x2a>
 8002992:	e005      	b.n	80029a0 <SHT1x_TempConvertRawF+0x30>
  {
  case SHT1x_LowResolution:
    //Temperature constant for sht11 at 12bit
    D2 = 0.072; //for 12 bits
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <SHT1x_TempConvertRawF+0x5c>)
 8002996:	60fb      	str	r3, [r7, #12]
    break;
 8002998:	e002      	b.n	80029a0 <SHT1x_TempConvertRawF+0x30>

  case SHT1x_HighResolution:
    //Temperature constants for sht11 at 14bit
    D2 = 0.018; //for 14 bits
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <SHT1x_TempConvertRawF+0x58>)
 800299c:	60fb      	str	r3, [r7, #12]
    break;
 800299e:	bf00      	nop
  }

  //calculation for temperature given in data sheet
  return D1 + (D2 * RawTemp);
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fa2e 	bl	8000e04 <__aeabi_i2f>
 80029a8:	4603      	mov	r3, r0
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fbd7 	bl	8000160 <__aeabi_fmul>
 80029b2:	4603      	mov	r3, r0
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f970 	bl	8000c9c <__addsf3>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	3c9374bc 	.word	0x3c9374bc
 80029cc:	3d9374bc 	.word	0x3d9374bc

080029d0 <SHT1x_HumConvertRawP>:
#endif

static float
SHT1x_HumConvertRawP(SHT1x_Handler_t *Handler, uint16_t RawHum, float TempC)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	460b      	mov	r3, r1
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	817b      	strh	r3, [r7, #10]
  float realHumidity;

  const float c1 = -4;
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <SHT1x_HumConvertRawP+0x11c>)
 80029e0:	61bb      	str	r3, [r7, #24]
  float c2 = 0.0405;
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <SHT1x_HumConvertRawP+0x120>)
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  float c3 = -0.0000028;
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <SHT1x_HumConvertRawP+0x124>)
 80029e8:	623b      	str	r3, [r7, #32]
  const float t1 = 0.01;
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <SHT1x_HumConvertRawP+0x128>)
 80029ec:	617b      	str	r3, [r7, #20]
  float t2 = t2 = 0.00008;
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <SHT1x_HumConvertRawP+0x12c>)
 80029f0:	61fb      	str	r3, [r7, #28]

  switch (Handler->ResolutionStatus)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	7a1b      	ldrb	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <SHT1x_HumConvertRawP+0x30>
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <SHT1x_HumConvertRawP+0x3e>
 80029fe:	e00d      	b.n	8002a1c <SHT1x_HumConvertRawP+0x4c>
  {
  case SHT1x_LowResolution:
    //Humidity constants for 8 bit
    c2 = 0.648;
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <SHT1x_HumConvertRawP+0x130>)
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    c3 = -0.00072;
 8002a04:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <SHT1x_HumConvertRawP+0x134>)
 8002a06:	623b      	str	r3, [r7, #32]

    //Temperature constants for 8 bit
    t2 = 0.00128;
 8002a08:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <SHT1x_HumConvertRawP+0x138>)
 8002a0a:	61fb      	str	r3, [r7, #28]
    break;
 8002a0c:	e006      	b.n	8002a1c <SHT1x_HumConvertRawP+0x4c>

  case SHT1x_HighResolution:
    //Humidity constants for 12 bit
    c2 = 0.0405;
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <SHT1x_HumConvertRawP+0x120>)
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    c3 = -0.0000028;
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <SHT1x_HumConvertRawP+0x124>)
 8002a14:	623b      	str	r3, [r7, #32]

    //Temperature constants for 12 bit
    t2 = 0.00008;
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <SHT1x_HumConvertRawP+0x12c>)
 8002a18:	61fb      	str	r3, [r7, #28]
    break;
 8002a1a:	bf00      	nop
  }

  //convert it into relative humidity for linear compensation
  realHumidity = c1 + (c2 * RawHum) + (c3 * RawHum * RawHum);
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f9f0 	bl	8000e04 <__aeabi_i2f>
 8002a24:	4603      	mov	r3, r0
 8002a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fb99 	bl	8000160 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	69b9      	ldr	r1, [r7, #24]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f932 	bl	8000c9c <__addsf3>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f9e0 	bl	8000e04 <__aeabi_i2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fb89 	bl	8000160 <__aeabi_fmul>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461d      	mov	r5, r3
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f9d5 	bl	8000e04 <__aeabi_i2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4628      	mov	r0, r5
 8002a60:	f7fd fb7e 	bl	8000160 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4619      	mov	r1, r3
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7fe f917 	bl	8000c9c <__addsf3>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]
  // calculate relative humidity with temperature compensation
  return (TempC - 25.0) * (t1 + (t2 * RawHum)) + realHumidity;
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd fd8c 	bl	8000590 <__aeabi_f2d>
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <SHT1x_HumConvertRawP+0x13c>)
 8002a7e:	f7fd fc27 	bl	80002d0 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	461d      	mov	r5, r3
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f9b9 	bl	8000e04 <__aeabi_i2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	69f9      	ldr	r1, [r7, #28]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fb62 	bl	8000160 <__aeabi_fmul>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	6979      	ldr	r1, [r7, #20]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f8fb 	bl	8000c9c <__addsf3>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd71 	bl	8000590 <__aeabi_f2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fdc3 	bl	8000640 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	6938      	ldr	r0, [r7, #16]
 8002ac4:	f7fd fd64 	bl	8000590 <__aeabi_f2d>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4620      	mov	r0, r4
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f7fd fc00 	bl	80002d4 <__adddf3>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7fe f888 	bl	8000bf0 <__aeabi_d2f>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	c0800000 	.word	0xc0800000
 8002af0:	3d25e354 	.word	0x3d25e354
 8002af4:	b63be7a2 	.word	0xb63be7a2
 8002af8:	3c23d70a 	.word	0x3c23d70a
 8002afc:	38a7c5ac 	.word	0x38a7c5ac
 8002b00:	3f25e354 	.word	0x3f25e354
 8002b04:	ba3cbe62 	.word	0xba3cbe62
 8002b08:	3aa7c5ac 	.word	0x3aa7c5ac
 8002b0c:	40390000 	.word	0x40390000

08002b10 <SHT1x_ReadSample>:
 *         - SHT1x_FAIL: Operation failed.
 *         - SHT1x_TIME_OUT: Timeout occurred.
 */
SHT1x_Result_t
SHT1x_ReadSample(SHT1x_Handler_t *Handler, SHT1x_Sample_t *Sample)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint16_t Buffer;
  SHT1x_Result_t Result;

  //get the sensor reading raw data for humidity
  Result = SHT1x_ReadHumidity(Handler, &Buffer);
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fec1 	bl	80028a8 <SHT1x_ReadHumidity>
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]
  if (Result != SHT1x_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SHT1x_ReadSample+0x24>
    return Result;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	e030      	b.n	8002b96 <SHT1x_ReadSample+0x86>
  Sample->HumRaw = Buffer;
 8002b34:	89ba      	ldrh	r2, [r7, #12]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	805a      	strh	r2, [r3, #2]

  //get the sensor reading raw data for temperature
  Result = SHT1x_ReadTemp(Handler, &Buffer);
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fe84 	bl	800284e <SHT1x_ReadTemp>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]
  if (Result != SHT1x_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <SHT1x_ReadSample+0x44>
    return Result;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	e020      	b.n	8002b96 <SHT1x_ReadSample+0x86>
  Sample->TempRaw = Buffer;
 8002b54:	89ba      	ldrh	r2, [r7, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	801a      	strh	r2, [r3, #0]

  Sample->TempCelsius = SHT1x_TempConvertRawC(Handler, Sample->TempRaw);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fed5 	bl	8002910 <SHT1x_TempConvertRawC>
 8002b66:	4602      	mov	r2, r0
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
#if (SHT1x_FahrenheitMeasurement)
  Sample->TempFahrenheit = SHT1x_TempConvertRawF(Handler, Sample->TempRaw);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fefc 	bl	8002970 <SHT1x_TempConvertRawF>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	609a      	str	r2, [r3, #8]
#endif
  Sample->HumidityPercent = SHT1x_HumConvertRawP(Handler, Sample->HumRaw,
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	8859      	ldrh	r1, [r3, #2]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff21 	bl	80029d0 <SHT1x_HumConvertRawP>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	60da      	str	r2, [r3, #12]
                                                 Sample->TempCelsius);

  return SHT1x_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <SHT1x_Init>:
 * @retval SHT1x_Result_t
 *         - SHT1x_OK: Operation was successful.
 */
SHT1x_Result_t
SHT1x_Init(SHT1x_Handler_t *Handler)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
#if (SHT1x_PowerVoltageValue == 0 || SHT1x_PowerVoltageValue == 2)
  Handler->D1Celsius = -40;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <SHT1x_Init+0x28>)
 8002bac:	601a      	str	r2, [r3, #0]
  Handler->D1Fahrenheit = -40;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <SHT1x_Init+0x28>)
 8002bb2:	605a      	str	r2, [r3, #4]
#elif (SHT1x_PowerVoltageValue == 1)
  Handler->D1Celsius = -39.63;
  Handler->D1Fahrenheit = -39.31;
#endif

  Handler->ResolutionStatus = SHT1x_HighResolution;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	721a      	strb	r2, [r3, #8]

  return SHT1x_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	c2200000 	.word	0xc2200000

08002bcc <SHT1x_SetGPIO_OUT>:
                           ##### Private Functions #####                           
 ==================================================================================
 */
#if defined(SHT1x_PLATFORM_STM32)
void SHT1x_SetGPIO_OUT(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002bf4:	f107 0308 	add.w	r3, r7, #8
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fd48 	bl	8001690 <HAL_GPIO_Init>
}
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <SHT1x_SetGPIO_IN_PU>:

void SHT1x_SetGPIO_IN_PU(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fd2a 	bl	8001690 <HAL_GPIO_Init>
}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <SHT1x_Platform_DataDeInit>:
  gpio_config(&SHT1x_GPIO_CONF);
}
#endif

void SHT1x_Platform_DataDeInit(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  SHT1x_DATA_DDR &= ~(1<<SHT1x_DATA_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  gpio_reset_pin(SHT1x_DATA_GPIO);
#endif
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <SHT1x_Platform_DataConfigOut>:

void SHT1x_Platform_DataConfigOut(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_DATA_DDR |= (1<<SHT1x_DATA_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  SHT1x_SetGPIO_OUT(SHT1x_DATA_GPIO, SHT1x_DATA_PIN);
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	4802      	ldr	r0, [pc, #8]	; (8002c60 <SHT1x_Platform_DataConfigOut+0x10>)
 8002c58:	f7ff ffb8 	bl	8002bcc <SHT1x_SetGPIO_OUT>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  SHT1x_SetGPIO_OUT(1<<SHT1x_DATA_GPIO);
#endif
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40010c00 	.word	0x40010c00

08002c64 <SHT1x_Platform_DataConfigIn>:

void SHT1x_Platform_DataConfigIn(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_DATA_DDR &= ~(1<<SHT1x_DATA_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  SHT1x_SetGPIO_IN_PU(SHT1x_DATA_GPIO, SHT1x_DATA_PIN);
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	4802      	ldr	r0, [pc, #8]	; (8002c74 <SHT1x_Platform_DataConfigIn+0x10>)
 8002c6c:	f7ff ffcc 	bl	8002c08 <SHT1x_SetGPIO_IN_PU>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  SHT1x_SetGPIO_IN_PU(1<<SHT1x_DATA_GPIO);
#endif
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40010c00 	.word	0x40010c00

08002c78 <SHT1x_Platform_DataWriteHigh>:

void SHT1x_Platform_DataWriteHigh(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_DATA_PORT |= (1<<SHT1x_DATA_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  HAL_GPIO_WritePin(SHT1x_DATA_GPIO, SHT1x_DATA_PIN, GPIO_PIN_SET);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <SHT1x_Platform_DataWriteHigh+0x14>)
 8002c82:	f7fe fea0 	bl	80019c6 <HAL_GPIO_WritePin>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  gpio_set_level(SHT1x_DATA_GPIO, 1);
#endif
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40010c00 	.word	0x40010c00

08002c90 <SHT1x_Platform_DataWriteLow>:

void SHT1x_Platform_DataWriteLow(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_DATA_PORT &= ~(1<<SHT1x_DATA_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  HAL_GPIO_WritePin(SHT1x_DATA_GPIO, SHT1x_DATA_PIN, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <SHT1x_Platform_DataWriteLow+0x14>)
 8002c9a:	f7fe fe94 	bl	80019c6 <HAL_GPIO_WritePin>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  gpio_set_level(SHT1x_DATA_GPIO, 0);
#endif
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40010c00 	.word	0x40010c00

08002ca8 <SHT1x_Platform_DataRead>:

uint8_t SHT1x_Platform_DataRead(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  uint8_t Result = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	71fb      	strb	r3, [r7, #7]
#if defined(SHT1x_PLATFORM_AVR)
  Result = (DATA_PIN >> DATA_NUM) & 0x01;
#elif defined(SHT1x_PLATFORM_STM32)
  Result = HAL_GPIO_ReadPin(SHT1x_DATA_GPIO, SHT1x_DATA_PIN);
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <SHT1x_Platform_DataRead+0x20>)
 8002cb6:	f7fe fe6f 	bl	8001998 <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  Result = gpio_get_level(SHT1x_DATA_GPIO);
#endif
  return Result;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40010c00 	.word	0x40010c00

08002ccc <SHT1x_Platform_SckDeInit>:



void SHT1x_Platform_SckDeInit(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  SHT1x_SCK_DDR &= ~(1<<SHT1x_SCK_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  gpio_reset_pin(SHT1x_SCK_GPIO);
#endif
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <SHT1x_Platform_SckConfigOut>:

void SHT1x_Platform_SckConfigOut(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_SCK_DDR |= (1<<SHT1x_SCK_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  SHT1x_SetGPIO_OUT(SHT1x_SCK_GPIO, SHT1x_SCK_PIN);
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <SHT1x_Platform_SckConfigOut+0x10>)
 8002ce0:	f7ff ff74 	bl	8002bcc <SHT1x_SetGPIO_OUT>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  SHT1x_SetGPIO_OUT(1<<SHT1x_SCK_GPIO);
#endif
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40010c00 	.word	0x40010c00

08002cec <SHT1x_Platform_SckWriteHigh>:

void SHT1x_Platform_SckWriteHigh(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_SCK_PORT |= (1<<SHT1x_SCK_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  HAL_GPIO_WritePin(SHT1x_SCK_GPIO, SHT1x_SCK_PIN, GPIO_PIN_SET);
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2140      	movs	r1, #64	; 0x40
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <SHT1x_Platform_SckWriteHigh+0x14>)
 8002cf6:	f7fe fe66 	bl	80019c6 <HAL_GPIO_WritePin>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  gpio_set_level(SHT1x_SCK_GPIO, 1);
#endif
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40010c00 	.word	0x40010c00

08002d04 <SHT1x_Platform_SckWriteLow>:

void SHT1x_Platform_SckWriteLow(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
#if defined(SHT1x_PLATFORM_AVR)
  SHT1x_SCK_PORT &= ~(1<<SHT1x_SCK_NUM);
#elif defined(SHT1x_PLATFORM_STM32)
  HAL_GPIO_WritePin(SHT1x_SCK_GPIO, SHT1x_SCK_PIN, GPIO_PIN_RESET);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <SHT1x_Platform_SckWriteLow+0x14>)
 8002d0e:	f7fe fe5a 	bl	80019c6 <HAL_GPIO_WritePin>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  gpio_set_level(SHT1x_SCK_GPIO, 0);
#endif
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40010c00 	.word	0x40010c00

08002d1c <SHT1x_Platform_DelayMs>:


void SHT1x_Platform_DelayMs(uint8_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
#if defined(SHT1x_PLATFORM_AVR)
  for (; Delay; --Delay)
    _delay_ms(1);
#elif defined(SHT1x_PLATFORM_STM32)
  HAL_Delay(Delay);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fba9 	bl	8001480 <HAL_Delay>
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  vTaskDelay(Delay / portTICK_PERIOD_MS);
#endif
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <SHT1x_Platform_DelayUs>:

void SHT1x_Platform_DelayUs(uint8_t Delay)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	71fb      	strb	r3, [r7, #7]
#if defined(SHT1x_PLATFORM_AVR)
  for (; Delay; --Delay)
    _delay_us(1);
#elif defined(SHT1x_PLATFORM_STM32)
  for(uint32_t DelayCounter = 0; DelayCounter<100*Delay; DelayCounter++) DelayCounter = DelayCounter;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e002      	b.n	8002d4c <SHT1x_Platform_DelayUs+0x16>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2264      	movs	r2, #100	; 0x64
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d3f4      	bcc.n	8002d46 <SHT1x_Platform_DelayUs+0x10>
//		while(wait < SysTick->VAL && HAL_GetTick() == tickn) { }
//	}
#elif defined(SHT1x_PLATFORM_ESP32_IDF)
  ets_delay_us(Delay);
#endif
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <SHT1x_Platform_Init>:
 * @retval SHT1x_Result_t
 *         - SHT1x_OK: Operation was successful.
 */
SHT1x_Result_t
SHT1x_Platform_Init(SHT1x_Handler_t *Handler)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  Handler->DataDeInit = SHT1x_Platform_DataDeInit;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <SHT1x_Platform_Init+0x5c>)
 8002d74:	60da      	str	r2, [r3, #12]
  Handler->DataConfigOut = SHT1x_Platform_DataConfigOut;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <SHT1x_Platform_Init+0x60>)
 8002d7a:	611a      	str	r2, [r3, #16]
  Handler->DataConfigIn = SHT1x_Platform_DataConfigIn;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <SHT1x_Platform_Init+0x64>)
 8002d80:	615a      	str	r2, [r3, #20]
  Handler->DataWriteHigh = SHT1x_Platform_DataWriteHigh;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <SHT1x_Platform_Init+0x68>)
 8002d86:	619a      	str	r2, [r3, #24]
  Handler->DataWriteLow = SHT1x_Platform_DataWriteLow;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <SHT1x_Platform_Init+0x6c>)
 8002d8c:	61da      	str	r2, [r3, #28]
  Handler->DataRead = SHT1x_Platform_DataRead;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <SHT1x_Platform_Init+0x70>)
 8002d92:	621a      	str	r2, [r3, #32]
  Handler->SckDeInit = SHT1x_Platform_SckDeInit;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <SHT1x_Platform_Init+0x74>)
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
  Handler->SckConfigOut = SHT1x_Platform_SckConfigOut;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <SHT1x_Platform_Init+0x78>)
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
  Handler->SckWriteHigh = SHT1x_Platform_SckWriteHigh;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <SHT1x_Platform_Init+0x7c>)
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
  Handler->SckWriteLow = SHT1x_Platform_SckWriteLow;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <SHT1x_Platform_Init+0x80>)
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
  Handler->DelayMs = SHT1x_Platform_DelayMs;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <SHT1x_Platform_Init+0x84>)
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
  Handler->DelayUs = SHT1x_Platform_DelayUs;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <SHT1x_Platform_Init+0x88>)
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

  return SHT1x_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	08002c45 	.word	0x08002c45
 8002dc8:	08002c51 	.word	0x08002c51
 8002dcc:	08002c65 	.word	0x08002c65
 8002dd0:	08002c79 	.word	0x08002c79
 8002dd4:	08002c91 	.word	0x08002c91
 8002dd8:	08002ca9 	.word	0x08002ca9
 8002ddc:	08002ccd 	.word	0x08002ccd
 8002de0:	08002cd9 	.word	0x08002cd9
 8002de4:	08002ced 	.word	0x08002ced
 8002de8:	08002d05 	.word	0x08002d05
 8002dec:	08002d1d 	.word	0x08002d1d
 8002df0:	08002d37 	.word	0x08002d37

08002df4 <__errno>:
 8002df4:	4b01      	ldr	r3, [pc, #4]	; (8002dfc <__errno+0x8>)
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	2000000c 	.word	0x2000000c

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	2600      	movs	r6, #0
 8002e04:	4d0c      	ldr	r5, [pc, #48]	; (8002e38 <__libc_init_array+0x38>)
 8002e06:	4c0d      	ldr	r4, [pc, #52]	; (8002e3c <__libc_init_array+0x3c>)
 8002e08:	1b64      	subs	r4, r4, r5
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	42a6      	cmp	r6, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	f002 fd10 	bl	8005834 <_init>
 8002e14:	2600      	movs	r6, #0
 8002e16:	4d0a      	ldr	r5, [pc, #40]	; (8002e40 <__libc_init_array+0x40>)
 8002e18:	4c0a      	ldr	r4, [pc, #40]	; (8002e44 <__libc_init_array+0x44>)
 8002e1a:	1b64      	subs	r4, r4, r5
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	42a6      	cmp	r6, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e28:	4798      	blx	r3
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e32:	4798      	blx	r3
 8002e34:	3601      	adds	r6, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08005c94 	.word	0x08005c94
 8002e3c:	08005c94 	.word	0x08005c94
 8002e40:	08005c94 	.word	0x08005c94
 8002e44:	08005c98 	.word	0x08005c98

08002e48 <memset>:
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4402      	add	r2, r0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <memset+0xa>
 8002e50:	4770      	bx	lr
 8002e52:	f803 1b01 	strb.w	r1, [r3], #1
 8002e56:	e7f9      	b.n	8002e4c <memset+0x4>

08002e58 <__cvt>:
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e5e:	461f      	mov	r7, r3
 8002e60:	bfbb      	ittet	lt
 8002e62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	461f      	movlt	r7, r3
 8002e68:	2300      	movge	r3, #0
 8002e6a:	232d      	movlt	r3, #45	; 0x2d
 8002e6c:	b088      	sub	sp, #32
 8002e6e:	4614      	mov	r4, r2
 8002e70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002e74:	7013      	strb	r3, [r2, #0]
 8002e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e78:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002e7c:	f023 0820 	bic.w	r8, r3, #32
 8002e80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e84:	d005      	beq.n	8002e92 <__cvt+0x3a>
 8002e86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002e8a:	d100      	bne.n	8002e8e <__cvt+0x36>
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e000      	b.n	8002e94 <__cvt+0x3c>
 8002e92:	2303      	movs	r3, #3
 8002e94:	aa07      	add	r2, sp, #28
 8002e96:	9204      	str	r2, [sp, #16]
 8002e98:	aa06      	add	r2, sp, #24
 8002e9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e9e:	e9cd 3500 	strd	r3, r5, [sp]
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	f000 fcdf 	bl	8003868 <_dtoa_r>
 8002eaa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002eae:	4606      	mov	r6, r0
 8002eb0:	d102      	bne.n	8002eb8 <__cvt+0x60>
 8002eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002eb4:	07db      	lsls	r3, r3, #31
 8002eb6:	d522      	bpl.n	8002efe <__cvt+0xa6>
 8002eb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ebc:	eb06 0905 	add.w	r9, r6, r5
 8002ec0:	d110      	bne.n	8002ee4 <__cvt+0x8c>
 8002ec2:	7833      	ldrb	r3, [r6, #0]
 8002ec4:	2b30      	cmp	r3, #48	; 0x30
 8002ec6:	d10a      	bne.n	8002ede <__cvt+0x86>
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4620      	mov	r0, r4
 8002ece:	4639      	mov	r1, r7
 8002ed0:	f7fd fe1e 	bl	8000b10 <__aeabi_dcmpeq>
 8002ed4:	b918      	cbnz	r0, 8002ede <__cvt+0x86>
 8002ed6:	f1c5 0501 	rsb	r5, r5, #1
 8002eda:	f8ca 5000 	str.w	r5, [sl]
 8002ede:	f8da 3000 	ldr.w	r3, [sl]
 8002ee2:	4499      	add	r9, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	4620      	mov	r0, r4
 8002eea:	4639      	mov	r1, r7
 8002eec:	f7fd fe10 	bl	8000b10 <__aeabi_dcmpeq>
 8002ef0:	b108      	cbz	r0, 8002ef6 <__cvt+0x9e>
 8002ef2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ef6:	2230      	movs	r2, #48	; 0x30
 8002ef8:	9b07      	ldr	r3, [sp, #28]
 8002efa:	454b      	cmp	r3, r9
 8002efc:	d307      	bcc.n	8002f0e <__cvt+0xb6>
 8002efe:	4630      	mov	r0, r6
 8002f00:	9b07      	ldr	r3, [sp, #28]
 8002f02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f04:	1b9b      	subs	r3, r3, r6
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	b008      	add	sp, #32
 8002f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0e:	1c59      	adds	r1, r3, #1
 8002f10:	9107      	str	r1, [sp, #28]
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e7f0      	b.n	8002ef8 <__cvt+0xa0>

08002f16 <__exponent>:
 8002f16:	4603      	mov	r3, r0
 8002f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	f803 2b02 	strb.w	r2, [r3], #2
 8002f20:	bfb6      	itet	lt
 8002f22:	222d      	movlt	r2, #45	; 0x2d
 8002f24:	222b      	movge	r2, #43	; 0x2b
 8002f26:	4249      	neglt	r1, r1
 8002f28:	2909      	cmp	r1, #9
 8002f2a:	7042      	strb	r2, [r0, #1]
 8002f2c:	dd2b      	ble.n	8002f86 <__exponent+0x70>
 8002f2e:	f10d 0407 	add.w	r4, sp, #7
 8002f32:	46a4      	mov	ip, r4
 8002f34:	270a      	movs	r7, #10
 8002f36:	fb91 f6f7 	sdiv	r6, r1, r7
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	46a6      	mov	lr, r4
 8002f3e:	fb07 1516 	mls	r5, r7, r6, r1
 8002f42:	2a63      	cmp	r2, #99	; 0x63
 8002f44:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002f48:	4631      	mov	r1, r6
 8002f4a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002f4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002f52:	dcf0      	bgt.n	8002f36 <__exponent+0x20>
 8002f54:	3130      	adds	r1, #48	; 0x30
 8002f56:	f1ae 0502 	sub.w	r5, lr, #2
 8002f5a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002f5e:	4629      	mov	r1, r5
 8002f60:	1c44      	adds	r4, r0, #1
 8002f62:	4561      	cmp	r1, ip
 8002f64:	d30a      	bcc.n	8002f7c <__exponent+0x66>
 8002f66:	f10d 0209 	add.w	r2, sp, #9
 8002f6a:	eba2 020e 	sub.w	r2, r2, lr
 8002f6e:	4565      	cmp	r5, ip
 8002f70:	bf88      	it	hi
 8002f72:	2200      	movhi	r2, #0
 8002f74:	4413      	add	r3, r2
 8002f76:	1a18      	subs	r0, r3, r0
 8002f78:	b003      	add	sp, #12
 8002f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f80:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002f84:	e7ed      	b.n	8002f62 <__exponent+0x4c>
 8002f86:	2330      	movs	r3, #48	; 0x30
 8002f88:	3130      	adds	r1, #48	; 0x30
 8002f8a:	7083      	strb	r3, [r0, #2]
 8002f8c:	70c1      	strb	r1, [r0, #3]
 8002f8e:	1d03      	adds	r3, r0, #4
 8002f90:	e7f1      	b.n	8002f76 <__exponent+0x60>
	...

08002f94 <_printf_float>:
 8002f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f98:	b091      	sub	sp, #68	; 0x44
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002fa0:	4616      	mov	r6, r2
 8002fa2:	461f      	mov	r7, r3
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	f001 fb43 	bl	8004630 <_localeconv_r>
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb0:	f7fd f8ce 	bl	8000150 <strlen>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8002fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fbc:	900a      	str	r0, [sp, #40]	; 0x28
 8002fbe:	3307      	adds	r3, #7
 8002fc0:	f023 0307 	bic.w	r3, r3, #7
 8002fc4:	f103 0208 	add.w	r2, r3, #8
 8002fc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002fcc:	f8d4 b000 	ldr.w	fp, [r4]
 8002fd0:	f8c8 2000 	str.w	r2, [r8]
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002fdc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002fe0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fea:	4640      	mov	r0, r8
 8002fec:	4b9c      	ldr	r3, [pc, #624]	; (8003260 <_printf_float+0x2cc>)
 8002fee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ff0:	f7fd fdc0 	bl	8000b74 <__aeabi_dcmpun>
 8002ff4:	bb70      	cbnz	r0, 8003054 <_printf_float+0xc0>
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	4b98      	ldr	r3, [pc, #608]	; (8003260 <_printf_float+0x2cc>)
 8002ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003000:	f7fd fd9a 	bl	8000b38 <__aeabi_dcmple>
 8003004:	bb30      	cbnz	r0, 8003054 <_printf_float+0xc0>
 8003006:	2200      	movs	r2, #0
 8003008:	2300      	movs	r3, #0
 800300a:	4640      	mov	r0, r8
 800300c:	4651      	mov	r1, sl
 800300e:	f7fd fd89 	bl	8000b24 <__aeabi_dcmplt>
 8003012:	b110      	cbz	r0, 800301a <_printf_float+0x86>
 8003014:	232d      	movs	r3, #45	; 0x2d
 8003016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <_printf_float+0x2d0>)
 800301c:	4892      	ldr	r0, [pc, #584]	; (8003268 <_printf_float+0x2d4>)
 800301e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003022:	bf94      	ite	ls
 8003024:	4698      	movls	r8, r3
 8003026:	4680      	movhi	r8, r0
 8003028:	2303      	movs	r3, #3
 800302a:	f04f 0a00 	mov.w	sl, #0
 800302e:	6123      	str	r3, [r4, #16]
 8003030:	f02b 0304 	bic.w	r3, fp, #4
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	4633      	mov	r3, r6
 8003038:	4621      	mov	r1, r4
 800303a:	4628      	mov	r0, r5
 800303c:	9700      	str	r7, [sp, #0]
 800303e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003040:	f000 f9d4 	bl	80033ec <_printf_common>
 8003044:	3001      	adds	r0, #1
 8003046:	f040 8090 	bne.w	800316a <_printf_float+0x1d6>
 800304a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800304e:	b011      	add	sp, #68	; 0x44
 8003050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003054:	4642      	mov	r2, r8
 8003056:	4653      	mov	r3, sl
 8003058:	4640      	mov	r0, r8
 800305a:	4651      	mov	r1, sl
 800305c:	f7fd fd8a 	bl	8000b74 <__aeabi_dcmpun>
 8003060:	b148      	cbz	r0, 8003076 <_printf_float+0xe2>
 8003062:	f1ba 0f00 	cmp.w	sl, #0
 8003066:	bfb8      	it	lt
 8003068:	232d      	movlt	r3, #45	; 0x2d
 800306a:	4880      	ldr	r0, [pc, #512]	; (800326c <_printf_float+0x2d8>)
 800306c:	bfb8      	it	lt
 800306e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003072:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <_printf_float+0x2dc>)
 8003074:	e7d3      	b.n	800301e <_printf_float+0x8a>
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	d142      	bne.n	8003106 <_printf_float+0x172>
 8003080:	2306      	movs	r3, #6
 8003082:	6063      	str	r3, [r4, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	9206      	str	r2, [sp, #24]
 8003088:	aa0e      	add	r2, sp, #56	; 0x38
 800308a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800308e:	aa0d      	add	r2, sp, #52	; 0x34
 8003090:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003094:	9203      	str	r2, [sp, #12]
 8003096:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800309a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	6863      	ldr	r3, [r4, #4]
 80030a2:	4642      	mov	r2, r8
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	4628      	mov	r0, r5
 80030a8:	4653      	mov	r3, sl
 80030aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80030ac:	f7ff fed4 	bl	8002e58 <__cvt>
 80030b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030b2:	4680      	mov	r8, r0
 80030b4:	2947      	cmp	r1, #71	; 0x47
 80030b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030b8:	d108      	bne.n	80030cc <_printf_float+0x138>
 80030ba:	1cc8      	adds	r0, r1, #3
 80030bc:	db02      	blt.n	80030c4 <_printf_float+0x130>
 80030be:	6863      	ldr	r3, [r4, #4]
 80030c0:	4299      	cmp	r1, r3
 80030c2:	dd40      	ble.n	8003146 <_printf_float+0x1b2>
 80030c4:	f1a9 0902 	sub.w	r9, r9, #2
 80030c8:	fa5f f989 	uxtb.w	r9, r9
 80030cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80030d0:	d81f      	bhi.n	8003112 <_printf_float+0x17e>
 80030d2:	464a      	mov	r2, r9
 80030d4:	3901      	subs	r1, #1
 80030d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80030da:	910d      	str	r1, [sp, #52]	; 0x34
 80030dc:	f7ff ff1b 	bl	8002f16 <__exponent>
 80030e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030e2:	4682      	mov	sl, r0
 80030e4:	1813      	adds	r3, r2, r0
 80030e6:	2a01      	cmp	r2, #1
 80030e8:	6123      	str	r3, [r4, #16]
 80030ea:	dc02      	bgt.n	80030f2 <_printf_float+0x15e>
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	07d2      	lsls	r2, r2, #31
 80030f0:	d501      	bpl.n	80030f6 <_printf_float+0x162>
 80030f2:	3301      	adds	r3, #1
 80030f4:	6123      	str	r3, [r4, #16]
 80030f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d09b      	beq.n	8003036 <_printf_float+0xa2>
 80030fe:	232d      	movs	r3, #45	; 0x2d
 8003100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003104:	e797      	b.n	8003036 <_printf_float+0xa2>
 8003106:	2947      	cmp	r1, #71	; 0x47
 8003108:	d1bc      	bne.n	8003084 <_printf_float+0xf0>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ba      	bne.n	8003084 <_printf_float+0xf0>
 800310e:	2301      	movs	r3, #1
 8003110:	e7b7      	b.n	8003082 <_printf_float+0xee>
 8003112:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003116:	d118      	bne.n	800314a <_printf_float+0x1b6>
 8003118:	2900      	cmp	r1, #0
 800311a:	6863      	ldr	r3, [r4, #4]
 800311c:	dd0b      	ble.n	8003136 <_printf_float+0x1a2>
 800311e:	6121      	str	r1, [r4, #16]
 8003120:	b913      	cbnz	r3, 8003128 <_printf_float+0x194>
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	07d0      	lsls	r0, r2, #31
 8003126:	d502      	bpl.n	800312e <_printf_float+0x19a>
 8003128:	3301      	adds	r3, #1
 800312a:	440b      	add	r3, r1
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	f04f 0a00 	mov.w	sl, #0
 8003132:	65a1      	str	r1, [r4, #88]	; 0x58
 8003134:	e7df      	b.n	80030f6 <_printf_float+0x162>
 8003136:	b913      	cbnz	r3, 800313e <_printf_float+0x1aa>
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	07d2      	lsls	r2, r2, #31
 800313c:	d501      	bpl.n	8003142 <_printf_float+0x1ae>
 800313e:	3302      	adds	r3, #2
 8003140:	e7f4      	b.n	800312c <_printf_float+0x198>
 8003142:	2301      	movs	r3, #1
 8003144:	e7f2      	b.n	800312c <_printf_float+0x198>
 8003146:	f04f 0967 	mov.w	r9, #103	; 0x67
 800314a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800314c:	4299      	cmp	r1, r3
 800314e:	db05      	blt.n	800315c <_printf_float+0x1c8>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	6121      	str	r1, [r4, #16]
 8003154:	07d8      	lsls	r0, r3, #31
 8003156:	d5ea      	bpl.n	800312e <_printf_float+0x19a>
 8003158:	1c4b      	adds	r3, r1, #1
 800315a:	e7e7      	b.n	800312c <_printf_float+0x198>
 800315c:	2900      	cmp	r1, #0
 800315e:	bfcc      	ite	gt
 8003160:	2201      	movgt	r2, #1
 8003162:	f1c1 0202 	rsble	r2, r1, #2
 8003166:	4413      	add	r3, r2
 8003168:	e7e0      	b.n	800312c <_printf_float+0x198>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	055a      	lsls	r2, r3, #21
 800316e:	d407      	bmi.n	8003180 <_printf_float+0x1ec>
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	4642      	mov	r2, r8
 8003174:	4631      	mov	r1, r6
 8003176:	4628      	mov	r0, r5
 8003178:	47b8      	blx	r7
 800317a:	3001      	adds	r0, #1
 800317c:	d12b      	bne.n	80031d6 <_printf_float+0x242>
 800317e:	e764      	b.n	800304a <_printf_float+0xb6>
 8003180:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003184:	f240 80dd 	bls.w	8003342 <_printf_float+0x3ae>
 8003188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800318c:	2200      	movs	r2, #0
 800318e:	2300      	movs	r3, #0
 8003190:	f7fd fcbe 	bl	8000b10 <__aeabi_dcmpeq>
 8003194:	2800      	cmp	r0, #0
 8003196:	d033      	beq.n	8003200 <_printf_float+0x26c>
 8003198:	2301      	movs	r3, #1
 800319a:	4631      	mov	r1, r6
 800319c:	4628      	mov	r0, r5
 800319e:	4a35      	ldr	r2, [pc, #212]	; (8003274 <_printf_float+0x2e0>)
 80031a0:	47b8      	blx	r7
 80031a2:	3001      	adds	r0, #1
 80031a4:	f43f af51 	beq.w	800304a <_printf_float+0xb6>
 80031a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031ac:	429a      	cmp	r2, r3
 80031ae:	db02      	blt.n	80031b6 <_printf_float+0x222>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	07d8      	lsls	r0, r3, #31
 80031b4:	d50f      	bpl.n	80031d6 <_printf_float+0x242>
 80031b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031ba:	4631      	mov	r1, r6
 80031bc:	4628      	mov	r0, r5
 80031be:	47b8      	blx	r7
 80031c0:	3001      	adds	r0, #1
 80031c2:	f43f af42 	beq.w	800304a <_printf_float+0xb6>
 80031c6:	f04f 0800 	mov.w	r8, #0
 80031ca:	f104 091a 	add.w	r9, r4, #26
 80031ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031d0:	3b01      	subs	r3, #1
 80031d2:	4543      	cmp	r3, r8
 80031d4:	dc09      	bgt.n	80031ea <_printf_float+0x256>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	079b      	lsls	r3, r3, #30
 80031da:	f100 8102 	bmi.w	80033e2 <_printf_float+0x44e>
 80031de:	68e0      	ldr	r0, [r4, #12]
 80031e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031e2:	4298      	cmp	r0, r3
 80031e4:	bfb8      	it	lt
 80031e6:	4618      	movlt	r0, r3
 80031e8:	e731      	b.n	800304e <_printf_float+0xba>
 80031ea:	2301      	movs	r3, #1
 80031ec:	464a      	mov	r2, r9
 80031ee:	4631      	mov	r1, r6
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b8      	blx	r7
 80031f4:	3001      	adds	r0, #1
 80031f6:	f43f af28 	beq.w	800304a <_printf_float+0xb6>
 80031fa:	f108 0801 	add.w	r8, r8, #1
 80031fe:	e7e6      	b.n	80031ce <_printf_float+0x23a>
 8003200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003202:	2b00      	cmp	r3, #0
 8003204:	dc38      	bgt.n	8003278 <_printf_float+0x2e4>
 8003206:	2301      	movs	r3, #1
 8003208:	4631      	mov	r1, r6
 800320a:	4628      	mov	r0, r5
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <_printf_float+0x2e0>)
 800320e:	47b8      	blx	r7
 8003210:	3001      	adds	r0, #1
 8003212:	f43f af1a 	beq.w	800304a <_printf_float+0xb6>
 8003216:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800321a:	4313      	orrs	r3, r2
 800321c:	d102      	bne.n	8003224 <_printf_float+0x290>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	07d9      	lsls	r1, r3, #31
 8003222:	d5d8      	bpl.n	80031d6 <_printf_float+0x242>
 8003224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003228:	4631      	mov	r1, r6
 800322a:	4628      	mov	r0, r5
 800322c:	47b8      	blx	r7
 800322e:	3001      	adds	r0, #1
 8003230:	f43f af0b 	beq.w	800304a <_printf_float+0xb6>
 8003234:	f04f 0900 	mov.w	r9, #0
 8003238:	f104 0a1a 	add.w	sl, r4, #26
 800323c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800323e:	425b      	negs	r3, r3
 8003240:	454b      	cmp	r3, r9
 8003242:	dc01      	bgt.n	8003248 <_printf_float+0x2b4>
 8003244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003246:	e794      	b.n	8003172 <_printf_float+0x1de>
 8003248:	2301      	movs	r3, #1
 800324a:	4652      	mov	r2, sl
 800324c:	4631      	mov	r1, r6
 800324e:	4628      	mov	r0, r5
 8003250:	47b8      	blx	r7
 8003252:	3001      	adds	r0, #1
 8003254:	f43f aef9 	beq.w	800304a <_printf_float+0xb6>
 8003258:	f109 0901 	add.w	r9, r9, #1
 800325c:	e7ee      	b.n	800323c <_printf_float+0x2a8>
 800325e:	bf00      	nop
 8003260:	7fefffff 	.word	0x7fefffff
 8003264:	080058b4 	.word	0x080058b4
 8003268:	080058b8 	.word	0x080058b8
 800326c:	080058c0 	.word	0x080058c0
 8003270:	080058bc 	.word	0x080058bc
 8003274:	080058c4 	.word	0x080058c4
 8003278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800327a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800327c:	429a      	cmp	r2, r3
 800327e:	bfa8      	it	ge
 8003280:	461a      	movge	r2, r3
 8003282:	2a00      	cmp	r2, #0
 8003284:	4691      	mov	r9, r2
 8003286:	dc37      	bgt.n	80032f8 <_printf_float+0x364>
 8003288:	f04f 0b00 	mov.w	fp, #0
 800328c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003290:	f104 021a 	add.w	r2, r4, #26
 8003294:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003298:	ebaa 0309 	sub.w	r3, sl, r9
 800329c:	455b      	cmp	r3, fp
 800329e:	dc33      	bgt.n	8003308 <_printf_float+0x374>
 80032a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032a4:	429a      	cmp	r2, r3
 80032a6:	db3b      	blt.n	8003320 <_printf_float+0x38c>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	07da      	lsls	r2, r3, #31
 80032ac:	d438      	bmi.n	8003320 <_printf_float+0x38c>
 80032ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032b2:	eba2 030a 	sub.w	r3, r2, sl
 80032b6:	eba2 0901 	sub.w	r9, r2, r1
 80032ba:	4599      	cmp	r9, r3
 80032bc:	bfa8      	it	ge
 80032be:	4699      	movge	r9, r3
 80032c0:	f1b9 0f00 	cmp.w	r9, #0
 80032c4:	dc34      	bgt.n	8003330 <_printf_float+0x39c>
 80032c6:	f04f 0800 	mov.w	r8, #0
 80032ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032ce:	f104 0a1a 	add.w	sl, r4, #26
 80032d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	eba3 0309 	sub.w	r3, r3, r9
 80032dc:	4543      	cmp	r3, r8
 80032de:	f77f af7a 	ble.w	80031d6 <_printf_float+0x242>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4652      	mov	r2, sl
 80032e6:	4631      	mov	r1, r6
 80032e8:	4628      	mov	r0, r5
 80032ea:	47b8      	blx	r7
 80032ec:	3001      	adds	r0, #1
 80032ee:	f43f aeac 	beq.w	800304a <_printf_float+0xb6>
 80032f2:	f108 0801 	add.w	r8, r8, #1
 80032f6:	e7ec      	b.n	80032d2 <_printf_float+0x33e>
 80032f8:	4613      	mov	r3, r2
 80032fa:	4631      	mov	r1, r6
 80032fc:	4642      	mov	r2, r8
 80032fe:	4628      	mov	r0, r5
 8003300:	47b8      	blx	r7
 8003302:	3001      	adds	r0, #1
 8003304:	d1c0      	bne.n	8003288 <_printf_float+0x2f4>
 8003306:	e6a0      	b.n	800304a <_printf_float+0xb6>
 8003308:	2301      	movs	r3, #1
 800330a:	4631      	mov	r1, r6
 800330c:	4628      	mov	r0, r5
 800330e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	f43f ae99 	beq.w	800304a <_printf_float+0xb6>
 8003318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800331a:	f10b 0b01 	add.w	fp, fp, #1
 800331e:	e7b9      	b.n	8003294 <_printf_float+0x300>
 8003320:	4631      	mov	r1, r6
 8003322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003326:	4628      	mov	r0, r5
 8003328:	47b8      	blx	r7
 800332a:	3001      	adds	r0, #1
 800332c:	d1bf      	bne.n	80032ae <_printf_float+0x31a>
 800332e:	e68c      	b.n	800304a <_printf_float+0xb6>
 8003330:	464b      	mov	r3, r9
 8003332:	4631      	mov	r1, r6
 8003334:	4628      	mov	r0, r5
 8003336:	eb08 020a 	add.w	r2, r8, sl
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	d1c2      	bne.n	80032c6 <_printf_float+0x332>
 8003340:	e683      	b.n	800304a <_printf_float+0xb6>
 8003342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003344:	2a01      	cmp	r2, #1
 8003346:	dc01      	bgt.n	800334c <_printf_float+0x3b8>
 8003348:	07db      	lsls	r3, r3, #31
 800334a:	d537      	bpl.n	80033bc <_printf_float+0x428>
 800334c:	2301      	movs	r3, #1
 800334e:	4642      	mov	r2, r8
 8003350:	4631      	mov	r1, r6
 8003352:	4628      	mov	r0, r5
 8003354:	47b8      	blx	r7
 8003356:	3001      	adds	r0, #1
 8003358:	f43f ae77 	beq.w	800304a <_printf_float+0xb6>
 800335c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	47b8      	blx	r7
 8003366:	3001      	adds	r0, #1
 8003368:	f43f ae6f 	beq.w	800304a <_printf_float+0xb6>
 800336c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003370:	2200      	movs	r2, #0
 8003372:	2300      	movs	r3, #0
 8003374:	f7fd fbcc 	bl	8000b10 <__aeabi_dcmpeq>
 8003378:	b9d8      	cbnz	r0, 80033b2 <_printf_float+0x41e>
 800337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800337c:	f108 0201 	add.w	r2, r8, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	4631      	mov	r1, r6
 8003384:	4628      	mov	r0, r5
 8003386:	47b8      	blx	r7
 8003388:	3001      	adds	r0, #1
 800338a:	d10e      	bne.n	80033aa <_printf_float+0x416>
 800338c:	e65d      	b.n	800304a <_printf_float+0xb6>
 800338e:	2301      	movs	r3, #1
 8003390:	464a      	mov	r2, r9
 8003392:	4631      	mov	r1, r6
 8003394:	4628      	mov	r0, r5
 8003396:	47b8      	blx	r7
 8003398:	3001      	adds	r0, #1
 800339a:	f43f ae56 	beq.w	800304a <_printf_float+0xb6>
 800339e:	f108 0801 	add.w	r8, r8, #1
 80033a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033a4:	3b01      	subs	r3, #1
 80033a6:	4543      	cmp	r3, r8
 80033a8:	dcf1      	bgt.n	800338e <_printf_float+0x3fa>
 80033aa:	4653      	mov	r3, sl
 80033ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80033b0:	e6e0      	b.n	8003174 <_printf_float+0x1e0>
 80033b2:	f04f 0800 	mov.w	r8, #0
 80033b6:	f104 091a 	add.w	r9, r4, #26
 80033ba:	e7f2      	b.n	80033a2 <_printf_float+0x40e>
 80033bc:	2301      	movs	r3, #1
 80033be:	4642      	mov	r2, r8
 80033c0:	e7df      	b.n	8003382 <_printf_float+0x3ee>
 80033c2:	2301      	movs	r3, #1
 80033c4:	464a      	mov	r2, r9
 80033c6:	4631      	mov	r1, r6
 80033c8:	4628      	mov	r0, r5
 80033ca:	47b8      	blx	r7
 80033cc:	3001      	adds	r0, #1
 80033ce:	f43f ae3c 	beq.w	800304a <_printf_float+0xb6>
 80033d2:	f108 0801 	add.w	r8, r8, #1
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80033da:	1a5b      	subs	r3, r3, r1
 80033dc:	4543      	cmp	r3, r8
 80033de:	dcf0      	bgt.n	80033c2 <_printf_float+0x42e>
 80033e0:	e6fd      	b.n	80031de <_printf_float+0x24a>
 80033e2:	f04f 0800 	mov.w	r8, #0
 80033e6:	f104 0919 	add.w	r9, r4, #25
 80033ea:	e7f4      	b.n	80033d6 <_printf_float+0x442>

080033ec <_printf_common>:
 80033ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	4616      	mov	r6, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	688a      	ldr	r2, [r1, #8]
 80033f6:	690b      	ldr	r3, [r1, #16]
 80033f8:	4607      	mov	r7, r0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	bfb8      	it	lt
 80033fe:	4613      	movlt	r3, r2
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003406:	460c      	mov	r4, r1
 8003408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800340c:	b10a      	cbz	r2, 8003412 <_printf_common+0x26>
 800340e:	3301      	adds	r3, #1
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	0699      	lsls	r1, r3, #26
 8003416:	bf42      	ittt	mi
 8003418:	6833      	ldrmi	r3, [r6, #0]
 800341a:	3302      	addmi	r3, #2
 800341c:	6033      	strmi	r3, [r6, #0]
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	f015 0506 	ands.w	r5, r5, #6
 8003424:	d106      	bne.n	8003434 <_printf_common+0x48>
 8003426:	f104 0a19 	add.w	sl, r4, #25
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	6832      	ldr	r2, [r6, #0]
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	42ab      	cmp	r3, r5
 8003432:	dc28      	bgt.n	8003486 <_printf_common+0x9a>
 8003434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003438:	1e13      	subs	r3, r2, #0
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	bf18      	it	ne
 800343e:	2301      	movne	r3, #1
 8003440:	0692      	lsls	r2, r2, #26
 8003442:	d42d      	bmi.n	80034a0 <_printf_common+0xb4>
 8003444:	4649      	mov	r1, r9
 8003446:	4638      	mov	r0, r7
 8003448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800344c:	47c0      	blx	r8
 800344e:	3001      	adds	r0, #1
 8003450:	d020      	beq.n	8003494 <_printf_common+0xa8>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	68e5      	ldr	r5, [r4, #12]
 8003456:	f003 0306 	and.w	r3, r3, #6
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf18      	it	ne
 800345e:	2500      	movne	r5, #0
 8003460:	6832      	ldr	r2, [r6, #0]
 8003462:	f04f 0600 	mov.w	r6, #0
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	bf08      	it	eq
 800346a:	1aad      	subeq	r5, r5, r2
 800346c:	6922      	ldr	r2, [r4, #16]
 800346e:	bf08      	it	eq
 8003470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003474:	4293      	cmp	r3, r2
 8003476:	bfc4      	itt	gt
 8003478:	1a9b      	subgt	r3, r3, r2
 800347a:	18ed      	addgt	r5, r5, r3
 800347c:	341a      	adds	r4, #26
 800347e:	42b5      	cmp	r5, r6
 8003480:	d11a      	bne.n	80034b8 <_printf_common+0xcc>
 8003482:	2000      	movs	r0, #0
 8003484:	e008      	b.n	8003498 <_printf_common+0xac>
 8003486:	2301      	movs	r3, #1
 8003488:	4652      	mov	r2, sl
 800348a:	4649      	mov	r1, r9
 800348c:	4638      	mov	r0, r7
 800348e:	47c0      	blx	r8
 8003490:	3001      	adds	r0, #1
 8003492:	d103      	bne.n	800349c <_printf_common+0xb0>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349c:	3501      	adds	r5, #1
 800349e:	e7c4      	b.n	800342a <_printf_common+0x3e>
 80034a0:	2030      	movs	r0, #48	; 0x30
 80034a2:	18e1      	adds	r1, r4, r3
 80034a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ae:	4422      	add	r2, r4
 80034b0:	3302      	adds	r3, #2
 80034b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b6:	e7c5      	b.n	8003444 <_printf_common+0x58>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4622      	mov	r2, r4
 80034bc:	4649      	mov	r1, r9
 80034be:	4638      	mov	r0, r7
 80034c0:	47c0      	blx	r8
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0e6      	beq.n	8003494 <_printf_common+0xa8>
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7d9      	b.n	800347e <_printf_common+0x92>
	...

080034cc <_printf_i>:
 80034cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	460c      	mov	r4, r1
 80034d2:	7e27      	ldrb	r7, [r4, #24]
 80034d4:	4691      	mov	r9, r2
 80034d6:	2f78      	cmp	r7, #120	; 0x78
 80034d8:	4680      	mov	r8, r0
 80034da:	469a      	mov	sl, r3
 80034dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034e2:	d807      	bhi.n	80034f4 <_printf_i+0x28>
 80034e4:	2f62      	cmp	r7, #98	; 0x62
 80034e6:	d80a      	bhi.n	80034fe <_printf_i+0x32>
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	f000 80d9 	beq.w	80036a0 <_printf_i+0x1d4>
 80034ee:	2f58      	cmp	r7, #88	; 0x58
 80034f0:	f000 80a4 	beq.w	800363c <_printf_i+0x170>
 80034f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034fc:	e03a      	b.n	8003574 <_printf_i+0xa8>
 80034fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003502:	2b15      	cmp	r3, #21
 8003504:	d8f6      	bhi.n	80034f4 <_printf_i+0x28>
 8003506:	a001      	add	r0, pc, #4	; (adr r0, 800350c <_printf_i+0x40>)
 8003508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800350c:	08003565 	.word	0x08003565
 8003510:	08003579 	.word	0x08003579
 8003514:	080034f5 	.word	0x080034f5
 8003518:	080034f5 	.word	0x080034f5
 800351c:	080034f5 	.word	0x080034f5
 8003520:	080034f5 	.word	0x080034f5
 8003524:	08003579 	.word	0x08003579
 8003528:	080034f5 	.word	0x080034f5
 800352c:	080034f5 	.word	0x080034f5
 8003530:	080034f5 	.word	0x080034f5
 8003534:	080034f5 	.word	0x080034f5
 8003538:	08003687 	.word	0x08003687
 800353c:	080035a9 	.word	0x080035a9
 8003540:	08003669 	.word	0x08003669
 8003544:	080034f5 	.word	0x080034f5
 8003548:	080034f5 	.word	0x080034f5
 800354c:	080036a9 	.word	0x080036a9
 8003550:	080034f5 	.word	0x080034f5
 8003554:	080035a9 	.word	0x080035a9
 8003558:	080034f5 	.word	0x080034f5
 800355c:	080034f5 	.word	0x080034f5
 8003560:	08003671 	.word	0x08003671
 8003564:	680b      	ldr	r3, [r1, #0]
 8003566:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	600a      	str	r2, [r1, #0]
 8003570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003574:	2301      	movs	r3, #1
 8003576:	e0a4      	b.n	80036c2 <_printf_i+0x1f6>
 8003578:	6825      	ldr	r5, [r4, #0]
 800357a:	6808      	ldr	r0, [r1, #0]
 800357c:	062e      	lsls	r6, r5, #24
 800357e:	f100 0304 	add.w	r3, r0, #4
 8003582:	d50a      	bpl.n	800359a <_printf_i+0xce>
 8003584:	6805      	ldr	r5, [r0, #0]
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	2d00      	cmp	r5, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xc8>
 800358c:	232d      	movs	r3, #45	; 0x2d
 800358e:	426d      	negs	r5, r5
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	230a      	movs	r3, #10
 8003596:	485e      	ldr	r0, [pc, #376]	; (8003710 <_printf_i+0x244>)
 8003598:	e019      	b.n	80035ce <_printf_i+0x102>
 800359a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800359e:	6805      	ldr	r5, [r0, #0]
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	bf18      	it	ne
 80035a4:	b22d      	sxthne	r5, r5
 80035a6:	e7ef      	b.n	8003588 <_printf_i+0xbc>
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	1d18      	adds	r0, r3, #4
 80035ae:	6008      	str	r0, [r1, #0]
 80035b0:	0628      	lsls	r0, r5, #24
 80035b2:	d501      	bpl.n	80035b8 <_printf_i+0xec>
 80035b4:	681d      	ldr	r5, [r3, #0]
 80035b6:	e002      	b.n	80035be <_printf_i+0xf2>
 80035b8:	0669      	lsls	r1, r5, #25
 80035ba:	d5fb      	bpl.n	80035b4 <_printf_i+0xe8>
 80035bc:	881d      	ldrh	r5, [r3, #0]
 80035be:	2f6f      	cmp	r7, #111	; 0x6f
 80035c0:	bf0c      	ite	eq
 80035c2:	2308      	moveq	r3, #8
 80035c4:	230a      	movne	r3, #10
 80035c6:	4852      	ldr	r0, [pc, #328]	; (8003710 <_printf_i+0x244>)
 80035c8:	2100      	movs	r1, #0
 80035ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035ce:	6866      	ldr	r6, [r4, #4]
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	bfa8      	it	ge
 80035d4:	6821      	ldrge	r1, [r4, #0]
 80035d6:	60a6      	str	r6, [r4, #8]
 80035d8:	bfa4      	itt	ge
 80035da:	f021 0104 	bicge.w	r1, r1, #4
 80035de:	6021      	strge	r1, [r4, #0]
 80035e0:	b90d      	cbnz	r5, 80035e6 <_printf_i+0x11a>
 80035e2:	2e00      	cmp	r6, #0
 80035e4:	d04d      	beq.n	8003682 <_printf_i+0x1b6>
 80035e6:	4616      	mov	r6, r2
 80035e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ec:	fb03 5711 	mls	r7, r3, r1, r5
 80035f0:	5dc7      	ldrb	r7, [r0, r7]
 80035f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035f6:	462f      	mov	r7, r5
 80035f8:	42bb      	cmp	r3, r7
 80035fa:	460d      	mov	r5, r1
 80035fc:	d9f4      	bls.n	80035e8 <_printf_i+0x11c>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d10b      	bne.n	800361a <_printf_i+0x14e>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	07df      	lsls	r7, r3, #31
 8003606:	d508      	bpl.n	800361a <_printf_i+0x14e>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	6861      	ldr	r1, [r4, #4]
 800360c:	4299      	cmp	r1, r3
 800360e:	bfde      	ittt	le
 8003610:	2330      	movle	r3, #48	; 0x30
 8003612:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003616:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800361a:	1b92      	subs	r2, r2, r6
 800361c:	6122      	str	r2, [r4, #16]
 800361e:	464b      	mov	r3, r9
 8003620:	4621      	mov	r1, r4
 8003622:	4640      	mov	r0, r8
 8003624:	f8cd a000 	str.w	sl, [sp]
 8003628:	aa03      	add	r2, sp, #12
 800362a:	f7ff fedf 	bl	80033ec <_printf_common>
 800362e:	3001      	adds	r0, #1
 8003630:	d14c      	bne.n	80036cc <_printf_i+0x200>
 8003632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003636:	b004      	add	sp, #16
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	4834      	ldr	r0, [pc, #208]	; (8003710 <_printf_i+0x244>)
 800363e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003642:	680e      	ldr	r6, [r1, #0]
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f856 5b04 	ldr.w	r5, [r6], #4
 800364a:	061f      	lsls	r7, r3, #24
 800364c:	600e      	str	r6, [r1, #0]
 800364e:	d514      	bpl.n	800367a <_printf_i+0x1ae>
 8003650:	07d9      	lsls	r1, r3, #31
 8003652:	bf44      	itt	mi
 8003654:	f043 0320 	orrmi.w	r3, r3, #32
 8003658:	6023      	strmi	r3, [r4, #0]
 800365a:	b91d      	cbnz	r5, 8003664 <_printf_i+0x198>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	f023 0320 	bic.w	r3, r3, #32
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	2310      	movs	r3, #16
 8003666:	e7af      	b.n	80035c8 <_printf_i+0xfc>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	2378      	movs	r3, #120	; 0x78
 8003672:	4828      	ldr	r0, [pc, #160]	; (8003714 <_printf_i+0x248>)
 8003674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003678:	e7e3      	b.n	8003642 <_printf_i+0x176>
 800367a:	065e      	lsls	r6, r3, #25
 800367c:	bf48      	it	mi
 800367e:	b2ad      	uxthmi	r5, r5
 8003680:	e7e6      	b.n	8003650 <_printf_i+0x184>
 8003682:	4616      	mov	r6, r2
 8003684:	e7bb      	b.n	80035fe <_printf_i+0x132>
 8003686:	680b      	ldr	r3, [r1, #0]
 8003688:	6826      	ldr	r6, [r4, #0]
 800368a:	1d1d      	adds	r5, r3, #4
 800368c:	6960      	ldr	r0, [r4, #20]
 800368e:	600d      	str	r5, [r1, #0]
 8003690:	0635      	lsls	r5, r6, #24
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	d501      	bpl.n	800369a <_printf_i+0x1ce>
 8003696:	6018      	str	r0, [r3, #0]
 8003698:	e002      	b.n	80036a0 <_printf_i+0x1d4>
 800369a:	0671      	lsls	r1, r6, #25
 800369c:	d5fb      	bpl.n	8003696 <_printf_i+0x1ca>
 800369e:	8018      	strh	r0, [r3, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	4616      	mov	r6, r2
 80036a4:	6123      	str	r3, [r4, #16]
 80036a6:	e7ba      	b.n	800361e <_printf_i+0x152>
 80036a8:	680b      	ldr	r3, [r1, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	600a      	str	r2, [r1, #0]
 80036ae:	681e      	ldr	r6, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4630      	mov	r0, r6
 80036b4:	6862      	ldr	r2, [r4, #4]
 80036b6:	f000 ffcb 	bl	8004650 <memchr>
 80036ba:	b108      	cbz	r0, 80036c0 <_printf_i+0x1f4>
 80036bc:	1b80      	subs	r0, r0, r6
 80036be:	6060      	str	r0, [r4, #4]
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	6123      	str	r3, [r4, #16]
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ca:	e7a8      	b.n	800361e <_printf_i+0x152>
 80036cc:	4632      	mov	r2, r6
 80036ce:	4649      	mov	r1, r9
 80036d0:	4640      	mov	r0, r8
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	47d0      	blx	sl
 80036d6:	3001      	adds	r0, #1
 80036d8:	d0ab      	beq.n	8003632 <_printf_i+0x166>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	079b      	lsls	r3, r3, #30
 80036de:	d413      	bmi.n	8003708 <_printf_i+0x23c>
 80036e0:	68e0      	ldr	r0, [r4, #12]
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	4298      	cmp	r0, r3
 80036e6:	bfb8      	it	lt
 80036e8:	4618      	movlt	r0, r3
 80036ea:	e7a4      	b.n	8003636 <_printf_i+0x16a>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4632      	mov	r2, r6
 80036f0:	4649      	mov	r1, r9
 80036f2:	4640      	mov	r0, r8
 80036f4:	47d0      	blx	sl
 80036f6:	3001      	adds	r0, #1
 80036f8:	d09b      	beq.n	8003632 <_printf_i+0x166>
 80036fa:	3501      	adds	r5, #1
 80036fc:	68e3      	ldr	r3, [r4, #12]
 80036fe:	9903      	ldr	r1, [sp, #12]
 8003700:	1a5b      	subs	r3, r3, r1
 8003702:	42ab      	cmp	r3, r5
 8003704:	dcf2      	bgt.n	80036ec <_printf_i+0x220>
 8003706:	e7eb      	b.n	80036e0 <_printf_i+0x214>
 8003708:	2500      	movs	r5, #0
 800370a:	f104 0619 	add.w	r6, r4, #25
 800370e:	e7f5      	b.n	80036fc <_printf_i+0x230>
 8003710:	080058c6 	.word	0x080058c6
 8003714:	080058d7 	.word	0x080058d7

08003718 <iprintf>:
 8003718:	b40f      	push	{r0, r1, r2, r3}
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <iprintf+0x2c>)
 800371c:	b513      	push	{r0, r1, r4, lr}
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	b124      	cbz	r4, 800372c <iprintf+0x14>
 8003722:	69a3      	ldr	r3, [r4, #24]
 8003724:	b913      	cbnz	r3, 800372c <iprintf+0x14>
 8003726:	4620      	mov	r0, r4
 8003728:	f000 fee4 	bl	80044f4 <__sinit>
 800372c:	ab05      	add	r3, sp, #20
 800372e:	4620      	mov	r0, r4
 8003730:	9a04      	ldr	r2, [sp, #16]
 8003732:	68a1      	ldr	r1, [r4, #8]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f001 fc05 	bl	8004f44 <_vfiprintf_r>
 800373a:	b002      	add	sp, #8
 800373c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003740:	b004      	add	sp, #16
 8003742:	4770      	bx	lr
 8003744:	2000000c 	.word	0x2000000c

08003748 <quorem>:
 8003748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374c:	6903      	ldr	r3, [r0, #16]
 800374e:	690c      	ldr	r4, [r1, #16]
 8003750:	4607      	mov	r7, r0
 8003752:	42a3      	cmp	r3, r4
 8003754:	f2c0 8083 	blt.w	800385e <quorem+0x116>
 8003758:	3c01      	subs	r4, #1
 800375a:	f100 0514 	add.w	r5, r0, #20
 800375e:	f101 0814 	add.w	r8, r1, #20
 8003762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800376c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003770:	3301      	adds	r3, #1
 8003772:	429a      	cmp	r2, r3
 8003774:	fbb2 f6f3 	udiv	r6, r2, r3
 8003778:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800377c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003780:	d332      	bcc.n	80037e8 <quorem+0xa0>
 8003782:	f04f 0e00 	mov.w	lr, #0
 8003786:	4640      	mov	r0, r8
 8003788:	46ac      	mov	ip, r5
 800378a:	46f2      	mov	sl, lr
 800378c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003790:	b293      	uxth	r3, r2
 8003792:	fb06 e303 	mla	r3, r6, r3, lr
 8003796:	0c12      	lsrs	r2, r2, #16
 8003798:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800379c:	fb06 e202 	mla	r2, r6, r2, lr
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	ebaa 0303 	sub.w	r3, sl, r3
 80037a6:	f8dc a000 	ldr.w	sl, [ip]
 80037aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80037ae:	fa1f fa8a 	uxth.w	sl, sl
 80037b2:	4453      	add	r3, sl
 80037b4:	fa1f fa82 	uxth.w	sl, r2
 80037b8:	f8dc 2000 	ldr.w	r2, [ip]
 80037bc:	4581      	cmp	r9, r0
 80037be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80037c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80037d0:	f84c 3b04 	str.w	r3, [ip], #4
 80037d4:	d2da      	bcs.n	800378c <quorem+0x44>
 80037d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80037da:	b92b      	cbnz	r3, 80037e8 <quorem+0xa0>
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	3b04      	subs	r3, #4
 80037e0:	429d      	cmp	r5, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	d32f      	bcc.n	8003846 <quorem+0xfe>
 80037e6:	613c      	str	r4, [r7, #16]
 80037e8:	4638      	mov	r0, r7
 80037ea:	f001 f9c7 	bl	8004b7c <__mcmp>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	db25      	blt.n	800383e <quorem+0xf6>
 80037f2:	4628      	mov	r0, r5
 80037f4:	f04f 0c00 	mov.w	ip, #0
 80037f8:	3601      	adds	r6, #1
 80037fa:	f858 1b04 	ldr.w	r1, [r8], #4
 80037fe:	f8d0 e000 	ldr.w	lr, [r0]
 8003802:	b28b      	uxth	r3, r1
 8003804:	ebac 0303 	sub.w	r3, ip, r3
 8003808:	fa1f f28e 	uxth.w	r2, lr
 800380c:	4413      	add	r3, r2
 800380e:	0c0a      	lsrs	r2, r1, #16
 8003810:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003818:	b29b      	uxth	r3, r3
 800381a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800381e:	45c1      	cmp	r9, r8
 8003820:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003824:	f840 3b04 	str.w	r3, [r0], #4
 8003828:	d2e7      	bcs.n	80037fa <quorem+0xb2>
 800382a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800382e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003832:	b922      	cbnz	r2, 800383e <quorem+0xf6>
 8003834:	3b04      	subs	r3, #4
 8003836:	429d      	cmp	r5, r3
 8003838:	461a      	mov	r2, r3
 800383a:	d30a      	bcc.n	8003852 <quorem+0x10a>
 800383c:	613c      	str	r4, [r7, #16]
 800383e:	4630      	mov	r0, r6
 8003840:	b003      	add	sp, #12
 8003842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	3b04      	subs	r3, #4
 800384a:	2a00      	cmp	r2, #0
 800384c:	d1cb      	bne.n	80037e6 <quorem+0x9e>
 800384e:	3c01      	subs	r4, #1
 8003850:	e7c6      	b.n	80037e0 <quorem+0x98>
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	3b04      	subs	r3, #4
 8003856:	2a00      	cmp	r2, #0
 8003858:	d1f0      	bne.n	800383c <quorem+0xf4>
 800385a:	3c01      	subs	r4, #1
 800385c:	e7eb      	b.n	8003836 <quorem+0xee>
 800385e:	2000      	movs	r0, #0
 8003860:	e7ee      	b.n	8003840 <quorem+0xf8>
 8003862:	0000      	movs	r0, r0
 8003864:	0000      	movs	r0, r0
	...

08003868 <_dtoa_r>:
 8003868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	4616      	mov	r6, r2
 800386e:	461f      	mov	r7, r3
 8003870:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003872:	b099      	sub	sp, #100	; 0x64
 8003874:	4605      	mov	r5, r0
 8003876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800387a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800387e:	b974      	cbnz	r4, 800389e <_dtoa_r+0x36>
 8003880:	2010      	movs	r0, #16
 8003882:	f000 fedd 	bl	8004640 <malloc>
 8003886:	4602      	mov	r2, r0
 8003888:	6268      	str	r0, [r5, #36]	; 0x24
 800388a:	b920      	cbnz	r0, 8003896 <_dtoa_r+0x2e>
 800388c:	21ea      	movs	r1, #234	; 0xea
 800388e:	4bae      	ldr	r3, [pc, #696]	; (8003b48 <_dtoa_r+0x2e0>)
 8003890:	48ae      	ldr	r0, [pc, #696]	; (8003b4c <_dtoa_r+0x2e4>)
 8003892:	f001 fdad 	bl	80053f0 <__assert_func>
 8003896:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800389a:	6004      	str	r4, [r0, #0]
 800389c:	60c4      	str	r4, [r0, #12]
 800389e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	b151      	cbz	r1, 80038ba <_dtoa_r+0x52>
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	2301      	movs	r3, #1
 80038a8:	4093      	lsls	r3, r2
 80038aa:	604a      	str	r2, [r1, #4]
 80038ac:	608b      	str	r3, [r1, #8]
 80038ae:	4628      	mov	r0, r5
 80038b0:	f000 ff2a 	bl	8004708 <_Bfree>
 80038b4:	2200      	movs	r2, #0
 80038b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	1e3b      	subs	r3, r7, #0
 80038bc:	bfaf      	iteee	ge
 80038be:	2300      	movge	r3, #0
 80038c0:	2201      	movlt	r2, #1
 80038c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	9305      	strlt	r3, [sp, #20]
 80038c8:	bfa8      	it	ge
 80038ca:	f8c8 3000 	strge.w	r3, [r8]
 80038ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80038d2:	4b9f      	ldr	r3, [pc, #636]	; (8003b50 <_dtoa_r+0x2e8>)
 80038d4:	bfb8      	it	lt
 80038d6:	f8c8 2000 	strlt.w	r2, [r8]
 80038da:	ea33 0309 	bics.w	r3, r3, r9
 80038de:	d119      	bne.n	8003914 <_dtoa_r+0xac>
 80038e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80038e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80038ec:	4333      	orrs	r3, r6
 80038ee:	f000 8580 	beq.w	80043f2 <_dtoa_r+0xb8a>
 80038f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038f4:	b953      	cbnz	r3, 800390c <_dtoa_r+0xa4>
 80038f6:	4b97      	ldr	r3, [pc, #604]	; (8003b54 <_dtoa_r+0x2ec>)
 80038f8:	e022      	b.n	8003940 <_dtoa_r+0xd8>
 80038fa:	4b97      	ldr	r3, [pc, #604]	; (8003b58 <_dtoa_r+0x2f0>)
 80038fc:	9308      	str	r3, [sp, #32]
 80038fe:	3308      	adds	r3, #8
 8003900:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	9808      	ldr	r0, [sp, #32]
 8003906:	b019      	add	sp, #100	; 0x64
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	4b91      	ldr	r3, [pc, #580]	; (8003b54 <_dtoa_r+0x2ec>)
 800390e:	9308      	str	r3, [sp, #32]
 8003910:	3303      	adds	r3, #3
 8003912:	e7f5      	b.n	8003900 <_dtoa_r+0x98>
 8003914:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003918:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800391c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	2300      	movs	r3, #0
 8003924:	f7fd f8f4 	bl	8000b10 <__aeabi_dcmpeq>
 8003928:	4680      	mov	r8, r0
 800392a:	b158      	cbz	r0, 8003944 <_dtoa_r+0xdc>
 800392c:	2301      	movs	r3, #1
 800392e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8559 	beq.w	80043ec <_dtoa_r+0xb84>
 800393a:	4888      	ldr	r0, [pc, #544]	; (8003b5c <_dtoa_r+0x2f4>)
 800393c:	6018      	str	r0, [r3, #0]
 800393e:	1e43      	subs	r3, r0, #1
 8003940:	9308      	str	r3, [sp, #32]
 8003942:	e7df      	b.n	8003904 <_dtoa_r+0x9c>
 8003944:	ab16      	add	r3, sp, #88	; 0x58
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	ab17      	add	r3, sp, #92	; 0x5c
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4628      	mov	r0, r5
 800394e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003952:	f001 f9bf 	bl	8004cd4 <__d2b>
 8003956:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800395a:	4682      	mov	sl, r0
 800395c:	2c00      	cmp	r4, #0
 800395e:	d07e      	beq.n	8003a5e <_dtoa_r+0x1f6>
 8003960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003966:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800396a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800396e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003972:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003976:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800397a:	2200      	movs	r2, #0
 800397c:	4b78      	ldr	r3, [pc, #480]	; (8003b60 <_dtoa_r+0x2f8>)
 800397e:	f7fc fca7 	bl	80002d0 <__aeabi_dsub>
 8003982:	a36b      	add	r3, pc, #428	; (adr r3, 8003b30 <_dtoa_r+0x2c8>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fe5a 	bl	8000640 <__aeabi_dmul>
 800398c:	a36a      	add	r3, pc, #424	; (adr r3, 8003b38 <_dtoa_r+0x2d0>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fc9f 	bl	80002d4 <__adddf3>
 8003996:	4606      	mov	r6, r0
 8003998:	4620      	mov	r0, r4
 800399a:	460f      	mov	r7, r1
 800399c:	f7fc fde6 	bl	800056c <__aeabi_i2d>
 80039a0:	a367      	add	r3, pc, #412	; (adr r3, 8003b40 <_dtoa_r+0x2d8>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f7fc fe4b 	bl	8000640 <__aeabi_dmul>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4630      	mov	r0, r6
 80039b0:	4639      	mov	r1, r7
 80039b2:	f7fc fc8f 	bl	80002d4 <__adddf3>
 80039b6:	4606      	mov	r6, r0
 80039b8:	460f      	mov	r7, r1
 80039ba:	f7fd f8f1 	bl	8000ba0 <__aeabi_d2iz>
 80039be:	2200      	movs	r2, #0
 80039c0:	4681      	mov	r9, r0
 80039c2:	2300      	movs	r3, #0
 80039c4:	4630      	mov	r0, r6
 80039c6:	4639      	mov	r1, r7
 80039c8:	f7fd f8ac 	bl	8000b24 <__aeabi_dcmplt>
 80039cc:	b148      	cbz	r0, 80039e2 <_dtoa_r+0x17a>
 80039ce:	4648      	mov	r0, r9
 80039d0:	f7fc fdcc 	bl	800056c <__aeabi_i2d>
 80039d4:	4632      	mov	r2, r6
 80039d6:	463b      	mov	r3, r7
 80039d8:	f7fd f89a 	bl	8000b10 <__aeabi_dcmpeq>
 80039dc:	b908      	cbnz	r0, 80039e2 <_dtoa_r+0x17a>
 80039de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80039e2:	f1b9 0f16 	cmp.w	r9, #22
 80039e6:	d857      	bhi.n	8003a98 <_dtoa_r+0x230>
 80039e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039ec:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <_dtoa_r+0x2fc>)
 80039ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f7fd f895 	bl	8000b24 <__aeabi_dcmplt>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d04e      	beq.n	8003a9c <_dtoa_r+0x234>
 80039fe:	2300      	movs	r3, #0
 8003a00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a08:	1b1c      	subs	r4, r3, r4
 8003a0a:	1e63      	subs	r3, r4, #1
 8003a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0e:	bf49      	itett	mi
 8003a10:	f1c4 0301 	rsbmi	r3, r4, #1
 8003a14:	2300      	movpl	r3, #0
 8003a16:	9306      	strmi	r3, [sp, #24]
 8003a18:	2300      	movmi	r3, #0
 8003a1a:	bf54      	ite	pl
 8003a1c:	9306      	strpl	r3, [sp, #24]
 8003a1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003a20:	f1b9 0f00 	cmp.w	r9, #0
 8003a24:	db3c      	blt.n	8003aa0 <_dtoa_r+0x238>
 8003a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a28:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a2c:	444b      	add	r3, r9
 8003a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a30:	2300      	movs	r3, #0
 8003a32:	930a      	str	r3, [sp, #40]	; 0x28
 8003a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	d86c      	bhi.n	8003b14 <_dtoa_r+0x2ac>
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	bfc4      	itt	gt
 8003a3e:	3b04      	subgt	r3, #4
 8003a40:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003a42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a44:	bfc8      	it	gt
 8003a46:	2400      	movgt	r4, #0
 8003a48:	f1a3 0302 	sub.w	r3, r3, #2
 8003a4c:	bfd8      	it	le
 8003a4e:	2401      	movle	r4, #1
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	f200 808b 	bhi.w	8003b6c <_dtoa_r+0x304>
 8003a56:	e8df f003 	tbb	[pc, r3]
 8003a5a:	4f2d      	.short	0x4f2d
 8003a5c:	5b4d      	.short	0x5b4d
 8003a5e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003a62:	441c      	add	r4, r3
 8003a64:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	bfc3      	ittte	gt
 8003a6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003a70:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003a74:	fa09 f303 	lslgt.w	r3, r9, r3
 8003a78:	f1c3 0320 	rsble	r3, r3, #32
 8003a7c:	bfc6      	itte	gt
 8003a7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003a82:	4318      	orrgt	r0, r3
 8003a84:	fa06 f003 	lslle.w	r0, r6, r3
 8003a88:	f7fc fd60 	bl	800054c <__aeabi_ui2d>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003a92:	3c01      	subs	r4, #1
 8003a94:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a96:	e770      	b.n	800397a <_dtoa_r+0x112>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e7b3      	b.n	8003a04 <_dtoa_r+0x19c>
 8003a9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8003a9e:	e7b2      	b.n	8003a06 <_dtoa_r+0x19e>
 8003aa0:	9b06      	ldr	r3, [sp, #24]
 8003aa2:	eba3 0309 	sub.w	r3, r3, r9
 8003aa6:	9306      	str	r3, [sp, #24]
 8003aa8:	f1c9 0300 	rsb	r3, r9, #0
 8003aac:	930a      	str	r3, [sp, #40]	; 0x28
 8003aae:	2300      	movs	r3, #0
 8003ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ab2:	e7bf      	b.n	8003a34 <_dtoa_r+0x1cc>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dc59      	bgt.n	8003b72 <_dtoa_r+0x30a>
 8003abe:	f04f 0b01 	mov.w	fp, #1
 8003ac2:	465b      	mov	r3, fp
 8003ac4:	f8cd b008 	str.w	fp, [sp, #8]
 8003ac8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003acc:	2200      	movs	r2, #0
 8003ace:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003ad0:	6042      	str	r2, [r0, #4]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	f102 0614 	add.w	r6, r2, #20
 8003ad8:	429e      	cmp	r6, r3
 8003ada:	6841      	ldr	r1, [r0, #4]
 8003adc:	d94f      	bls.n	8003b7e <_dtoa_r+0x316>
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 fdd2 	bl	8004688 <_Balloc>
 8003ae4:	9008      	str	r0, [sp, #32]
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d14d      	bne.n	8003b86 <_dtoa_r+0x31e>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <_dtoa_r+0x300>)
 8003af2:	e6cd      	b.n	8003890 <_dtoa_r+0x28>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e7de      	b.n	8003ab6 <_dtoa_r+0x24e>
 8003af8:	2300      	movs	r3, #0
 8003afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8003afc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003afe:	eb09 0b03 	add.w	fp, r9, r3
 8003b02:	f10b 0301 	add.w	r3, fp, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	bfb8      	it	lt
 8003b0c:	2301      	movlt	r3, #1
 8003b0e:	e7dd      	b.n	8003acc <_dtoa_r+0x264>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e7f2      	b.n	8003afa <_dtoa_r+0x292>
 8003b14:	2401      	movs	r4, #1
 8003b16:	2300      	movs	r3, #0
 8003b18:	940b      	str	r4, [sp, #44]	; 0x2c
 8003b1a:	9322      	str	r3, [sp, #136]	; 0x88
 8003b1c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003b20:	2200      	movs	r2, #0
 8003b22:	2312      	movs	r3, #18
 8003b24:	f8cd b008 	str.w	fp, [sp, #8]
 8003b28:	9223      	str	r2, [sp, #140]	; 0x8c
 8003b2a:	e7cf      	b.n	8003acc <_dtoa_r+0x264>
 8003b2c:	f3af 8000 	nop.w
 8003b30:	636f4361 	.word	0x636f4361
 8003b34:	3fd287a7 	.word	0x3fd287a7
 8003b38:	8b60c8b3 	.word	0x8b60c8b3
 8003b3c:	3fc68a28 	.word	0x3fc68a28
 8003b40:	509f79fb 	.word	0x509f79fb
 8003b44:	3fd34413 	.word	0x3fd34413
 8003b48:	080058f5 	.word	0x080058f5
 8003b4c:	0800590c 	.word	0x0800590c
 8003b50:	7ff00000 	.word	0x7ff00000
 8003b54:	080058f1 	.word	0x080058f1
 8003b58:	080058e8 	.word	0x080058e8
 8003b5c:	080058c5 	.word	0x080058c5
 8003b60:	3ff80000 	.word	0x3ff80000
 8003b64:	08005a68 	.word	0x08005a68
 8003b68:	0800596b 	.word	0x0800596b
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b70:	e7d4      	b.n	8003b1c <_dtoa_r+0x2b4>
 8003b72:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003b76:	465b      	mov	r3, fp
 8003b78:	f8cd b008 	str.w	fp, [sp, #8]
 8003b7c:	e7a6      	b.n	8003acc <_dtoa_r+0x264>
 8003b7e:	3101      	adds	r1, #1
 8003b80:	6041      	str	r1, [r0, #4]
 8003b82:	0052      	lsls	r2, r2, #1
 8003b84:	e7a6      	b.n	8003ad4 <_dtoa_r+0x26c>
 8003b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b88:	9a08      	ldr	r2, [sp, #32]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	2b0e      	cmp	r3, #14
 8003b90:	f200 80a8 	bhi.w	8003ce4 <_dtoa_r+0x47c>
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	f000 80a5 	beq.w	8003ce4 <_dtoa_r+0x47c>
 8003b9a:	f1b9 0f00 	cmp.w	r9, #0
 8003b9e:	dd34      	ble.n	8003c0a <_dtoa_r+0x3a2>
 8003ba0:	4a9a      	ldr	r2, [pc, #616]	; (8003e0c <_dtoa_r+0x5a4>)
 8003ba2:	f009 030f 	and.w	r3, r9, #15
 8003ba6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003baa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003bae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003bb6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003bba:	d016      	beq.n	8003bea <_dtoa_r+0x382>
 8003bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003bc0:	4b93      	ldr	r3, [pc, #588]	; (8003e10 <_dtoa_r+0x5a8>)
 8003bc2:	2703      	movs	r7, #3
 8003bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003bc8:	f7fc fe64 	bl	8000894 <__aeabi_ddiv>
 8003bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bd0:	f004 040f 	and.w	r4, r4, #15
 8003bd4:	4e8e      	ldr	r6, [pc, #568]	; (8003e10 <_dtoa_r+0x5a8>)
 8003bd6:	b954      	cbnz	r4, 8003bee <_dtoa_r+0x386>
 8003bd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003be0:	f7fc fe58 	bl	8000894 <__aeabi_ddiv>
 8003be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003be8:	e029      	b.n	8003c3e <_dtoa_r+0x3d6>
 8003bea:	2702      	movs	r7, #2
 8003bec:	e7f2      	b.n	8003bd4 <_dtoa_r+0x36c>
 8003bee:	07e1      	lsls	r1, r4, #31
 8003bf0:	d508      	bpl.n	8003c04 <_dtoa_r+0x39c>
 8003bf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003bfa:	f7fc fd21 	bl	8000640 <__aeabi_dmul>
 8003bfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c02:	3701      	adds	r7, #1
 8003c04:	1064      	asrs	r4, r4, #1
 8003c06:	3608      	adds	r6, #8
 8003c08:	e7e5      	b.n	8003bd6 <_dtoa_r+0x36e>
 8003c0a:	f000 80a5 	beq.w	8003d58 <_dtoa_r+0x4f0>
 8003c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c12:	f1c9 0400 	rsb	r4, r9, #0
 8003c16:	4b7d      	ldr	r3, [pc, #500]	; (8003e0c <_dtoa_r+0x5a4>)
 8003c18:	f004 020f 	and.w	r2, r4, #15
 8003c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fd0c 	bl	8000640 <__aeabi_dmul>
 8003c28:	2702      	movs	r7, #2
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c30:	4e77      	ldr	r6, [pc, #476]	; (8003e10 <_dtoa_r+0x5a8>)
 8003c32:	1124      	asrs	r4, r4, #4
 8003c34:	2c00      	cmp	r4, #0
 8003c36:	f040 8084 	bne.w	8003d42 <_dtoa_r+0x4da>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d2      	bne.n	8003be4 <_dtoa_r+0x37c>
 8003c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 808b 	beq.w	8003d5c <_dtoa_r+0x4f4>
 8003c46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003c4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c52:	2200      	movs	r2, #0
 8003c54:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <_dtoa_r+0x5ac>)
 8003c56:	f7fc ff65 	bl	8000b24 <__aeabi_dcmplt>
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d07e      	beq.n	8003d5c <_dtoa_r+0x4f4>
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d07b      	beq.n	8003d5c <_dtoa_r+0x4f4>
 8003c64:	f1bb 0f00 	cmp.w	fp, #0
 8003c68:	dd38      	ble.n	8003cdc <_dtoa_r+0x474>
 8003c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <_dtoa_r+0x5b0>)
 8003c72:	f7fc fce5 	bl	8000640 <__aeabi_dmul>
 8003c76:	465c      	mov	r4, fp
 8003c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c7c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8003c80:	3701      	adds	r7, #1
 8003c82:	4638      	mov	r0, r7
 8003c84:	f7fc fc72 	bl	800056c <__aeabi_i2d>
 8003c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c8c:	f7fc fcd8 	bl	8000640 <__aeabi_dmul>
 8003c90:	2200      	movs	r2, #0
 8003c92:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <_dtoa_r+0x5b4>)
 8003c94:	f7fc fb1e 	bl	80002d4 <__adddf3>
 8003c98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003c9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ca0:	9611      	str	r6, [sp, #68]	; 0x44
 8003ca2:	2c00      	cmp	r4, #0
 8003ca4:	d15d      	bne.n	8003d62 <_dtoa_r+0x4fa>
 8003ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003caa:	2200      	movs	r2, #0
 8003cac:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <_dtoa_r+0x5b8>)
 8003cae:	f7fc fb0f 	bl	80002d0 <__aeabi_dsub>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cba:	4633      	mov	r3, r6
 8003cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003cbe:	f7fc ff4f 	bl	8000b60 <__aeabi_dcmpgt>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	f040 829e 	bne.w	8004204 <_dtoa_r+0x99c>
 8003cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003cce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003cd2:	f7fc ff27 	bl	8000b24 <__aeabi_dcmplt>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	f040 8292 	bne.w	8004200 <_dtoa_r+0x998>
 8003cdc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003ce0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f2c0 8153 	blt.w	8003f92 <_dtoa_r+0x72a>
 8003cec:	f1b9 0f0e 	cmp.w	r9, #14
 8003cf0:	f300 814f 	bgt.w	8003f92 <_dtoa_r+0x72a>
 8003cf4:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <_dtoa_r+0x5a4>)
 8003cf6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003cfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cfe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f280 80db 	bge.w	8003ec0 <_dtoa_r+0x658>
 8003d0a:	9b02      	ldr	r3, [sp, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f300 80d7 	bgt.w	8003ec0 <_dtoa_r+0x658>
 8003d12:	f040 8274 	bne.w	80041fe <_dtoa_r+0x996>
 8003d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <_dtoa_r+0x5b8>)
 8003d1e:	f7fc fc8f 	bl	8000640 <__aeabi_dmul>
 8003d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d26:	f7fc ff11 	bl	8000b4c <__aeabi_dcmpge>
 8003d2a:	9c02      	ldr	r4, [sp, #8]
 8003d2c:	4626      	mov	r6, r4
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	f040 824a 	bne.w	80041c8 <_dtoa_r+0x960>
 8003d34:	2331      	movs	r3, #49	; 0x31
 8003d36:	9f08      	ldr	r7, [sp, #32]
 8003d38:	f109 0901 	add.w	r9, r9, #1
 8003d3c:	f807 3b01 	strb.w	r3, [r7], #1
 8003d40:	e246      	b.n	80041d0 <_dtoa_r+0x968>
 8003d42:	07e2      	lsls	r2, r4, #31
 8003d44:	d505      	bpl.n	8003d52 <_dtoa_r+0x4ea>
 8003d46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d4a:	f7fc fc79 	bl	8000640 <__aeabi_dmul>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	3701      	adds	r7, #1
 8003d52:	1064      	asrs	r4, r4, #1
 8003d54:	3608      	adds	r6, #8
 8003d56:	e76d      	b.n	8003c34 <_dtoa_r+0x3cc>
 8003d58:	2702      	movs	r7, #2
 8003d5a:	e770      	b.n	8003c3e <_dtoa_r+0x3d6>
 8003d5c:	46c8      	mov	r8, r9
 8003d5e:	9c02      	ldr	r4, [sp, #8]
 8003d60:	e78f      	b.n	8003c82 <_dtoa_r+0x41a>
 8003d62:	9908      	ldr	r1, [sp, #32]
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <_dtoa_r+0x5a4>)
 8003d66:	4421      	add	r1, r4
 8003d68:	9112      	str	r1, [sp, #72]	; 0x48
 8003d6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003d74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d055      	beq.n	8003e28 <_dtoa_r+0x5c0>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	4929      	ldr	r1, [pc, #164]	; (8003e24 <_dtoa_r+0x5bc>)
 8003d80:	f7fc fd88 	bl	8000894 <__aeabi_ddiv>
 8003d84:	463b      	mov	r3, r7
 8003d86:	4632      	mov	r2, r6
 8003d88:	f7fc faa2 	bl	80002d0 <__aeabi_dsub>
 8003d8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d90:	9f08      	ldr	r7, [sp, #32]
 8003d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d96:	f7fc ff03 	bl	8000ba0 <__aeabi_d2iz>
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	f7fc fbe6 	bl	800056c <__aeabi_i2d>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003da8:	f7fc fa92 	bl	80002d0 <__aeabi_dsub>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	3430      	adds	r4, #48	; 0x30
 8003db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dba:	f807 4b01 	strb.w	r4, [r7], #1
 8003dbe:	f7fc feb1 	bl	8000b24 <__aeabi_dcmplt>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d174      	bne.n	8003eb0 <_dtoa_r+0x648>
 8003dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dca:	2000      	movs	r0, #0
 8003dcc:	4911      	ldr	r1, [pc, #68]	; (8003e14 <_dtoa_r+0x5ac>)
 8003dce:	f7fc fa7f 	bl	80002d0 <__aeabi_dsub>
 8003dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dd6:	f7fc fea5 	bl	8000b24 <__aeabi_dcmplt>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f040 80b6 	bne.w	8003f4c <_dtoa_r+0x6e4>
 8003de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003de2:	429f      	cmp	r7, r3
 8003de4:	f43f af7a 	beq.w	8003cdc <_dtoa_r+0x474>
 8003de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dec:	2200      	movs	r2, #0
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <_dtoa_r+0x5b0>)
 8003df0:	f7fc fc26 	bl	8000640 <__aeabi_dmul>
 8003df4:	2200      	movs	r2, #0
 8003df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <_dtoa_r+0x5b0>)
 8003e00:	f7fc fc1e 	bl	8000640 <__aeabi_dmul>
 8003e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e08:	e7c3      	b.n	8003d92 <_dtoa_r+0x52a>
 8003e0a:	bf00      	nop
 8003e0c:	08005a68 	.word	0x08005a68
 8003e10:	08005a40 	.word	0x08005a40
 8003e14:	3ff00000 	.word	0x3ff00000
 8003e18:	40240000 	.word	0x40240000
 8003e1c:	401c0000 	.word	0x401c0000
 8003e20:	40140000 	.word	0x40140000
 8003e24:	3fe00000 	.word	0x3fe00000
 8003e28:	4630      	mov	r0, r6
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	f7fc fc08 	bl	8000640 <__aeabi_dmul>
 8003e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e36:	9c08      	ldr	r4, [sp, #32]
 8003e38:	9314      	str	r3, [sp, #80]	; 0x50
 8003e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e3e:	f7fc feaf 	bl	8000ba0 <__aeabi_d2iz>
 8003e42:	9015      	str	r0, [sp, #84]	; 0x54
 8003e44:	f7fc fb92 	bl	800056c <__aeabi_i2d>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e50:	f7fc fa3e 	bl	80002d0 <__aeabi_dsub>
 8003e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e56:	4606      	mov	r6, r0
 8003e58:	3330      	adds	r3, #48	; 0x30
 8003e5a:	f804 3b01 	strb.w	r3, [r4], #1
 8003e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e60:	460f      	mov	r7, r1
 8003e62:	429c      	cmp	r4, r3
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	d124      	bne.n	8003eb4 <_dtoa_r+0x64c>
 8003e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e6e:	4bb3      	ldr	r3, [pc, #716]	; (800413c <_dtoa_r+0x8d4>)
 8003e70:	f7fc fa30 	bl	80002d4 <__adddf3>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4630      	mov	r0, r6
 8003e7a:	4639      	mov	r1, r7
 8003e7c:	f7fc fe70 	bl	8000b60 <__aeabi_dcmpgt>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d162      	bne.n	8003f4a <_dtoa_r+0x6e2>
 8003e84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e88:	2000      	movs	r0, #0
 8003e8a:	49ac      	ldr	r1, [pc, #688]	; (800413c <_dtoa_r+0x8d4>)
 8003e8c:	f7fc fa20 	bl	80002d0 <__aeabi_dsub>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4630      	mov	r0, r6
 8003e96:	4639      	mov	r1, r7
 8003e98:	f7fc fe44 	bl	8000b24 <__aeabi_dcmplt>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	f43f af1d 	beq.w	8003cdc <_dtoa_r+0x474>
 8003ea2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003ea4:	1e7b      	subs	r3, r7, #1
 8003ea6:	9314      	str	r3, [sp, #80]	; 0x50
 8003ea8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d0f8      	beq.n	8003ea2 <_dtoa_r+0x63a>
 8003eb0:	46c1      	mov	r9, r8
 8003eb2:	e03a      	b.n	8003f2a <_dtoa_r+0x6c2>
 8003eb4:	4ba2      	ldr	r3, [pc, #648]	; (8004140 <_dtoa_r+0x8d8>)
 8003eb6:	f7fc fbc3 	bl	8000640 <__aeabi_dmul>
 8003eba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ebe:	e7bc      	b.n	8003e3a <_dtoa_r+0x5d2>
 8003ec0:	9f08      	ldr	r7, [sp, #32]
 8003ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eca:	f7fc fce3 	bl	8000894 <__aeabi_ddiv>
 8003ece:	f7fc fe67 	bl	8000ba0 <__aeabi_d2iz>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	f7fc fb4a 	bl	800056c <__aeabi_i2d>
 8003ed8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003edc:	f7fc fbb0 	bl	8000640 <__aeabi_dmul>
 8003ee0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eec:	f7fc f9f0 	bl	80002d0 <__aeabi_dsub>
 8003ef0:	f807 6b01 	strb.w	r6, [r7], #1
 8003ef4:	9e08      	ldr	r6, [sp, #32]
 8003ef6:	9b02      	ldr	r3, [sp, #8]
 8003ef8:	1bbe      	subs	r6, r7, r6
 8003efa:	42b3      	cmp	r3, r6
 8003efc:	d13a      	bne.n	8003f74 <_dtoa_r+0x70c>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	f7fc f9e7 	bl	80002d4 <__adddf3>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f12:	f7fc fe25 	bl	8000b60 <__aeabi_dcmpgt>
 8003f16:	bb58      	cbnz	r0, 8003f70 <_dtoa_r+0x708>
 8003f18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f20:	f7fc fdf6 	bl	8000b10 <__aeabi_dcmpeq>
 8003f24:	b108      	cbz	r0, 8003f2a <_dtoa_r+0x6c2>
 8003f26:	07e1      	lsls	r1, r4, #31
 8003f28:	d422      	bmi.n	8003f70 <_dtoa_r+0x708>
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	f000 fbeb 	bl	8004708 <_Bfree>
 8003f32:	2300      	movs	r3, #0
 8003f34:	703b      	strb	r3, [r7, #0]
 8003f36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003f38:	f109 0001 	add.w	r0, r9, #1
 8003f3c:	6018      	str	r0, [r3, #0]
 8003f3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f43f acdf 	beq.w	8003904 <_dtoa_r+0x9c>
 8003f46:	601f      	str	r7, [r3, #0]
 8003f48:	e4dc      	b.n	8003904 <_dtoa_r+0x9c>
 8003f4a:	4627      	mov	r7, r4
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	461f      	mov	r7, r3
 8003f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f54:	2a39      	cmp	r2, #57	; 0x39
 8003f56:	d107      	bne.n	8003f68 <_dtoa_r+0x700>
 8003f58:	9a08      	ldr	r2, [sp, #32]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d1f7      	bne.n	8003f4e <_dtoa_r+0x6e6>
 8003f5e:	2230      	movs	r2, #48	; 0x30
 8003f60:	9908      	ldr	r1, [sp, #32]
 8003f62:	f108 0801 	add.w	r8, r8, #1
 8003f66:	700a      	strb	r2, [r1, #0]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	3201      	adds	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e79f      	b.n	8003eb0 <_dtoa_r+0x648>
 8003f70:	46c8      	mov	r8, r9
 8003f72:	e7eb      	b.n	8003f4c <_dtoa_r+0x6e4>
 8003f74:	2200      	movs	r2, #0
 8003f76:	4b72      	ldr	r3, [pc, #456]	; (8004140 <_dtoa_r+0x8d8>)
 8003f78:	f7fc fb62 	bl	8000640 <__aeabi_dmul>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2300      	movs	r3, #0
 8003f88:	f7fc fdc2 	bl	8000b10 <__aeabi_dcmpeq>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d098      	beq.n	8003ec2 <_dtoa_r+0x65a>
 8003f90:	e7cb      	b.n	8003f2a <_dtoa_r+0x6c2>
 8003f92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	f000 80cd 	beq.w	8004134 <_dtoa_r+0x8cc>
 8003f9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003f9c:	2a01      	cmp	r2, #1
 8003f9e:	f300 80af 	bgt.w	8004100 <_dtoa_r+0x898>
 8003fa2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	f000 80a7 	beq.w	80040f8 <_dtoa_r+0x890>
 8003faa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003fae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003fb0:	9f06      	ldr	r7, [sp, #24]
 8003fb2:	9a06      	ldr	r2, [sp, #24]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	441a      	add	r2, r3
 8003fb8:	9206      	str	r2, [sp, #24]
 8003fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	441a      	add	r2, r3
 8003fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8003fc2:	f000 fc5b 	bl	800487c <__i2b>
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	2f00      	cmp	r7, #0
 8003fca:	dd0c      	ble.n	8003fe6 <_dtoa_r+0x77e>
 8003fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	dd09      	ble.n	8003fe6 <_dtoa_r+0x77e>
 8003fd2:	42bb      	cmp	r3, r7
 8003fd4:	bfa8      	it	ge
 8003fd6:	463b      	movge	r3, r7
 8003fd8:	9a06      	ldr	r2, [sp, #24]
 8003fda:	1aff      	subs	r7, r7, r3
 8003fdc:	1ad2      	subs	r2, r2, r3
 8003fde:	9206      	str	r2, [sp, #24]
 8003fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe8:	b1f3      	cbz	r3, 8004028 <_dtoa_r+0x7c0>
 8003fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a9 	beq.w	8004144 <_dtoa_r+0x8dc>
 8003ff2:	2c00      	cmp	r4, #0
 8003ff4:	dd10      	ble.n	8004018 <_dtoa_r+0x7b0>
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 fcf8 	bl	80049f0 <__pow5mult>
 8004000:	4652      	mov	r2, sl
 8004002:	4601      	mov	r1, r0
 8004004:	4606      	mov	r6, r0
 8004006:	4628      	mov	r0, r5
 8004008:	f000 fc4e 	bl	80048a8 <__multiply>
 800400c:	4680      	mov	r8, r0
 800400e:	4651      	mov	r1, sl
 8004010:	4628      	mov	r0, r5
 8004012:	f000 fb79 	bl	8004708 <_Bfree>
 8004016:	46c2      	mov	sl, r8
 8004018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800401a:	1b1a      	subs	r2, r3, r4
 800401c:	d004      	beq.n	8004028 <_dtoa_r+0x7c0>
 800401e:	4651      	mov	r1, sl
 8004020:	4628      	mov	r0, r5
 8004022:	f000 fce5 	bl	80049f0 <__pow5mult>
 8004026:	4682      	mov	sl, r0
 8004028:	2101      	movs	r1, #1
 800402a:	4628      	mov	r0, r5
 800402c:	f000 fc26 	bl	800487c <__i2b>
 8004030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004032:	4604      	mov	r4, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f340 8087 	ble.w	8004148 <_dtoa_r+0x8e0>
 800403a:	461a      	mov	r2, r3
 800403c:	4601      	mov	r1, r0
 800403e:	4628      	mov	r0, r5
 8004040:	f000 fcd6 	bl	80049f0 <__pow5mult>
 8004044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004046:	4604      	mov	r4, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	f340 8080 	ble.w	800414e <_dtoa_r+0x8e6>
 800404e:	f04f 0800 	mov.w	r8, #0
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004058:	6918      	ldr	r0, [r3, #16]
 800405a:	f000 fbc1 	bl	80047e0 <__hi0bits>
 800405e:	f1c0 0020 	rsb	r0, r0, #32
 8004062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004064:	4418      	add	r0, r3
 8004066:	f010 001f 	ands.w	r0, r0, #31
 800406a:	f000 8092 	beq.w	8004192 <_dtoa_r+0x92a>
 800406e:	f1c0 0320 	rsb	r3, r0, #32
 8004072:	2b04      	cmp	r3, #4
 8004074:	f340 808a 	ble.w	800418c <_dtoa_r+0x924>
 8004078:	f1c0 001c 	rsb	r0, r0, #28
 800407c:	9b06      	ldr	r3, [sp, #24]
 800407e:	4407      	add	r7, r0
 8004080:	4403      	add	r3, r0
 8004082:	9306      	str	r3, [sp, #24]
 8004084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004086:	4403      	add	r3, r0
 8004088:	9309      	str	r3, [sp, #36]	; 0x24
 800408a:	9b06      	ldr	r3, [sp, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	dd05      	ble.n	800409c <_dtoa_r+0x834>
 8004090:	4651      	mov	r1, sl
 8004092:	461a      	mov	r2, r3
 8004094:	4628      	mov	r0, r5
 8004096:	f000 fd05 	bl	8004aa4 <__lshift>
 800409a:	4682      	mov	sl, r0
 800409c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dd05      	ble.n	80040ae <_dtoa_r+0x846>
 80040a2:	4621      	mov	r1, r4
 80040a4:	461a      	mov	r2, r3
 80040a6:	4628      	mov	r0, r5
 80040a8:	f000 fcfc 	bl	8004aa4 <__lshift>
 80040ac:	4604      	mov	r4, r0
 80040ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d070      	beq.n	8004196 <_dtoa_r+0x92e>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4650      	mov	r0, sl
 80040b8:	f000 fd60 	bl	8004b7c <__mcmp>
 80040bc:	2800      	cmp	r0, #0
 80040be:	da6a      	bge.n	8004196 <_dtoa_r+0x92e>
 80040c0:	2300      	movs	r3, #0
 80040c2:	4651      	mov	r1, sl
 80040c4:	220a      	movs	r2, #10
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 fb40 	bl	800474c <__multadd>
 80040cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040ce:	4682      	mov	sl, r0
 80040d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8193 	beq.w	8004400 <_dtoa_r+0xb98>
 80040da:	4631      	mov	r1, r6
 80040dc:	2300      	movs	r3, #0
 80040de:	220a      	movs	r2, #10
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 fb33 	bl	800474c <__multadd>
 80040e6:	f1bb 0f00 	cmp.w	fp, #0
 80040ea:	4606      	mov	r6, r0
 80040ec:	f300 8093 	bgt.w	8004216 <_dtoa_r+0x9ae>
 80040f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	dc57      	bgt.n	80041a6 <_dtoa_r+0x93e>
 80040f6:	e08e      	b.n	8004216 <_dtoa_r+0x9ae>
 80040f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80040fe:	e756      	b.n	8003fae <_dtoa_r+0x746>
 8004100:	9b02      	ldr	r3, [sp, #8]
 8004102:	1e5c      	subs	r4, r3, #1
 8004104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004106:	42a3      	cmp	r3, r4
 8004108:	bfb7      	itett	lt
 800410a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800410c:	1b1c      	subge	r4, r3, r4
 800410e:	1ae2      	sublt	r2, r4, r3
 8004110:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004112:	bfbe      	ittt	lt
 8004114:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004116:	189b      	addlt	r3, r3, r2
 8004118:	930e      	strlt	r3, [sp, #56]	; 0x38
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	bfb8      	it	lt
 800411e:	2400      	movlt	r4, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfbb      	ittet	lt
 8004124:	9b06      	ldrlt	r3, [sp, #24]
 8004126:	9a02      	ldrlt	r2, [sp, #8]
 8004128:	9f06      	ldrge	r7, [sp, #24]
 800412a:	1a9f      	sublt	r7, r3, r2
 800412c:	bfac      	ite	ge
 800412e:	9b02      	ldrge	r3, [sp, #8]
 8004130:	2300      	movlt	r3, #0
 8004132:	e73e      	b.n	8003fb2 <_dtoa_r+0x74a>
 8004134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004136:	9f06      	ldr	r7, [sp, #24]
 8004138:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800413a:	e745      	b.n	8003fc8 <_dtoa_r+0x760>
 800413c:	3fe00000 	.word	0x3fe00000
 8004140:	40240000 	.word	0x40240000
 8004144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004146:	e76a      	b.n	800401e <_dtoa_r+0x7b6>
 8004148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800414a:	2b01      	cmp	r3, #1
 800414c:	dc19      	bgt.n	8004182 <_dtoa_r+0x91a>
 800414e:	9b04      	ldr	r3, [sp, #16]
 8004150:	b9bb      	cbnz	r3, 8004182 <_dtoa_r+0x91a>
 8004152:	9b05      	ldr	r3, [sp, #20]
 8004154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004158:	b99b      	cbnz	r3, 8004182 <_dtoa_r+0x91a>
 800415a:	9b05      	ldr	r3, [sp, #20]
 800415c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004160:	0d1b      	lsrs	r3, r3, #20
 8004162:	051b      	lsls	r3, r3, #20
 8004164:	b183      	cbz	r3, 8004188 <_dtoa_r+0x920>
 8004166:	f04f 0801 	mov.w	r8, #1
 800416a:	9b06      	ldr	r3, [sp, #24]
 800416c:	3301      	adds	r3, #1
 800416e:	9306      	str	r3, [sp, #24]
 8004170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004172:	3301      	adds	r3, #1
 8004174:	9309      	str	r3, [sp, #36]	; 0x24
 8004176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f af6a 	bne.w	8004052 <_dtoa_r+0x7ea>
 800417e:	2001      	movs	r0, #1
 8004180:	e76f      	b.n	8004062 <_dtoa_r+0x7fa>
 8004182:	f04f 0800 	mov.w	r8, #0
 8004186:	e7f6      	b.n	8004176 <_dtoa_r+0x90e>
 8004188:	4698      	mov	r8, r3
 800418a:	e7f4      	b.n	8004176 <_dtoa_r+0x90e>
 800418c:	f43f af7d 	beq.w	800408a <_dtoa_r+0x822>
 8004190:	4618      	mov	r0, r3
 8004192:	301c      	adds	r0, #28
 8004194:	e772      	b.n	800407c <_dtoa_r+0x814>
 8004196:	9b02      	ldr	r3, [sp, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	dc36      	bgt.n	800420a <_dtoa_r+0x9a2>
 800419c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800419e:	2b02      	cmp	r3, #2
 80041a0:	dd33      	ble.n	800420a <_dtoa_r+0x9a2>
 80041a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80041a6:	f1bb 0f00 	cmp.w	fp, #0
 80041aa:	d10d      	bne.n	80041c8 <_dtoa_r+0x960>
 80041ac:	4621      	mov	r1, r4
 80041ae:	465b      	mov	r3, fp
 80041b0:	2205      	movs	r2, #5
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 faca 	bl	800474c <__multadd>
 80041b8:	4601      	mov	r1, r0
 80041ba:	4604      	mov	r4, r0
 80041bc:	4650      	mov	r0, sl
 80041be:	f000 fcdd 	bl	8004b7c <__mcmp>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	f73f adb6 	bgt.w	8003d34 <_dtoa_r+0x4cc>
 80041c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041ca:	9f08      	ldr	r7, [sp, #32]
 80041cc:	ea6f 0903 	mvn.w	r9, r3
 80041d0:	f04f 0800 	mov.w	r8, #0
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 fa96 	bl	8004708 <_Bfree>
 80041dc:	2e00      	cmp	r6, #0
 80041de:	f43f aea4 	beq.w	8003f2a <_dtoa_r+0x6c2>
 80041e2:	f1b8 0f00 	cmp.w	r8, #0
 80041e6:	d005      	beq.n	80041f4 <_dtoa_r+0x98c>
 80041e8:	45b0      	cmp	r8, r6
 80041ea:	d003      	beq.n	80041f4 <_dtoa_r+0x98c>
 80041ec:	4641      	mov	r1, r8
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 fa8a 	bl	8004708 <_Bfree>
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fa86 	bl	8004708 <_Bfree>
 80041fc:	e695      	b.n	8003f2a <_dtoa_r+0x6c2>
 80041fe:	2400      	movs	r4, #0
 8004200:	4626      	mov	r6, r4
 8004202:	e7e1      	b.n	80041c8 <_dtoa_r+0x960>
 8004204:	46c1      	mov	r9, r8
 8004206:	4626      	mov	r6, r4
 8004208:	e594      	b.n	8003d34 <_dtoa_r+0x4cc>
 800420a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800420c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80fc 	beq.w	800440e <_dtoa_r+0xba6>
 8004216:	2f00      	cmp	r7, #0
 8004218:	dd05      	ble.n	8004226 <_dtoa_r+0x9be>
 800421a:	4631      	mov	r1, r6
 800421c:	463a      	mov	r2, r7
 800421e:	4628      	mov	r0, r5
 8004220:	f000 fc40 	bl	8004aa4 <__lshift>
 8004224:	4606      	mov	r6, r0
 8004226:	f1b8 0f00 	cmp.w	r8, #0
 800422a:	d05c      	beq.n	80042e6 <_dtoa_r+0xa7e>
 800422c:	4628      	mov	r0, r5
 800422e:	6871      	ldr	r1, [r6, #4]
 8004230:	f000 fa2a 	bl	8004688 <_Balloc>
 8004234:	4607      	mov	r7, r0
 8004236:	b928      	cbnz	r0, 8004244 <_dtoa_r+0x9dc>
 8004238:	4602      	mov	r2, r0
 800423a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800423e:	4b7e      	ldr	r3, [pc, #504]	; (8004438 <_dtoa_r+0xbd0>)
 8004240:	f7ff bb26 	b.w	8003890 <_dtoa_r+0x28>
 8004244:	6932      	ldr	r2, [r6, #16]
 8004246:	f106 010c 	add.w	r1, r6, #12
 800424a:	3202      	adds	r2, #2
 800424c:	0092      	lsls	r2, r2, #2
 800424e:	300c      	adds	r0, #12
 8004250:	f000 fa0c 	bl	800466c <memcpy>
 8004254:	2201      	movs	r2, #1
 8004256:	4639      	mov	r1, r7
 8004258:	4628      	mov	r0, r5
 800425a:	f000 fc23 	bl	8004aa4 <__lshift>
 800425e:	46b0      	mov	r8, r6
 8004260:	4606      	mov	r6, r0
 8004262:	9b08      	ldr	r3, [sp, #32]
 8004264:	3301      	adds	r3, #1
 8004266:	9302      	str	r3, [sp, #8]
 8004268:	9b08      	ldr	r3, [sp, #32]
 800426a:	445b      	add	r3, fp
 800426c:	930a      	str	r3, [sp, #40]	; 0x28
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	9309      	str	r3, [sp, #36]	; 0x24
 8004276:	9b02      	ldr	r3, [sp, #8]
 8004278:	4621      	mov	r1, r4
 800427a:	4650      	mov	r0, sl
 800427c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004280:	f7ff fa62 	bl	8003748 <quorem>
 8004284:	4603      	mov	r3, r0
 8004286:	4641      	mov	r1, r8
 8004288:	3330      	adds	r3, #48	; 0x30
 800428a:	9004      	str	r0, [sp, #16]
 800428c:	4650      	mov	r0, sl
 800428e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004290:	f000 fc74 	bl	8004b7c <__mcmp>
 8004294:	4632      	mov	r2, r6
 8004296:	9006      	str	r0, [sp, #24]
 8004298:	4621      	mov	r1, r4
 800429a:	4628      	mov	r0, r5
 800429c:	f000 fc8a 	bl	8004bb4 <__mdiff>
 80042a0:	68c2      	ldr	r2, [r0, #12]
 80042a2:	4607      	mov	r7, r0
 80042a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042a6:	bb02      	cbnz	r2, 80042ea <_dtoa_r+0xa82>
 80042a8:	4601      	mov	r1, r0
 80042aa:	4650      	mov	r0, sl
 80042ac:	f000 fc66 	bl	8004b7c <__mcmp>
 80042b0:	4602      	mov	r2, r0
 80042b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b4:	4639      	mov	r1, r7
 80042b6:	4628      	mov	r0, r5
 80042b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80042bc:	f000 fa24 	bl	8004708 <_Bfree>
 80042c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042c4:	9f02      	ldr	r7, [sp, #8]
 80042c6:	ea43 0102 	orr.w	r1, r3, r2
 80042ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042cc:	430b      	orrs	r3, r1
 80042ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042d0:	d10d      	bne.n	80042ee <_dtoa_r+0xa86>
 80042d2:	2b39      	cmp	r3, #57	; 0x39
 80042d4:	d027      	beq.n	8004326 <_dtoa_r+0xabe>
 80042d6:	9a06      	ldr	r2, [sp, #24]
 80042d8:	2a00      	cmp	r2, #0
 80042da:	dd01      	ble.n	80042e0 <_dtoa_r+0xa78>
 80042dc:	9b04      	ldr	r3, [sp, #16]
 80042de:	3331      	adds	r3, #49	; 0x31
 80042e0:	f88b 3000 	strb.w	r3, [fp]
 80042e4:	e776      	b.n	80041d4 <_dtoa_r+0x96c>
 80042e6:	4630      	mov	r0, r6
 80042e8:	e7b9      	b.n	800425e <_dtoa_r+0x9f6>
 80042ea:	2201      	movs	r2, #1
 80042ec:	e7e2      	b.n	80042b4 <_dtoa_r+0xa4c>
 80042ee:	9906      	ldr	r1, [sp, #24]
 80042f0:	2900      	cmp	r1, #0
 80042f2:	db04      	blt.n	80042fe <_dtoa_r+0xa96>
 80042f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80042f6:	4301      	orrs	r1, r0
 80042f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042fa:	4301      	orrs	r1, r0
 80042fc:	d120      	bne.n	8004340 <_dtoa_r+0xad8>
 80042fe:	2a00      	cmp	r2, #0
 8004300:	ddee      	ble.n	80042e0 <_dtoa_r+0xa78>
 8004302:	4651      	mov	r1, sl
 8004304:	2201      	movs	r2, #1
 8004306:	4628      	mov	r0, r5
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	f000 fbcb 	bl	8004aa4 <__lshift>
 800430e:	4621      	mov	r1, r4
 8004310:	4682      	mov	sl, r0
 8004312:	f000 fc33 	bl	8004b7c <__mcmp>
 8004316:	2800      	cmp	r0, #0
 8004318:	9b02      	ldr	r3, [sp, #8]
 800431a:	dc02      	bgt.n	8004322 <_dtoa_r+0xaba>
 800431c:	d1e0      	bne.n	80042e0 <_dtoa_r+0xa78>
 800431e:	07da      	lsls	r2, r3, #31
 8004320:	d5de      	bpl.n	80042e0 <_dtoa_r+0xa78>
 8004322:	2b39      	cmp	r3, #57	; 0x39
 8004324:	d1da      	bne.n	80042dc <_dtoa_r+0xa74>
 8004326:	2339      	movs	r3, #57	; 0x39
 8004328:	f88b 3000 	strb.w	r3, [fp]
 800432c:	463b      	mov	r3, r7
 800432e:	461f      	mov	r7, r3
 8004330:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004334:	3b01      	subs	r3, #1
 8004336:	2a39      	cmp	r2, #57	; 0x39
 8004338:	d050      	beq.n	80043dc <_dtoa_r+0xb74>
 800433a:	3201      	adds	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e749      	b.n	80041d4 <_dtoa_r+0x96c>
 8004340:	2a00      	cmp	r2, #0
 8004342:	dd03      	ble.n	800434c <_dtoa_r+0xae4>
 8004344:	2b39      	cmp	r3, #57	; 0x39
 8004346:	d0ee      	beq.n	8004326 <_dtoa_r+0xabe>
 8004348:	3301      	adds	r3, #1
 800434a:	e7c9      	b.n	80042e0 <_dtoa_r+0xa78>
 800434c:	9a02      	ldr	r2, [sp, #8]
 800434e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004350:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004354:	428a      	cmp	r2, r1
 8004356:	d02a      	beq.n	80043ae <_dtoa_r+0xb46>
 8004358:	4651      	mov	r1, sl
 800435a:	2300      	movs	r3, #0
 800435c:	220a      	movs	r2, #10
 800435e:	4628      	mov	r0, r5
 8004360:	f000 f9f4 	bl	800474c <__multadd>
 8004364:	45b0      	cmp	r8, r6
 8004366:	4682      	mov	sl, r0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	f04f 020a 	mov.w	r2, #10
 8004370:	4641      	mov	r1, r8
 8004372:	4628      	mov	r0, r5
 8004374:	d107      	bne.n	8004386 <_dtoa_r+0xb1e>
 8004376:	f000 f9e9 	bl	800474c <__multadd>
 800437a:	4680      	mov	r8, r0
 800437c:	4606      	mov	r6, r0
 800437e:	9b02      	ldr	r3, [sp, #8]
 8004380:	3301      	adds	r3, #1
 8004382:	9302      	str	r3, [sp, #8]
 8004384:	e777      	b.n	8004276 <_dtoa_r+0xa0e>
 8004386:	f000 f9e1 	bl	800474c <__multadd>
 800438a:	4631      	mov	r1, r6
 800438c:	4680      	mov	r8, r0
 800438e:	2300      	movs	r3, #0
 8004390:	220a      	movs	r2, #10
 8004392:	4628      	mov	r0, r5
 8004394:	f000 f9da 	bl	800474c <__multadd>
 8004398:	4606      	mov	r6, r0
 800439a:	e7f0      	b.n	800437e <_dtoa_r+0xb16>
 800439c:	f1bb 0f00 	cmp.w	fp, #0
 80043a0:	bfcc      	ite	gt
 80043a2:	465f      	movgt	r7, fp
 80043a4:	2701      	movle	r7, #1
 80043a6:	f04f 0800 	mov.w	r8, #0
 80043aa:	9a08      	ldr	r2, [sp, #32]
 80043ac:	4417      	add	r7, r2
 80043ae:	4651      	mov	r1, sl
 80043b0:	2201      	movs	r2, #1
 80043b2:	4628      	mov	r0, r5
 80043b4:	9302      	str	r3, [sp, #8]
 80043b6:	f000 fb75 	bl	8004aa4 <__lshift>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4682      	mov	sl, r0
 80043be:	f000 fbdd 	bl	8004b7c <__mcmp>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	dcb2      	bgt.n	800432c <_dtoa_r+0xac4>
 80043c6:	d102      	bne.n	80043ce <_dtoa_r+0xb66>
 80043c8:	9b02      	ldr	r3, [sp, #8]
 80043ca:	07db      	lsls	r3, r3, #31
 80043cc:	d4ae      	bmi.n	800432c <_dtoa_r+0xac4>
 80043ce:	463b      	mov	r3, r7
 80043d0:	461f      	mov	r7, r3
 80043d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043d6:	2a30      	cmp	r2, #48	; 0x30
 80043d8:	d0fa      	beq.n	80043d0 <_dtoa_r+0xb68>
 80043da:	e6fb      	b.n	80041d4 <_dtoa_r+0x96c>
 80043dc:	9a08      	ldr	r2, [sp, #32]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d1a5      	bne.n	800432e <_dtoa_r+0xac6>
 80043e2:	2331      	movs	r3, #49	; 0x31
 80043e4:	f109 0901 	add.w	r9, r9, #1
 80043e8:	7013      	strb	r3, [r2, #0]
 80043ea:	e6f3      	b.n	80041d4 <_dtoa_r+0x96c>
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <_dtoa_r+0xbd4>)
 80043ee:	f7ff baa7 	b.w	8003940 <_dtoa_r+0xd8>
 80043f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f aa80 	bne.w	80038fa <_dtoa_r+0x92>
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_dtoa_r+0xbd8>)
 80043fc:	f7ff baa0 	b.w	8003940 <_dtoa_r+0xd8>
 8004400:	f1bb 0f00 	cmp.w	fp, #0
 8004404:	dc03      	bgt.n	800440e <_dtoa_r+0xba6>
 8004406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004408:	2b02      	cmp	r3, #2
 800440a:	f73f aecc 	bgt.w	80041a6 <_dtoa_r+0x93e>
 800440e:	9f08      	ldr	r7, [sp, #32]
 8004410:	4621      	mov	r1, r4
 8004412:	4650      	mov	r0, sl
 8004414:	f7ff f998 	bl	8003748 <quorem>
 8004418:	9a08      	ldr	r2, [sp, #32]
 800441a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800441e:	f807 3b01 	strb.w	r3, [r7], #1
 8004422:	1aba      	subs	r2, r7, r2
 8004424:	4593      	cmp	fp, r2
 8004426:	ddb9      	ble.n	800439c <_dtoa_r+0xb34>
 8004428:	4651      	mov	r1, sl
 800442a:	2300      	movs	r3, #0
 800442c:	220a      	movs	r2, #10
 800442e:	4628      	mov	r0, r5
 8004430:	f000 f98c 	bl	800474c <__multadd>
 8004434:	4682      	mov	sl, r0
 8004436:	e7eb      	b.n	8004410 <_dtoa_r+0xba8>
 8004438:	0800596b 	.word	0x0800596b
 800443c:	080058c4 	.word	0x080058c4
 8004440:	080058e8 	.word	0x080058e8

08004444 <std>:
 8004444:	2300      	movs	r3, #0
 8004446:	b510      	push	{r4, lr}
 8004448:	4604      	mov	r4, r0
 800444a:	e9c0 3300 	strd	r3, r3, [r0]
 800444e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004452:	6083      	str	r3, [r0, #8]
 8004454:	8181      	strh	r1, [r0, #12]
 8004456:	6643      	str	r3, [r0, #100]	; 0x64
 8004458:	81c2      	strh	r2, [r0, #14]
 800445a:	6183      	str	r3, [r0, #24]
 800445c:	4619      	mov	r1, r3
 800445e:	2208      	movs	r2, #8
 8004460:	305c      	adds	r0, #92	; 0x5c
 8004462:	f7fe fcf1 	bl	8002e48 <memset>
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <std+0x38>)
 8004468:	6224      	str	r4, [r4, #32]
 800446a:	6263      	str	r3, [r4, #36]	; 0x24
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <std+0x3c>)
 800446e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004470:	4b04      	ldr	r3, [pc, #16]	; (8004484 <std+0x40>)
 8004472:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <std+0x44>)
 8004476:	6323      	str	r3, [r4, #48]	; 0x30
 8004478:	bd10      	pop	{r4, pc}
 800447a:	bf00      	nop
 800447c:	080051c5 	.word	0x080051c5
 8004480:	080051e7 	.word	0x080051e7
 8004484:	0800521f 	.word	0x0800521f
 8004488:	08005243 	.word	0x08005243

0800448c <_cleanup_r>:
 800448c:	4901      	ldr	r1, [pc, #4]	; (8004494 <_cleanup_r+0x8>)
 800448e:	f000 b8af 	b.w	80045f0 <_fwalk_reent>
 8004492:	bf00      	nop
 8004494:	08005559 	.word	0x08005559

08004498 <__sfmoreglue>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	2568      	movs	r5, #104	; 0x68
 800449c:	1e4a      	subs	r2, r1, #1
 800449e:	4355      	muls	r5, r2
 80044a0:	460e      	mov	r6, r1
 80044a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044a6:	f000 fccb 	bl	8004e40 <_malloc_r>
 80044aa:	4604      	mov	r4, r0
 80044ac:	b140      	cbz	r0, 80044c0 <__sfmoreglue+0x28>
 80044ae:	2100      	movs	r1, #0
 80044b0:	e9c0 1600 	strd	r1, r6, [r0]
 80044b4:	300c      	adds	r0, #12
 80044b6:	60a0      	str	r0, [r4, #8]
 80044b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044bc:	f7fe fcc4 	bl	8002e48 <memset>
 80044c0:	4620      	mov	r0, r4
 80044c2:	bd70      	pop	{r4, r5, r6, pc}

080044c4 <__sfp_lock_acquire>:
 80044c4:	4801      	ldr	r0, [pc, #4]	; (80044cc <__sfp_lock_acquire+0x8>)
 80044c6:	f000 b8b8 	b.w	800463a <__retarget_lock_acquire_recursive>
 80044ca:	bf00      	nop
 80044cc:	20000254 	.word	0x20000254

080044d0 <__sfp_lock_release>:
 80044d0:	4801      	ldr	r0, [pc, #4]	; (80044d8 <__sfp_lock_release+0x8>)
 80044d2:	f000 b8b3 	b.w	800463c <__retarget_lock_release_recursive>
 80044d6:	bf00      	nop
 80044d8:	20000254 	.word	0x20000254

080044dc <__sinit_lock_acquire>:
 80044dc:	4801      	ldr	r0, [pc, #4]	; (80044e4 <__sinit_lock_acquire+0x8>)
 80044de:	f000 b8ac 	b.w	800463a <__retarget_lock_acquire_recursive>
 80044e2:	bf00      	nop
 80044e4:	2000024f 	.word	0x2000024f

080044e8 <__sinit_lock_release>:
 80044e8:	4801      	ldr	r0, [pc, #4]	; (80044f0 <__sinit_lock_release+0x8>)
 80044ea:	f000 b8a7 	b.w	800463c <__retarget_lock_release_recursive>
 80044ee:	bf00      	nop
 80044f0:	2000024f 	.word	0x2000024f

080044f4 <__sinit>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4604      	mov	r4, r0
 80044f8:	f7ff fff0 	bl	80044dc <__sinit_lock_acquire>
 80044fc:	69a3      	ldr	r3, [r4, #24]
 80044fe:	b11b      	cbz	r3, 8004508 <__sinit+0x14>
 8004500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004504:	f7ff bff0 	b.w	80044e8 <__sinit_lock_release>
 8004508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800450c:	6523      	str	r3, [r4, #80]	; 0x50
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <__sinit+0x68>)
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <__sinit+0x6c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	62a2      	str	r2, [r4, #40]	; 0x28
 8004516:	42a3      	cmp	r3, r4
 8004518:	bf08      	it	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	4620      	mov	r0, r4
 800451e:	bf08      	it	eq
 8004520:	61a3      	streq	r3, [r4, #24]
 8004522:	f000 f81f 	bl	8004564 <__sfp>
 8004526:	6060      	str	r0, [r4, #4]
 8004528:	4620      	mov	r0, r4
 800452a:	f000 f81b 	bl	8004564 <__sfp>
 800452e:	60a0      	str	r0, [r4, #8]
 8004530:	4620      	mov	r0, r4
 8004532:	f000 f817 	bl	8004564 <__sfp>
 8004536:	2200      	movs	r2, #0
 8004538:	2104      	movs	r1, #4
 800453a:	60e0      	str	r0, [r4, #12]
 800453c:	6860      	ldr	r0, [r4, #4]
 800453e:	f7ff ff81 	bl	8004444 <std>
 8004542:	2201      	movs	r2, #1
 8004544:	2109      	movs	r1, #9
 8004546:	68a0      	ldr	r0, [r4, #8]
 8004548:	f7ff ff7c 	bl	8004444 <std>
 800454c:	2202      	movs	r2, #2
 800454e:	2112      	movs	r1, #18
 8004550:	68e0      	ldr	r0, [r4, #12]
 8004552:	f7ff ff77 	bl	8004444 <std>
 8004556:	2301      	movs	r3, #1
 8004558:	61a3      	str	r3, [r4, #24]
 800455a:	e7d1      	b.n	8004500 <__sinit+0xc>
 800455c:	080058b0 	.word	0x080058b0
 8004560:	0800448d 	.word	0x0800448d

08004564 <__sfp>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	4607      	mov	r7, r0
 8004568:	f7ff ffac 	bl	80044c4 <__sfp_lock_acquire>
 800456c:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <__sfp+0x84>)
 800456e:	681e      	ldr	r6, [r3, #0]
 8004570:	69b3      	ldr	r3, [r6, #24]
 8004572:	b913      	cbnz	r3, 800457a <__sfp+0x16>
 8004574:	4630      	mov	r0, r6
 8004576:	f7ff ffbd 	bl	80044f4 <__sinit>
 800457a:	3648      	adds	r6, #72	; 0x48
 800457c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004580:	3b01      	subs	r3, #1
 8004582:	d503      	bpl.n	800458c <__sfp+0x28>
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	b30b      	cbz	r3, 80045cc <__sfp+0x68>
 8004588:	6836      	ldr	r6, [r6, #0]
 800458a:	e7f7      	b.n	800457c <__sfp+0x18>
 800458c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004590:	b9d5      	cbnz	r5, 80045c8 <__sfp+0x64>
 8004592:	4b16      	ldr	r3, [pc, #88]	; (80045ec <__sfp+0x88>)
 8004594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004598:	60e3      	str	r3, [r4, #12]
 800459a:	6665      	str	r5, [r4, #100]	; 0x64
 800459c:	f000 f84c 	bl	8004638 <__retarget_lock_init_recursive>
 80045a0:	f7ff ff96 	bl	80044d0 <__sfp_lock_release>
 80045a4:	2208      	movs	r2, #8
 80045a6:	4629      	mov	r1, r5
 80045a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045b0:	6025      	str	r5, [r4, #0]
 80045b2:	61a5      	str	r5, [r4, #24]
 80045b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045b8:	f7fe fc46 	bl	8002e48 <memset>
 80045bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045c4:	4620      	mov	r0, r4
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c8:	3468      	adds	r4, #104	; 0x68
 80045ca:	e7d9      	b.n	8004580 <__sfp+0x1c>
 80045cc:	2104      	movs	r1, #4
 80045ce:	4638      	mov	r0, r7
 80045d0:	f7ff ff62 	bl	8004498 <__sfmoreglue>
 80045d4:	4604      	mov	r4, r0
 80045d6:	6030      	str	r0, [r6, #0]
 80045d8:	2800      	cmp	r0, #0
 80045da:	d1d5      	bne.n	8004588 <__sfp+0x24>
 80045dc:	f7ff ff78 	bl	80044d0 <__sfp_lock_release>
 80045e0:	230c      	movs	r3, #12
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	e7ee      	b.n	80045c4 <__sfp+0x60>
 80045e6:	bf00      	nop
 80045e8:	080058b0 	.word	0x080058b0
 80045ec:	ffff0001 	.word	0xffff0001

080045f0 <_fwalk_reent>:
 80045f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f4:	4606      	mov	r6, r0
 80045f6:	4688      	mov	r8, r1
 80045f8:	2700      	movs	r7, #0
 80045fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004602:	f1b9 0901 	subs.w	r9, r9, #1
 8004606:	d505      	bpl.n	8004614 <_fwalk_reent+0x24>
 8004608:	6824      	ldr	r4, [r4, #0]
 800460a:	2c00      	cmp	r4, #0
 800460c:	d1f7      	bne.n	80045fe <_fwalk_reent+0xe>
 800460e:	4638      	mov	r0, r7
 8004610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004614:	89ab      	ldrh	r3, [r5, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d907      	bls.n	800462a <_fwalk_reent+0x3a>
 800461a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800461e:	3301      	adds	r3, #1
 8004620:	d003      	beq.n	800462a <_fwalk_reent+0x3a>
 8004622:	4629      	mov	r1, r5
 8004624:	4630      	mov	r0, r6
 8004626:	47c0      	blx	r8
 8004628:	4307      	orrs	r7, r0
 800462a:	3568      	adds	r5, #104	; 0x68
 800462c:	e7e9      	b.n	8004602 <_fwalk_reent+0x12>
	...

08004630 <_localeconv_r>:
 8004630:	4800      	ldr	r0, [pc, #0]	; (8004634 <_localeconv_r+0x4>)
 8004632:	4770      	bx	lr
 8004634:	20000160 	.word	0x20000160

08004638 <__retarget_lock_init_recursive>:
 8004638:	4770      	bx	lr

0800463a <__retarget_lock_acquire_recursive>:
 800463a:	4770      	bx	lr

0800463c <__retarget_lock_release_recursive>:
 800463c:	4770      	bx	lr
	...

08004640 <malloc>:
 8004640:	4b02      	ldr	r3, [pc, #8]	; (800464c <malloc+0xc>)
 8004642:	4601      	mov	r1, r0
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	f000 bbfb 	b.w	8004e40 <_malloc_r>
 800464a:	bf00      	nop
 800464c:	2000000c 	.word	0x2000000c

08004650 <memchr>:
 8004650:	4603      	mov	r3, r0
 8004652:	b510      	push	{r4, lr}
 8004654:	b2c9      	uxtb	r1, r1
 8004656:	4402      	add	r2, r0
 8004658:	4293      	cmp	r3, r2
 800465a:	4618      	mov	r0, r3
 800465c:	d101      	bne.n	8004662 <memchr+0x12>
 800465e:	2000      	movs	r0, #0
 8004660:	e003      	b.n	800466a <memchr+0x1a>
 8004662:	7804      	ldrb	r4, [r0, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	428c      	cmp	r4, r1
 8004668:	d1f6      	bne.n	8004658 <memchr+0x8>
 800466a:	bd10      	pop	{r4, pc}

0800466c <memcpy>:
 800466c:	440a      	add	r2, r1
 800466e:	4291      	cmp	r1, r2
 8004670:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004674:	d100      	bne.n	8004678 <memcpy+0xc>
 8004676:	4770      	bx	lr
 8004678:	b510      	push	{r4, lr}
 800467a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800467e:	4291      	cmp	r1, r2
 8004680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004684:	d1f9      	bne.n	800467a <memcpy+0xe>
 8004686:	bd10      	pop	{r4, pc}

08004688 <_Balloc>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800468c:	4604      	mov	r4, r0
 800468e:	460d      	mov	r5, r1
 8004690:	b976      	cbnz	r6, 80046b0 <_Balloc+0x28>
 8004692:	2010      	movs	r0, #16
 8004694:	f7ff ffd4 	bl	8004640 <malloc>
 8004698:	4602      	mov	r2, r0
 800469a:	6260      	str	r0, [r4, #36]	; 0x24
 800469c:	b920      	cbnz	r0, 80046a8 <_Balloc+0x20>
 800469e:	2166      	movs	r1, #102	; 0x66
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <_Balloc+0x78>)
 80046a2:	4818      	ldr	r0, [pc, #96]	; (8004704 <_Balloc+0x7c>)
 80046a4:	f000 fea4 	bl	80053f0 <__assert_func>
 80046a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046ac:	6006      	str	r6, [r0, #0]
 80046ae:	60c6      	str	r6, [r0, #12]
 80046b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046b2:	68f3      	ldr	r3, [r6, #12]
 80046b4:	b183      	cbz	r3, 80046d8 <_Balloc+0x50>
 80046b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046be:	b9b8      	cbnz	r0, 80046f0 <_Balloc+0x68>
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f605 	lsl.w	r6, r1, r5
 80046c6:	1d72      	adds	r2, r6, #5
 80046c8:	4620      	mov	r0, r4
 80046ca:	0092      	lsls	r2, r2, #2
 80046cc:	f000 fb5e 	bl	8004d8c <_calloc_r>
 80046d0:	b160      	cbz	r0, 80046ec <_Balloc+0x64>
 80046d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046d6:	e00e      	b.n	80046f6 <_Balloc+0x6e>
 80046d8:	2221      	movs	r2, #33	; 0x21
 80046da:	2104      	movs	r1, #4
 80046dc:	4620      	mov	r0, r4
 80046de:	f000 fb55 	bl	8004d8c <_calloc_r>
 80046e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046e4:	60f0      	str	r0, [r6, #12]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e4      	bne.n	80046b6 <_Balloc+0x2e>
 80046ec:	2000      	movs	r0, #0
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	6802      	ldr	r2, [r0, #0]
 80046f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80046f6:	2300      	movs	r3, #0
 80046f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80046fc:	e7f7      	b.n	80046ee <_Balloc+0x66>
 80046fe:	bf00      	nop
 8004700:	080058f5 	.word	0x080058f5
 8004704:	080059dc 	.word	0x080059dc

08004708 <_Bfree>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800470c:	4605      	mov	r5, r0
 800470e:	460c      	mov	r4, r1
 8004710:	b976      	cbnz	r6, 8004730 <_Bfree+0x28>
 8004712:	2010      	movs	r0, #16
 8004714:	f7ff ff94 	bl	8004640 <malloc>
 8004718:	4602      	mov	r2, r0
 800471a:	6268      	str	r0, [r5, #36]	; 0x24
 800471c:	b920      	cbnz	r0, 8004728 <_Bfree+0x20>
 800471e:	218a      	movs	r1, #138	; 0x8a
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <_Bfree+0x3c>)
 8004722:	4809      	ldr	r0, [pc, #36]	; (8004748 <_Bfree+0x40>)
 8004724:	f000 fe64 	bl	80053f0 <__assert_func>
 8004728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800472c:	6006      	str	r6, [r0, #0]
 800472e:	60c6      	str	r6, [r0, #12]
 8004730:	b13c      	cbz	r4, 8004742 <_Bfree+0x3a>
 8004732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004734:	6862      	ldr	r2, [r4, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800473c:	6021      	str	r1, [r4, #0]
 800473e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	080058f5 	.word	0x080058f5
 8004748:	080059dc 	.word	0x080059dc

0800474c <__multadd>:
 800474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004750:	4698      	mov	r8, r3
 8004752:	460c      	mov	r4, r1
 8004754:	2300      	movs	r3, #0
 8004756:	690e      	ldr	r6, [r1, #16]
 8004758:	4607      	mov	r7, r0
 800475a:	f101 0014 	add.w	r0, r1, #20
 800475e:	6805      	ldr	r5, [r0, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	b2a9      	uxth	r1, r5
 8004764:	fb02 8101 	mla	r1, r2, r1, r8
 8004768:	0c2d      	lsrs	r5, r5, #16
 800476a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800476e:	fb02 c505 	mla	r5, r2, r5, ip
 8004772:	b289      	uxth	r1, r1
 8004774:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004778:	429e      	cmp	r6, r3
 800477a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800477e:	f840 1b04 	str.w	r1, [r0], #4
 8004782:	dcec      	bgt.n	800475e <__multadd+0x12>
 8004784:	f1b8 0f00 	cmp.w	r8, #0
 8004788:	d022      	beq.n	80047d0 <__multadd+0x84>
 800478a:	68a3      	ldr	r3, [r4, #8]
 800478c:	42b3      	cmp	r3, r6
 800478e:	dc19      	bgt.n	80047c4 <__multadd+0x78>
 8004790:	6861      	ldr	r1, [r4, #4]
 8004792:	4638      	mov	r0, r7
 8004794:	3101      	adds	r1, #1
 8004796:	f7ff ff77 	bl	8004688 <_Balloc>
 800479a:	4605      	mov	r5, r0
 800479c:	b928      	cbnz	r0, 80047aa <__multadd+0x5e>
 800479e:	4602      	mov	r2, r0
 80047a0:	21b5      	movs	r1, #181	; 0xb5
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <__multadd+0x8c>)
 80047a4:	480d      	ldr	r0, [pc, #52]	; (80047dc <__multadd+0x90>)
 80047a6:	f000 fe23 	bl	80053f0 <__assert_func>
 80047aa:	6922      	ldr	r2, [r4, #16]
 80047ac:	f104 010c 	add.w	r1, r4, #12
 80047b0:	3202      	adds	r2, #2
 80047b2:	0092      	lsls	r2, r2, #2
 80047b4:	300c      	adds	r0, #12
 80047b6:	f7ff ff59 	bl	800466c <memcpy>
 80047ba:	4621      	mov	r1, r4
 80047bc:	4638      	mov	r0, r7
 80047be:	f7ff ffa3 	bl	8004708 <_Bfree>
 80047c2:	462c      	mov	r4, r5
 80047c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80047c8:	3601      	adds	r6, #1
 80047ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80047ce:	6126      	str	r6, [r4, #16]
 80047d0:	4620      	mov	r0, r4
 80047d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d6:	bf00      	nop
 80047d8:	0800596b 	.word	0x0800596b
 80047dc:	080059dc 	.word	0x080059dc

080047e0 <__hi0bits>:
 80047e0:	0c02      	lsrs	r2, r0, #16
 80047e2:	0412      	lsls	r2, r2, #16
 80047e4:	4603      	mov	r3, r0
 80047e6:	b9ca      	cbnz	r2, 800481c <__hi0bits+0x3c>
 80047e8:	0403      	lsls	r3, r0, #16
 80047ea:	2010      	movs	r0, #16
 80047ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80047f0:	bf04      	itt	eq
 80047f2:	021b      	lsleq	r3, r3, #8
 80047f4:	3008      	addeq	r0, #8
 80047f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80047fa:	bf04      	itt	eq
 80047fc:	011b      	lsleq	r3, r3, #4
 80047fe:	3004      	addeq	r0, #4
 8004800:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004804:	bf04      	itt	eq
 8004806:	009b      	lsleq	r3, r3, #2
 8004808:	3002      	addeq	r0, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	db05      	blt.n	800481a <__hi0bits+0x3a>
 800480e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004812:	f100 0001 	add.w	r0, r0, #1
 8004816:	bf08      	it	eq
 8004818:	2020      	moveq	r0, #32
 800481a:	4770      	bx	lr
 800481c:	2000      	movs	r0, #0
 800481e:	e7e5      	b.n	80047ec <__hi0bits+0xc>

08004820 <__lo0bits>:
 8004820:	6803      	ldr	r3, [r0, #0]
 8004822:	4602      	mov	r2, r0
 8004824:	f013 0007 	ands.w	r0, r3, #7
 8004828:	d00b      	beq.n	8004842 <__lo0bits+0x22>
 800482a:	07d9      	lsls	r1, r3, #31
 800482c:	d422      	bmi.n	8004874 <__lo0bits+0x54>
 800482e:	0798      	lsls	r0, r3, #30
 8004830:	bf49      	itett	mi
 8004832:	085b      	lsrmi	r3, r3, #1
 8004834:	089b      	lsrpl	r3, r3, #2
 8004836:	2001      	movmi	r0, #1
 8004838:	6013      	strmi	r3, [r2, #0]
 800483a:	bf5c      	itt	pl
 800483c:	2002      	movpl	r0, #2
 800483e:	6013      	strpl	r3, [r2, #0]
 8004840:	4770      	bx	lr
 8004842:	b299      	uxth	r1, r3
 8004844:	b909      	cbnz	r1, 800484a <__lo0bits+0x2a>
 8004846:	2010      	movs	r0, #16
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800484e:	bf04      	itt	eq
 8004850:	0a1b      	lsreq	r3, r3, #8
 8004852:	3008      	addeq	r0, #8
 8004854:	0719      	lsls	r1, r3, #28
 8004856:	bf04      	itt	eq
 8004858:	091b      	lsreq	r3, r3, #4
 800485a:	3004      	addeq	r0, #4
 800485c:	0799      	lsls	r1, r3, #30
 800485e:	bf04      	itt	eq
 8004860:	089b      	lsreq	r3, r3, #2
 8004862:	3002      	addeq	r0, #2
 8004864:	07d9      	lsls	r1, r3, #31
 8004866:	d403      	bmi.n	8004870 <__lo0bits+0x50>
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	f100 0001 	add.w	r0, r0, #1
 800486e:	d003      	beq.n	8004878 <__lo0bits+0x58>
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4770      	bx	lr
 8004874:	2000      	movs	r0, #0
 8004876:	4770      	bx	lr
 8004878:	2020      	movs	r0, #32
 800487a:	4770      	bx	lr

0800487c <__i2b>:
 800487c:	b510      	push	{r4, lr}
 800487e:	460c      	mov	r4, r1
 8004880:	2101      	movs	r1, #1
 8004882:	f7ff ff01 	bl	8004688 <_Balloc>
 8004886:	4602      	mov	r2, r0
 8004888:	b928      	cbnz	r0, 8004896 <__i2b+0x1a>
 800488a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <__i2b+0x24>)
 8004890:	4804      	ldr	r0, [pc, #16]	; (80048a4 <__i2b+0x28>)
 8004892:	f000 fdad 	bl	80053f0 <__assert_func>
 8004896:	2301      	movs	r3, #1
 8004898:	6144      	str	r4, [r0, #20]
 800489a:	6103      	str	r3, [r0, #16]
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	0800596b 	.word	0x0800596b
 80048a4:	080059dc 	.word	0x080059dc

080048a8 <__multiply>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	4614      	mov	r4, r2
 80048ae:	690a      	ldr	r2, [r1, #16]
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	460d      	mov	r5, r1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	bfbe      	ittt	lt
 80048b8:	460b      	movlt	r3, r1
 80048ba:	4625      	movlt	r5, r4
 80048bc:	461c      	movlt	r4, r3
 80048be:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80048c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048c6:	68ab      	ldr	r3, [r5, #8]
 80048c8:	6869      	ldr	r1, [r5, #4]
 80048ca:	eb0a 0709 	add.w	r7, sl, r9
 80048ce:	42bb      	cmp	r3, r7
 80048d0:	b085      	sub	sp, #20
 80048d2:	bfb8      	it	lt
 80048d4:	3101      	addlt	r1, #1
 80048d6:	f7ff fed7 	bl	8004688 <_Balloc>
 80048da:	b930      	cbnz	r0, 80048ea <__multiply+0x42>
 80048dc:	4602      	mov	r2, r0
 80048de:	f240 115d 	movw	r1, #349	; 0x15d
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <__multiply+0x140>)
 80048e4:	4841      	ldr	r0, [pc, #260]	; (80049ec <__multiply+0x144>)
 80048e6:	f000 fd83 	bl	80053f0 <__assert_func>
 80048ea:	f100 0614 	add.w	r6, r0, #20
 80048ee:	4633      	mov	r3, r6
 80048f0:	2200      	movs	r2, #0
 80048f2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80048f6:	4543      	cmp	r3, r8
 80048f8:	d31e      	bcc.n	8004938 <__multiply+0x90>
 80048fa:	f105 0c14 	add.w	ip, r5, #20
 80048fe:	f104 0314 	add.w	r3, r4, #20
 8004902:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004906:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800490a:	9202      	str	r2, [sp, #8]
 800490c:	ebac 0205 	sub.w	r2, ip, r5
 8004910:	3a15      	subs	r2, #21
 8004912:	f022 0203 	bic.w	r2, r2, #3
 8004916:	3204      	adds	r2, #4
 8004918:	f105 0115 	add.w	r1, r5, #21
 800491c:	458c      	cmp	ip, r1
 800491e:	bf38      	it	cc
 8004920:	2204      	movcc	r2, #4
 8004922:	9201      	str	r2, [sp, #4]
 8004924:	9a02      	ldr	r2, [sp, #8]
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d808      	bhi.n	800493e <__multiply+0x96>
 800492c:	2f00      	cmp	r7, #0
 800492e:	dc55      	bgt.n	80049dc <__multiply+0x134>
 8004930:	6107      	str	r7, [r0, #16]
 8004932:	b005      	add	sp, #20
 8004934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004938:	f843 2b04 	str.w	r2, [r3], #4
 800493c:	e7db      	b.n	80048f6 <__multiply+0x4e>
 800493e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004942:	f1ba 0f00 	cmp.w	sl, #0
 8004946:	d020      	beq.n	800498a <__multiply+0xe2>
 8004948:	46b1      	mov	r9, r6
 800494a:	2200      	movs	r2, #0
 800494c:	f105 0e14 	add.w	lr, r5, #20
 8004950:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004954:	f8d9 b000 	ldr.w	fp, [r9]
 8004958:	b2a1      	uxth	r1, r4
 800495a:	fa1f fb8b 	uxth.w	fp, fp
 800495e:	fb0a b101 	mla	r1, sl, r1, fp
 8004962:	4411      	add	r1, r2
 8004964:	f8d9 2000 	ldr.w	r2, [r9]
 8004968:	0c24      	lsrs	r4, r4, #16
 800496a:	0c12      	lsrs	r2, r2, #16
 800496c:	fb0a 2404 	mla	r4, sl, r4, r2
 8004970:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004974:	b289      	uxth	r1, r1
 8004976:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800497a:	45f4      	cmp	ip, lr
 800497c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004980:	f849 1b04 	str.w	r1, [r9], #4
 8004984:	d8e4      	bhi.n	8004950 <__multiply+0xa8>
 8004986:	9901      	ldr	r1, [sp, #4]
 8004988:	5072      	str	r2, [r6, r1]
 800498a:	9a03      	ldr	r2, [sp, #12]
 800498c:	3304      	adds	r3, #4
 800498e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004992:	f1b9 0f00 	cmp.w	r9, #0
 8004996:	d01f      	beq.n	80049d8 <__multiply+0x130>
 8004998:	46b6      	mov	lr, r6
 800499a:	f04f 0a00 	mov.w	sl, #0
 800499e:	6834      	ldr	r4, [r6, #0]
 80049a0:	f105 0114 	add.w	r1, r5, #20
 80049a4:	880a      	ldrh	r2, [r1, #0]
 80049a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80049aa:	b2a4      	uxth	r4, r4
 80049ac:	fb09 b202 	mla	r2, r9, r2, fp
 80049b0:	4492      	add	sl, r2
 80049b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80049b6:	f84e 4b04 	str.w	r4, [lr], #4
 80049ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80049be:	f8be 2000 	ldrh.w	r2, [lr]
 80049c2:	0c24      	lsrs	r4, r4, #16
 80049c4:	fb09 2404 	mla	r4, r9, r4, r2
 80049c8:	458c      	cmp	ip, r1
 80049ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80049ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80049d2:	d8e7      	bhi.n	80049a4 <__multiply+0xfc>
 80049d4:	9a01      	ldr	r2, [sp, #4]
 80049d6:	50b4      	str	r4, [r6, r2]
 80049d8:	3604      	adds	r6, #4
 80049da:	e7a3      	b.n	8004924 <__multiply+0x7c>
 80049dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1a5      	bne.n	8004930 <__multiply+0x88>
 80049e4:	3f01      	subs	r7, #1
 80049e6:	e7a1      	b.n	800492c <__multiply+0x84>
 80049e8:	0800596b 	.word	0x0800596b
 80049ec:	080059dc 	.word	0x080059dc

080049f0 <__pow5mult>:
 80049f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f4:	4615      	mov	r5, r2
 80049f6:	f012 0203 	ands.w	r2, r2, #3
 80049fa:	4606      	mov	r6, r0
 80049fc:	460f      	mov	r7, r1
 80049fe:	d007      	beq.n	8004a10 <__pow5mult+0x20>
 8004a00:	4c25      	ldr	r4, [pc, #148]	; (8004a98 <__pow5mult+0xa8>)
 8004a02:	3a01      	subs	r2, #1
 8004a04:	2300      	movs	r3, #0
 8004a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a0a:	f7ff fe9f 	bl	800474c <__multadd>
 8004a0e:	4607      	mov	r7, r0
 8004a10:	10ad      	asrs	r5, r5, #2
 8004a12:	d03d      	beq.n	8004a90 <__pow5mult+0xa0>
 8004a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a16:	b97c      	cbnz	r4, 8004a38 <__pow5mult+0x48>
 8004a18:	2010      	movs	r0, #16
 8004a1a:	f7ff fe11 	bl	8004640 <malloc>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6270      	str	r0, [r6, #36]	; 0x24
 8004a22:	b928      	cbnz	r0, 8004a30 <__pow5mult+0x40>
 8004a24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <__pow5mult+0xac>)
 8004a2a:	481d      	ldr	r0, [pc, #116]	; (8004aa0 <__pow5mult+0xb0>)
 8004a2c:	f000 fce0 	bl	80053f0 <__assert_func>
 8004a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a34:	6004      	str	r4, [r0, #0]
 8004a36:	60c4      	str	r4, [r0, #12]
 8004a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a40:	b94c      	cbnz	r4, 8004a56 <__pow5mult+0x66>
 8004a42:	f240 2171 	movw	r1, #625	; 0x271
 8004a46:	4630      	mov	r0, r6
 8004a48:	f7ff ff18 	bl	800487c <__i2b>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a54:	6003      	str	r3, [r0, #0]
 8004a56:	f04f 0900 	mov.w	r9, #0
 8004a5a:	07eb      	lsls	r3, r5, #31
 8004a5c:	d50a      	bpl.n	8004a74 <__pow5mult+0x84>
 8004a5e:	4639      	mov	r1, r7
 8004a60:	4622      	mov	r2, r4
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7ff ff20 	bl	80048a8 <__multiply>
 8004a68:	4680      	mov	r8, r0
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff fe4b 	bl	8004708 <_Bfree>
 8004a72:	4647      	mov	r7, r8
 8004a74:	106d      	asrs	r5, r5, #1
 8004a76:	d00b      	beq.n	8004a90 <__pow5mult+0xa0>
 8004a78:	6820      	ldr	r0, [r4, #0]
 8004a7a:	b938      	cbnz	r0, 8004a8c <__pow5mult+0x9c>
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4630      	mov	r0, r6
 8004a82:	f7ff ff11 	bl	80048a8 <__multiply>
 8004a86:	6020      	str	r0, [r4, #0]
 8004a88:	f8c0 9000 	str.w	r9, [r0]
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	e7e4      	b.n	8004a5a <__pow5mult+0x6a>
 8004a90:	4638      	mov	r0, r7
 8004a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a96:	bf00      	nop
 8004a98:	08005b30 	.word	0x08005b30
 8004a9c:	080058f5 	.word	0x080058f5
 8004aa0:	080059dc 	.word	0x080059dc

08004aa4 <__lshift>:
 8004aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	4607      	mov	r7, r0
 8004aac:	4691      	mov	r9, r2
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	6849      	ldr	r1, [r1, #4]
 8004ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004abc:	f108 0601 	add.w	r6, r8, #1
 8004ac0:	42b3      	cmp	r3, r6
 8004ac2:	db0b      	blt.n	8004adc <__lshift+0x38>
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f7ff fddf 	bl	8004688 <_Balloc>
 8004aca:	4605      	mov	r5, r0
 8004acc:	b948      	cbnz	r0, 8004ae2 <__lshift+0x3e>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <__lshift+0xd0>)
 8004ad6:	4828      	ldr	r0, [pc, #160]	; (8004b78 <__lshift+0xd4>)
 8004ad8:	f000 fc8a 	bl	80053f0 <__assert_func>
 8004adc:	3101      	adds	r1, #1
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__lshift+0x1c>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f100 0114 	add.w	r1, r0, #20
 8004ae8:	f100 0210 	add.w	r2, r0, #16
 8004aec:	4618      	mov	r0, r3
 8004aee:	4553      	cmp	r3, sl
 8004af0:	db33      	blt.n	8004b5a <__lshift+0xb6>
 8004af2:	6920      	ldr	r0, [r4, #16]
 8004af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004af8:	f104 0314 	add.w	r3, r4, #20
 8004afc:	f019 091f 	ands.w	r9, r9, #31
 8004b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b08:	d02b      	beq.n	8004b62 <__lshift+0xbe>
 8004b0a:	468a      	mov	sl, r1
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	fa00 f009 	lsl.w	r0, r0, r9
 8004b18:	4302      	orrs	r2, r0
 8004b1a:	f84a 2b04 	str.w	r2, [sl], #4
 8004b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b22:	459c      	cmp	ip, r3
 8004b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b28:	d8f3      	bhi.n	8004b12 <__lshift+0x6e>
 8004b2a:	ebac 0304 	sub.w	r3, ip, r4
 8004b2e:	3b15      	subs	r3, #21
 8004b30:	f023 0303 	bic.w	r3, r3, #3
 8004b34:	3304      	adds	r3, #4
 8004b36:	f104 0015 	add.w	r0, r4, #21
 8004b3a:	4584      	cmp	ip, r0
 8004b3c:	bf38      	it	cc
 8004b3e:	2304      	movcc	r3, #4
 8004b40:	50ca      	str	r2, [r1, r3]
 8004b42:	b10a      	cbz	r2, 8004b48 <__lshift+0xa4>
 8004b44:	f108 0602 	add.w	r6, r8, #2
 8004b48:	3e01      	subs	r6, #1
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	612e      	str	r6, [r5, #16]
 8004b50:	f7ff fdda 	bl	8004708 <_Bfree>
 8004b54:	4628      	mov	r0, r5
 8004b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b5e:	3301      	adds	r3, #1
 8004b60:	e7c5      	b.n	8004aee <__lshift+0x4a>
 8004b62:	3904      	subs	r1, #4
 8004b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b68:	459c      	cmp	ip, r3
 8004b6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b6e:	d8f9      	bhi.n	8004b64 <__lshift+0xc0>
 8004b70:	e7ea      	b.n	8004b48 <__lshift+0xa4>
 8004b72:	bf00      	nop
 8004b74:	0800596b 	.word	0x0800596b
 8004b78:	080059dc 	.word	0x080059dc

08004b7c <__mcmp>:
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	690a      	ldr	r2, [r1, #16]
 8004b80:	6900      	ldr	r0, [r0, #16]
 8004b82:	b530      	push	{r4, r5, lr}
 8004b84:	1a80      	subs	r0, r0, r2
 8004b86:	d10d      	bne.n	8004ba4 <__mcmp+0x28>
 8004b88:	3314      	adds	r3, #20
 8004b8a:	3114      	adds	r1, #20
 8004b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b9c:	4295      	cmp	r5, r2
 8004b9e:	d002      	beq.n	8004ba6 <__mcmp+0x2a>
 8004ba0:	d304      	bcc.n	8004bac <__mcmp+0x30>
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	bd30      	pop	{r4, r5, pc}
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	d3f4      	bcc.n	8004b94 <__mcmp+0x18>
 8004baa:	e7fb      	b.n	8004ba4 <__mcmp+0x28>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bb0:	e7f8      	b.n	8004ba4 <__mcmp+0x28>
	...

08004bb4 <__mdiff>:
 8004bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	460c      	mov	r4, r1
 8004bba:	4606      	mov	r6, r0
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4692      	mov	sl, r2
 8004bc2:	f7ff ffdb 	bl	8004b7c <__mcmp>
 8004bc6:	1e05      	subs	r5, r0, #0
 8004bc8:	d111      	bne.n	8004bee <__mdiff+0x3a>
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff fd5b 	bl	8004688 <_Balloc>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	b928      	cbnz	r0, 8004be2 <__mdiff+0x2e>
 8004bd6:	f240 2132 	movw	r1, #562	; 0x232
 8004bda:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <__mdiff+0x118>)
 8004bdc:	483c      	ldr	r0, [pc, #240]	; (8004cd0 <__mdiff+0x11c>)
 8004bde:	f000 fc07 	bl	80053f0 <__assert_func>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004be8:	4610      	mov	r0, r2
 8004bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bee:	bfa4      	itt	ge
 8004bf0:	4653      	movge	r3, sl
 8004bf2:	46a2      	movge	sl, r4
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004bfa:	bfa6      	itte	ge
 8004bfc:	461c      	movge	r4, r3
 8004bfe:	2500      	movge	r5, #0
 8004c00:	2501      	movlt	r5, #1
 8004c02:	f7ff fd41 	bl	8004688 <_Balloc>
 8004c06:	4602      	mov	r2, r0
 8004c08:	b918      	cbnz	r0, 8004c12 <__mdiff+0x5e>
 8004c0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <__mdiff+0x118>)
 8004c10:	e7e4      	b.n	8004bdc <__mdiff+0x28>
 8004c12:	f100 0814 	add.w	r8, r0, #20
 8004c16:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004c1a:	60c5      	str	r5, [r0, #12]
 8004c1c:	f04f 0c00 	mov.w	ip, #0
 8004c20:	f10a 0514 	add.w	r5, sl, #20
 8004c24:	f10a 0010 	add.w	r0, sl, #16
 8004c28:	46c2      	mov	sl, r8
 8004c2a:	6926      	ldr	r6, [r4, #16]
 8004c2c:	f104 0914 	add.w	r9, r4, #20
 8004c30:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004c34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c38:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004c3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c40:	fa1f f18b 	uxth.w	r1, fp
 8004c44:	4461      	add	r1, ip
 8004c46:	fa1f fc83 	uxth.w	ip, r3
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	eba1 010c 	sub.w	r1, r1, ip
 8004c50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c58:	b289      	uxth	r1, r1
 8004c5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c5e:	454e      	cmp	r6, r9
 8004c60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c64:	f84a 3b04 	str.w	r3, [sl], #4
 8004c68:	d8e6      	bhi.n	8004c38 <__mdiff+0x84>
 8004c6a:	1b33      	subs	r3, r6, r4
 8004c6c:	3b15      	subs	r3, #21
 8004c6e:	f023 0303 	bic.w	r3, r3, #3
 8004c72:	3415      	adds	r4, #21
 8004c74:	3304      	adds	r3, #4
 8004c76:	42a6      	cmp	r6, r4
 8004c78:	bf38      	it	cc
 8004c7a:	2304      	movcc	r3, #4
 8004c7c:	441d      	add	r5, r3
 8004c7e:	4443      	add	r3, r8
 8004c80:	461e      	mov	r6, r3
 8004c82:	462c      	mov	r4, r5
 8004c84:	4574      	cmp	r4, lr
 8004c86:	d30e      	bcc.n	8004ca6 <__mdiff+0xf2>
 8004c88:	f10e 0103 	add.w	r1, lr, #3
 8004c8c:	1b49      	subs	r1, r1, r5
 8004c8e:	f021 0103 	bic.w	r1, r1, #3
 8004c92:	3d03      	subs	r5, #3
 8004c94:	45ae      	cmp	lr, r5
 8004c96:	bf38      	it	cc
 8004c98:	2100      	movcc	r1, #0
 8004c9a:	4419      	add	r1, r3
 8004c9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ca0:	b18b      	cbz	r3, 8004cc6 <__mdiff+0x112>
 8004ca2:	6117      	str	r7, [r2, #16]
 8004ca4:	e7a0      	b.n	8004be8 <__mdiff+0x34>
 8004ca6:	f854 8b04 	ldr.w	r8, [r4], #4
 8004caa:	fa1f f188 	uxth.w	r1, r8
 8004cae:	4461      	add	r1, ip
 8004cb0:	1408      	asrs	r0, r1, #16
 8004cb2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004cb6:	b289      	uxth	r1, r1
 8004cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004cbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004cc0:	f846 1b04 	str.w	r1, [r6], #4
 8004cc4:	e7de      	b.n	8004c84 <__mdiff+0xd0>
 8004cc6:	3f01      	subs	r7, #1
 8004cc8:	e7e8      	b.n	8004c9c <__mdiff+0xe8>
 8004cca:	bf00      	nop
 8004ccc:	0800596b 	.word	0x0800596b
 8004cd0:	080059dc 	.word	0x080059dc

08004cd4 <__d2b>:
 8004cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004cd8:	2101      	movs	r1, #1
 8004cda:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004cde:	4690      	mov	r8, r2
 8004ce0:	461d      	mov	r5, r3
 8004ce2:	f7ff fcd1 	bl	8004688 <_Balloc>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	b930      	cbnz	r0, 8004cf8 <__d2b+0x24>
 8004cea:	4602      	mov	r2, r0
 8004cec:	f240 310a 	movw	r1, #778	; 0x30a
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <__d2b+0xb0>)
 8004cf2:	4825      	ldr	r0, [pc, #148]	; (8004d88 <__d2b+0xb4>)
 8004cf4:	f000 fb7c 	bl	80053f0 <__assert_func>
 8004cf8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004cfc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004d00:	bb2d      	cbnz	r5, 8004d4e <__d2b+0x7a>
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	f1b8 0300 	subs.w	r3, r8, #0
 8004d08:	d026      	beq.n	8004d58 <__d2b+0x84>
 8004d0a:	4668      	mov	r0, sp
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	f7ff fd87 	bl	8004820 <__lo0bits>
 8004d12:	9900      	ldr	r1, [sp, #0]
 8004d14:	b1f0      	cbz	r0, 8004d54 <__d2b+0x80>
 8004d16:	9a01      	ldr	r2, [sp, #4]
 8004d18:	f1c0 0320 	rsb	r3, r0, #32
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	430b      	orrs	r3, r1
 8004d22:	40c2      	lsrs	r2, r0
 8004d24:	6163      	str	r3, [r4, #20]
 8004d26:	9201      	str	r2, [sp, #4]
 8004d28:	9b01      	ldr	r3, [sp, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2102      	movne	r1, #2
 8004d30:	2101      	moveq	r1, #1
 8004d32:	61a3      	str	r3, [r4, #24]
 8004d34:	6121      	str	r1, [r4, #16]
 8004d36:	b1c5      	cbz	r5, 8004d6a <__d2b+0x96>
 8004d38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d3c:	4405      	add	r5, r0
 8004d3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d42:	603d      	str	r5, [r7, #0]
 8004d44:	6030      	str	r0, [r6, #0]
 8004d46:	4620      	mov	r0, r4
 8004d48:	b002      	add	sp, #8
 8004d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d52:	e7d6      	b.n	8004d02 <__d2b+0x2e>
 8004d54:	6161      	str	r1, [r4, #20]
 8004d56:	e7e7      	b.n	8004d28 <__d2b+0x54>
 8004d58:	a801      	add	r0, sp, #4
 8004d5a:	f7ff fd61 	bl	8004820 <__lo0bits>
 8004d5e:	2101      	movs	r1, #1
 8004d60:	9b01      	ldr	r3, [sp, #4]
 8004d62:	6121      	str	r1, [r4, #16]
 8004d64:	6163      	str	r3, [r4, #20]
 8004d66:	3020      	adds	r0, #32
 8004d68:	e7e5      	b.n	8004d36 <__d2b+0x62>
 8004d6a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004d6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d72:	6038      	str	r0, [r7, #0]
 8004d74:	6918      	ldr	r0, [r3, #16]
 8004d76:	f7ff fd33 	bl	80047e0 <__hi0bits>
 8004d7a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004d7e:	6031      	str	r1, [r6, #0]
 8004d80:	e7e1      	b.n	8004d46 <__d2b+0x72>
 8004d82:	bf00      	nop
 8004d84:	0800596b 	.word	0x0800596b
 8004d88:	080059dc 	.word	0x080059dc

08004d8c <_calloc_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	fb02 f501 	mul.w	r5, r2, r1
 8004d92:	4629      	mov	r1, r5
 8004d94:	f000 f854 	bl	8004e40 <_malloc_r>
 8004d98:	4604      	mov	r4, r0
 8004d9a:	b118      	cbz	r0, 8004da4 <_calloc_r+0x18>
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f7fe f852 	bl	8002e48 <memset>
 8004da4:	4620      	mov	r0, r4
 8004da6:	bd38      	pop	{r3, r4, r5, pc}

08004da8 <_free_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	2900      	cmp	r1, #0
 8004dae:	d043      	beq.n	8004e38 <_free_r+0x90>
 8004db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db4:	1f0c      	subs	r4, r1, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfb8      	it	lt
 8004dba:	18e4      	addlt	r4, r4, r3
 8004dbc:	f000 fca2 	bl	8005704 <__malloc_lock>
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <_free_r+0x94>)
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	b933      	cbnz	r3, 8004dd6 <_free_r+0x2e>
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	6014      	str	r4, [r2, #0]
 8004dcc:	4628      	mov	r0, r5
 8004dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd2:	f000 bc9d 	b.w	8005710 <__malloc_unlock>
 8004dd6:	42a3      	cmp	r3, r4
 8004dd8:	d90a      	bls.n	8004df0 <_free_r+0x48>
 8004dda:	6821      	ldr	r1, [r4, #0]
 8004ddc:	1862      	adds	r2, r4, r1
 8004dde:	4293      	cmp	r3, r2
 8004de0:	bf01      	itttt	eq
 8004de2:	681a      	ldreq	r2, [r3, #0]
 8004de4:	685b      	ldreq	r3, [r3, #4]
 8004de6:	1852      	addeq	r2, r2, r1
 8004de8:	6022      	streq	r2, [r4, #0]
 8004dea:	6063      	str	r3, [r4, #4]
 8004dec:	6004      	str	r4, [r0, #0]
 8004dee:	e7ed      	b.n	8004dcc <_free_r+0x24>
 8004df0:	461a      	mov	r2, r3
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	b10b      	cbz	r3, 8004dfa <_free_r+0x52>
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	d9fa      	bls.n	8004df0 <_free_r+0x48>
 8004dfa:	6811      	ldr	r1, [r2, #0]
 8004dfc:	1850      	adds	r0, r2, r1
 8004dfe:	42a0      	cmp	r0, r4
 8004e00:	d10b      	bne.n	8004e1a <_free_r+0x72>
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	4401      	add	r1, r0
 8004e06:	1850      	adds	r0, r2, r1
 8004e08:	4283      	cmp	r3, r0
 8004e0a:	6011      	str	r1, [r2, #0]
 8004e0c:	d1de      	bne.n	8004dcc <_free_r+0x24>
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4401      	add	r1, r0
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	6053      	str	r3, [r2, #4]
 8004e18:	e7d8      	b.n	8004dcc <_free_r+0x24>
 8004e1a:	d902      	bls.n	8004e22 <_free_r+0x7a>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	602b      	str	r3, [r5, #0]
 8004e20:	e7d4      	b.n	8004dcc <_free_r+0x24>
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	1821      	adds	r1, r4, r0
 8004e26:	428b      	cmp	r3, r1
 8004e28:	bf01      	itttt	eq
 8004e2a:	6819      	ldreq	r1, [r3, #0]
 8004e2c:	685b      	ldreq	r3, [r3, #4]
 8004e2e:	1809      	addeq	r1, r1, r0
 8004e30:	6021      	streq	r1, [r4, #0]
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	6054      	str	r4, [r2, #4]
 8004e36:	e7c9      	b.n	8004dcc <_free_r+0x24>
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200001fc 	.word	0x200001fc

08004e40 <_malloc_r>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	1ccd      	adds	r5, r1, #3
 8004e44:	f025 0503 	bic.w	r5, r5, #3
 8004e48:	3508      	adds	r5, #8
 8004e4a:	2d0c      	cmp	r5, #12
 8004e4c:	bf38      	it	cc
 8004e4e:	250c      	movcc	r5, #12
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	4606      	mov	r6, r0
 8004e54:	db01      	blt.n	8004e5a <_malloc_r+0x1a>
 8004e56:	42a9      	cmp	r1, r5
 8004e58:	d903      	bls.n	8004e62 <_malloc_r+0x22>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	6033      	str	r3, [r6, #0]
 8004e5e:	2000      	movs	r0, #0
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e62:	f000 fc4f 	bl	8005704 <__malloc_lock>
 8004e66:	4921      	ldr	r1, [pc, #132]	; (8004eec <_malloc_r+0xac>)
 8004e68:	680a      	ldr	r2, [r1, #0]
 8004e6a:	4614      	mov	r4, r2
 8004e6c:	b99c      	cbnz	r4, 8004e96 <_malloc_r+0x56>
 8004e6e:	4f20      	ldr	r7, [pc, #128]	; (8004ef0 <_malloc_r+0xb0>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	b923      	cbnz	r3, 8004e7e <_malloc_r+0x3e>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4630      	mov	r0, r6
 8004e78:	f000 f994 	bl	80051a4 <_sbrk_r>
 8004e7c:	6038      	str	r0, [r7, #0]
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4630      	mov	r0, r6
 8004e82:	f000 f98f 	bl	80051a4 <_sbrk_r>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	d123      	bne.n	8004ed2 <_malloc_r+0x92>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	6033      	str	r3, [r6, #0]
 8004e90:	f000 fc3e 	bl	8005710 <__malloc_unlock>
 8004e94:	e7e3      	b.n	8004e5e <_malloc_r+0x1e>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	1b5b      	subs	r3, r3, r5
 8004e9a:	d417      	bmi.n	8004ecc <_malloc_r+0x8c>
 8004e9c:	2b0b      	cmp	r3, #11
 8004e9e:	d903      	bls.n	8004ea8 <_malloc_r+0x68>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	441c      	add	r4, r3
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	e004      	b.n	8004eb2 <_malloc_r+0x72>
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	42a2      	cmp	r2, r4
 8004eac:	bf0c      	ite	eq
 8004eae:	600b      	streq	r3, [r1, #0]
 8004eb0:	6053      	strne	r3, [r2, #4]
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f000 fc2c 	bl	8005710 <__malloc_unlock>
 8004eb8:	f104 000b 	add.w	r0, r4, #11
 8004ebc:	1d23      	adds	r3, r4, #4
 8004ebe:	f020 0007 	bic.w	r0, r0, #7
 8004ec2:	1ac2      	subs	r2, r0, r3
 8004ec4:	d0cc      	beq.n	8004e60 <_malloc_r+0x20>
 8004ec6:	1a1b      	subs	r3, r3, r0
 8004ec8:	50a3      	str	r3, [r4, r2]
 8004eca:	e7c9      	b.n	8004e60 <_malloc_r+0x20>
 8004ecc:	4622      	mov	r2, r4
 8004ece:	6864      	ldr	r4, [r4, #4]
 8004ed0:	e7cc      	b.n	8004e6c <_malloc_r+0x2c>
 8004ed2:	1cc4      	adds	r4, r0, #3
 8004ed4:	f024 0403 	bic.w	r4, r4, #3
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d0e3      	beq.n	8004ea4 <_malloc_r+0x64>
 8004edc:	1a21      	subs	r1, r4, r0
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f000 f960 	bl	80051a4 <_sbrk_r>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d1dd      	bne.n	8004ea4 <_malloc_r+0x64>
 8004ee8:	e7cf      	b.n	8004e8a <_malloc_r+0x4a>
 8004eea:	bf00      	nop
 8004eec:	200001fc 	.word	0x200001fc
 8004ef0:	20000200 	.word	0x20000200

08004ef4 <__sfputc_r>:
 8004ef4:	6893      	ldr	r3, [r2, #8]
 8004ef6:	b410      	push	{r4}
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	6093      	str	r3, [r2, #8]
 8004efe:	da07      	bge.n	8004f10 <__sfputc_r+0x1c>
 8004f00:	6994      	ldr	r4, [r2, #24]
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	db01      	blt.n	8004f0a <__sfputc_r+0x16>
 8004f06:	290a      	cmp	r1, #10
 8004f08:	d102      	bne.n	8004f10 <__sfputc_r+0x1c>
 8004f0a:	bc10      	pop	{r4}
 8004f0c:	f000 b99e 	b.w	800524c <__swbuf_r>
 8004f10:	6813      	ldr	r3, [r2, #0]
 8004f12:	1c58      	adds	r0, r3, #1
 8004f14:	6010      	str	r0, [r2, #0]
 8004f16:	7019      	strb	r1, [r3, #0]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	bc10      	pop	{r4}
 8004f1c:	4770      	bx	lr

08004f1e <__sfputs_r>:
 8004f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	4614      	mov	r4, r2
 8004f26:	18d5      	adds	r5, r2, r3
 8004f28:	42ac      	cmp	r4, r5
 8004f2a:	d101      	bne.n	8004f30 <__sfputs_r+0x12>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e007      	b.n	8004f40 <__sfputs_r+0x22>
 8004f30:	463a      	mov	r2, r7
 8004f32:	4630      	mov	r0, r6
 8004f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f38:	f7ff ffdc 	bl	8004ef4 <__sfputc_r>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d1f3      	bne.n	8004f28 <__sfputs_r+0xa>
 8004f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f44 <_vfiprintf_r>:
 8004f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	460d      	mov	r5, r1
 8004f4a:	4614      	mov	r4, r2
 8004f4c:	4698      	mov	r8, r3
 8004f4e:	4606      	mov	r6, r0
 8004f50:	b09d      	sub	sp, #116	; 0x74
 8004f52:	b118      	cbz	r0, 8004f5c <_vfiprintf_r+0x18>
 8004f54:	6983      	ldr	r3, [r0, #24]
 8004f56:	b90b      	cbnz	r3, 8004f5c <_vfiprintf_r+0x18>
 8004f58:	f7ff facc 	bl	80044f4 <__sinit>
 8004f5c:	4b89      	ldr	r3, [pc, #548]	; (8005184 <_vfiprintf_r+0x240>)
 8004f5e:	429d      	cmp	r5, r3
 8004f60:	d11b      	bne.n	8004f9a <_vfiprintf_r+0x56>
 8004f62:	6875      	ldr	r5, [r6, #4]
 8004f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f66:	07d9      	lsls	r1, r3, #31
 8004f68:	d405      	bmi.n	8004f76 <_vfiprintf_r+0x32>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	059a      	lsls	r2, r3, #22
 8004f6e:	d402      	bmi.n	8004f76 <_vfiprintf_r+0x32>
 8004f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f72:	f7ff fb62 	bl	800463a <__retarget_lock_acquire_recursive>
 8004f76:	89ab      	ldrh	r3, [r5, #12]
 8004f78:	071b      	lsls	r3, r3, #28
 8004f7a:	d501      	bpl.n	8004f80 <_vfiprintf_r+0x3c>
 8004f7c:	692b      	ldr	r3, [r5, #16]
 8004f7e:	b9eb      	cbnz	r3, 8004fbc <_vfiprintf_r+0x78>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f9c6 	bl	8005314 <__swsetup_r>
 8004f88:	b1c0      	cbz	r0, 8004fbc <_vfiprintf_r+0x78>
 8004f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f8c:	07dc      	lsls	r4, r3, #31
 8004f8e:	d50e      	bpl.n	8004fae <_vfiprintf_r+0x6a>
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f94:	b01d      	add	sp, #116	; 0x74
 8004f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9a:	4b7b      	ldr	r3, [pc, #492]	; (8005188 <_vfiprintf_r+0x244>)
 8004f9c:	429d      	cmp	r5, r3
 8004f9e:	d101      	bne.n	8004fa4 <_vfiprintf_r+0x60>
 8004fa0:	68b5      	ldr	r5, [r6, #8]
 8004fa2:	e7df      	b.n	8004f64 <_vfiprintf_r+0x20>
 8004fa4:	4b79      	ldr	r3, [pc, #484]	; (800518c <_vfiprintf_r+0x248>)
 8004fa6:	429d      	cmp	r5, r3
 8004fa8:	bf08      	it	eq
 8004faa:	68f5      	ldreq	r5, [r6, #12]
 8004fac:	e7da      	b.n	8004f64 <_vfiprintf_r+0x20>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	0598      	lsls	r0, r3, #22
 8004fb2:	d4ed      	bmi.n	8004f90 <_vfiprintf_r+0x4c>
 8004fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fb6:	f7ff fb41 	bl	800463c <__retarget_lock_release_recursive>
 8004fba:	e7e9      	b.n	8004f90 <_vfiprintf_r+0x4c>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc0:	2320      	movs	r3, #32
 8004fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc6:	2330      	movs	r3, #48	; 0x30
 8004fc8:	f04f 0901 	mov.w	r9, #1
 8004fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fd0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005190 <_vfiprintf_r+0x24c>
 8004fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fd8:	4623      	mov	r3, r4
 8004fda:	469a      	mov	sl, r3
 8004fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fe0:	b10a      	cbz	r2, 8004fe6 <_vfiprintf_r+0xa2>
 8004fe2:	2a25      	cmp	r2, #37	; 0x25
 8004fe4:	d1f9      	bne.n	8004fda <_vfiprintf_r+0x96>
 8004fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8004fea:	d00b      	beq.n	8005004 <_vfiprintf_r+0xc0>
 8004fec:	465b      	mov	r3, fp
 8004fee:	4622      	mov	r2, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7ff ff93 	bl	8004f1e <__sfputs_r>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	f000 80aa 	beq.w	8005152 <_vfiprintf_r+0x20e>
 8004ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005000:	445a      	add	r2, fp
 8005002:	9209      	str	r2, [sp, #36]	; 0x24
 8005004:	f89a 3000 	ldrb.w	r3, [sl]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80a2 	beq.w	8005152 <_vfiprintf_r+0x20e>
 800500e:	2300      	movs	r3, #0
 8005010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005018:	f10a 0a01 	add.w	sl, sl, #1
 800501c:	9304      	str	r3, [sp, #16]
 800501e:	9307      	str	r3, [sp, #28]
 8005020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005024:	931a      	str	r3, [sp, #104]	; 0x68
 8005026:	4654      	mov	r4, sl
 8005028:	2205      	movs	r2, #5
 800502a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502e:	4858      	ldr	r0, [pc, #352]	; (8005190 <_vfiprintf_r+0x24c>)
 8005030:	f7ff fb0e 	bl	8004650 <memchr>
 8005034:	9a04      	ldr	r2, [sp, #16]
 8005036:	b9d8      	cbnz	r0, 8005070 <_vfiprintf_r+0x12c>
 8005038:	06d1      	lsls	r1, r2, #27
 800503a:	bf44      	itt	mi
 800503c:	2320      	movmi	r3, #32
 800503e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005042:	0713      	lsls	r3, r2, #28
 8005044:	bf44      	itt	mi
 8005046:	232b      	movmi	r3, #43	; 0x2b
 8005048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800504c:	f89a 3000 	ldrb.w	r3, [sl]
 8005050:	2b2a      	cmp	r3, #42	; 0x2a
 8005052:	d015      	beq.n	8005080 <_vfiprintf_r+0x13c>
 8005054:	4654      	mov	r4, sl
 8005056:	2000      	movs	r0, #0
 8005058:	f04f 0c0a 	mov.w	ip, #10
 800505c:	9a07      	ldr	r2, [sp, #28]
 800505e:	4621      	mov	r1, r4
 8005060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005064:	3b30      	subs	r3, #48	; 0x30
 8005066:	2b09      	cmp	r3, #9
 8005068:	d94e      	bls.n	8005108 <_vfiprintf_r+0x1c4>
 800506a:	b1b0      	cbz	r0, 800509a <_vfiprintf_r+0x156>
 800506c:	9207      	str	r2, [sp, #28]
 800506e:	e014      	b.n	800509a <_vfiprintf_r+0x156>
 8005070:	eba0 0308 	sub.w	r3, r0, r8
 8005074:	fa09 f303 	lsl.w	r3, r9, r3
 8005078:	4313      	orrs	r3, r2
 800507a:	46a2      	mov	sl, r4
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	e7d2      	b.n	8005026 <_vfiprintf_r+0xe2>
 8005080:	9b03      	ldr	r3, [sp, #12]
 8005082:	1d19      	adds	r1, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	9103      	str	r1, [sp, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	bfbb      	ittet	lt
 800508c:	425b      	neglt	r3, r3
 800508e:	f042 0202 	orrlt.w	r2, r2, #2
 8005092:	9307      	strge	r3, [sp, #28]
 8005094:	9307      	strlt	r3, [sp, #28]
 8005096:	bfb8      	it	lt
 8005098:	9204      	strlt	r2, [sp, #16]
 800509a:	7823      	ldrb	r3, [r4, #0]
 800509c:	2b2e      	cmp	r3, #46	; 0x2e
 800509e:	d10c      	bne.n	80050ba <_vfiprintf_r+0x176>
 80050a0:	7863      	ldrb	r3, [r4, #1]
 80050a2:	2b2a      	cmp	r3, #42	; 0x2a
 80050a4:	d135      	bne.n	8005112 <_vfiprintf_r+0x1ce>
 80050a6:	9b03      	ldr	r3, [sp, #12]
 80050a8:	3402      	adds	r4, #2
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	9203      	str	r2, [sp, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bfb8      	it	lt
 80050b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050b8:	9305      	str	r3, [sp, #20]
 80050ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051a0 <_vfiprintf_r+0x25c>
 80050be:	2203      	movs	r2, #3
 80050c0:	4650      	mov	r0, sl
 80050c2:	7821      	ldrb	r1, [r4, #0]
 80050c4:	f7ff fac4 	bl	8004650 <memchr>
 80050c8:	b140      	cbz	r0, 80050dc <_vfiprintf_r+0x198>
 80050ca:	2340      	movs	r3, #64	; 0x40
 80050cc:	eba0 000a 	sub.w	r0, r0, sl
 80050d0:	fa03 f000 	lsl.w	r0, r3, r0
 80050d4:	9b04      	ldr	r3, [sp, #16]
 80050d6:	3401      	adds	r4, #1
 80050d8:	4303      	orrs	r3, r0
 80050da:	9304      	str	r3, [sp, #16]
 80050dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e0:	2206      	movs	r2, #6
 80050e2:	482c      	ldr	r0, [pc, #176]	; (8005194 <_vfiprintf_r+0x250>)
 80050e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e8:	f7ff fab2 	bl	8004650 <memchr>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d03f      	beq.n	8005170 <_vfiprintf_r+0x22c>
 80050f0:	4b29      	ldr	r3, [pc, #164]	; (8005198 <_vfiprintf_r+0x254>)
 80050f2:	bb1b      	cbnz	r3, 800513c <_vfiprintf_r+0x1f8>
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	3307      	adds	r3, #7
 80050f8:	f023 0307 	bic.w	r3, r3, #7
 80050fc:	3308      	adds	r3, #8
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005102:	443b      	add	r3, r7
 8005104:	9309      	str	r3, [sp, #36]	; 0x24
 8005106:	e767      	b.n	8004fd8 <_vfiprintf_r+0x94>
 8005108:	460c      	mov	r4, r1
 800510a:	2001      	movs	r0, #1
 800510c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005110:	e7a5      	b.n	800505e <_vfiprintf_r+0x11a>
 8005112:	2300      	movs	r3, #0
 8005114:	f04f 0c0a 	mov.w	ip, #10
 8005118:	4619      	mov	r1, r3
 800511a:	3401      	adds	r4, #1
 800511c:	9305      	str	r3, [sp, #20]
 800511e:	4620      	mov	r0, r4
 8005120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005124:	3a30      	subs	r2, #48	; 0x30
 8005126:	2a09      	cmp	r2, #9
 8005128:	d903      	bls.n	8005132 <_vfiprintf_r+0x1ee>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0c5      	beq.n	80050ba <_vfiprintf_r+0x176>
 800512e:	9105      	str	r1, [sp, #20]
 8005130:	e7c3      	b.n	80050ba <_vfiprintf_r+0x176>
 8005132:	4604      	mov	r4, r0
 8005134:	2301      	movs	r3, #1
 8005136:	fb0c 2101 	mla	r1, ip, r1, r2
 800513a:	e7f0      	b.n	800511e <_vfiprintf_r+0x1da>
 800513c:	ab03      	add	r3, sp, #12
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	462a      	mov	r2, r5
 8005142:	4630      	mov	r0, r6
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <_vfiprintf_r+0x258>)
 8005146:	a904      	add	r1, sp, #16
 8005148:	f7fd ff24 	bl	8002f94 <_printf_float>
 800514c:	4607      	mov	r7, r0
 800514e:	1c78      	adds	r0, r7, #1
 8005150:	d1d6      	bne.n	8005100 <_vfiprintf_r+0x1bc>
 8005152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005154:	07d9      	lsls	r1, r3, #31
 8005156:	d405      	bmi.n	8005164 <_vfiprintf_r+0x220>
 8005158:	89ab      	ldrh	r3, [r5, #12]
 800515a:	059a      	lsls	r2, r3, #22
 800515c:	d402      	bmi.n	8005164 <_vfiprintf_r+0x220>
 800515e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005160:	f7ff fa6c 	bl	800463c <__retarget_lock_release_recursive>
 8005164:	89ab      	ldrh	r3, [r5, #12]
 8005166:	065b      	lsls	r3, r3, #25
 8005168:	f53f af12 	bmi.w	8004f90 <_vfiprintf_r+0x4c>
 800516c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800516e:	e711      	b.n	8004f94 <_vfiprintf_r+0x50>
 8005170:	ab03      	add	r3, sp, #12
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	462a      	mov	r2, r5
 8005176:	4630      	mov	r0, r6
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <_vfiprintf_r+0x258>)
 800517a:	a904      	add	r1, sp, #16
 800517c:	f7fe f9a6 	bl	80034cc <_printf_i>
 8005180:	e7e4      	b.n	800514c <_vfiprintf_r+0x208>
 8005182:	bf00      	nop
 8005184:	0800599c 	.word	0x0800599c
 8005188:	080059bc 	.word	0x080059bc
 800518c:	0800597c 	.word	0x0800597c
 8005190:	08005b3c 	.word	0x08005b3c
 8005194:	08005b46 	.word	0x08005b46
 8005198:	08002f95 	.word	0x08002f95
 800519c:	08004f1f 	.word	0x08004f1f
 80051a0:	08005b42 	.word	0x08005b42

080051a4 <_sbrk_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	2300      	movs	r3, #0
 80051a8:	4d05      	ldr	r5, [pc, #20]	; (80051c0 <_sbrk_r+0x1c>)
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fc f82c 	bl	800120c <_sbrk>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_sbrk_r+0x1a>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_sbrk_r+0x1a>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000258 	.word	0x20000258

080051c4 <__sread>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	460c      	mov	r4, r1
 80051c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051cc:	f000 faa6 	bl	800571c <_read_r>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	bfab      	itete	ge
 80051d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051d6:	89a3      	ldrhlt	r3, [r4, #12]
 80051d8:	181b      	addge	r3, r3, r0
 80051da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051de:	bfac      	ite	ge
 80051e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80051e2:	81a3      	strhlt	r3, [r4, #12]
 80051e4:	bd10      	pop	{r4, pc}

080051e6 <__swrite>:
 80051e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ea:	461f      	mov	r7, r3
 80051ec:	898b      	ldrh	r3, [r1, #12]
 80051ee:	4605      	mov	r5, r0
 80051f0:	05db      	lsls	r3, r3, #23
 80051f2:	460c      	mov	r4, r1
 80051f4:	4616      	mov	r6, r2
 80051f6:	d505      	bpl.n	8005204 <__swrite+0x1e>
 80051f8:	2302      	movs	r3, #2
 80051fa:	2200      	movs	r2, #0
 80051fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005200:	f000 f9f8 	bl	80055f4 <_lseek_r>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	4632      	mov	r2, r6
 8005208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	4628      	mov	r0, r5
 8005210:	463b      	mov	r3, r7
 8005212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	f000 b869 	b.w	80052f0 <_write_r>

0800521e <__sseek>:
 800521e:	b510      	push	{r4, lr}
 8005220:	460c      	mov	r4, r1
 8005222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005226:	f000 f9e5 	bl	80055f4 <_lseek_r>
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	bf15      	itete	ne
 8005230:	6560      	strne	r0, [r4, #84]	; 0x54
 8005232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800523a:	81a3      	strheq	r3, [r4, #12]
 800523c:	bf18      	it	ne
 800523e:	81a3      	strhne	r3, [r4, #12]
 8005240:	bd10      	pop	{r4, pc}

08005242 <__sclose>:
 8005242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005246:	f000 b8f1 	b.w	800542c <_close_r>
	...

0800524c <__swbuf_r>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	460e      	mov	r6, r1
 8005250:	4614      	mov	r4, r2
 8005252:	4605      	mov	r5, r0
 8005254:	b118      	cbz	r0, 800525e <__swbuf_r+0x12>
 8005256:	6983      	ldr	r3, [r0, #24]
 8005258:	b90b      	cbnz	r3, 800525e <__swbuf_r+0x12>
 800525a:	f7ff f94b 	bl	80044f4 <__sinit>
 800525e:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <__swbuf_r+0x98>)
 8005260:	429c      	cmp	r4, r3
 8005262:	d12b      	bne.n	80052bc <__swbuf_r+0x70>
 8005264:	686c      	ldr	r4, [r5, #4]
 8005266:	69a3      	ldr	r3, [r4, #24]
 8005268:	60a3      	str	r3, [r4, #8]
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	071a      	lsls	r2, r3, #28
 800526e:	d52f      	bpl.n	80052d0 <__swbuf_r+0x84>
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	b36b      	cbz	r3, 80052d0 <__swbuf_r+0x84>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	6820      	ldr	r0, [r4, #0]
 8005278:	b2f6      	uxtb	r6, r6
 800527a:	1ac0      	subs	r0, r0, r3
 800527c:	6963      	ldr	r3, [r4, #20]
 800527e:	4637      	mov	r7, r6
 8005280:	4283      	cmp	r3, r0
 8005282:	dc04      	bgt.n	800528e <__swbuf_r+0x42>
 8005284:	4621      	mov	r1, r4
 8005286:	4628      	mov	r0, r5
 8005288:	f000 f966 	bl	8005558 <_fflush_r>
 800528c:	bb30      	cbnz	r0, 80052dc <__swbuf_r+0x90>
 800528e:	68a3      	ldr	r3, [r4, #8]
 8005290:	3001      	adds	r0, #1
 8005292:	3b01      	subs	r3, #1
 8005294:	60a3      	str	r3, [r4, #8]
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	6022      	str	r2, [r4, #0]
 800529c:	701e      	strb	r6, [r3, #0]
 800529e:	6963      	ldr	r3, [r4, #20]
 80052a0:	4283      	cmp	r3, r0
 80052a2:	d004      	beq.n	80052ae <__swbuf_r+0x62>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	07db      	lsls	r3, r3, #31
 80052a8:	d506      	bpl.n	80052b8 <__swbuf_r+0x6c>
 80052aa:	2e0a      	cmp	r6, #10
 80052ac:	d104      	bne.n	80052b8 <__swbuf_r+0x6c>
 80052ae:	4621      	mov	r1, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f951 	bl	8005558 <_fflush_r>
 80052b6:	b988      	cbnz	r0, 80052dc <__swbuf_r+0x90>
 80052b8:	4638      	mov	r0, r7
 80052ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <__swbuf_r+0x9c>)
 80052be:	429c      	cmp	r4, r3
 80052c0:	d101      	bne.n	80052c6 <__swbuf_r+0x7a>
 80052c2:	68ac      	ldr	r4, [r5, #8]
 80052c4:	e7cf      	b.n	8005266 <__swbuf_r+0x1a>
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <__swbuf_r+0xa0>)
 80052c8:	429c      	cmp	r4, r3
 80052ca:	bf08      	it	eq
 80052cc:	68ec      	ldreq	r4, [r5, #12]
 80052ce:	e7ca      	b.n	8005266 <__swbuf_r+0x1a>
 80052d0:	4621      	mov	r1, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f81e 	bl	8005314 <__swsetup_r>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d0cb      	beq.n	8005274 <__swbuf_r+0x28>
 80052dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052e0:	e7ea      	b.n	80052b8 <__swbuf_r+0x6c>
 80052e2:	bf00      	nop
 80052e4:	0800599c 	.word	0x0800599c
 80052e8:	080059bc 	.word	0x080059bc
 80052ec:	0800597c 	.word	0x0800597c

080052f0 <_write_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	2200      	movs	r2, #0
 80052fa:	4d05      	ldr	r5, [pc, #20]	; (8005310 <_write_r+0x20>)
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fb fe1e 	bl	8000f40 <_write>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_write_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_write_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20000258 	.word	0x20000258

08005314 <__swsetup_r>:
 8005314:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <__swsetup_r+0xcc>)
 8005316:	b570      	push	{r4, r5, r6, lr}
 8005318:	681d      	ldr	r5, [r3, #0]
 800531a:	4606      	mov	r6, r0
 800531c:	460c      	mov	r4, r1
 800531e:	b125      	cbz	r5, 800532a <__swsetup_r+0x16>
 8005320:	69ab      	ldr	r3, [r5, #24]
 8005322:	b913      	cbnz	r3, 800532a <__swsetup_r+0x16>
 8005324:	4628      	mov	r0, r5
 8005326:	f7ff f8e5 	bl	80044f4 <__sinit>
 800532a:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <__swsetup_r+0xd0>)
 800532c:	429c      	cmp	r4, r3
 800532e:	d10f      	bne.n	8005350 <__swsetup_r+0x3c>
 8005330:	686c      	ldr	r4, [r5, #4]
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005338:	0719      	lsls	r1, r3, #28
 800533a:	d42c      	bmi.n	8005396 <__swsetup_r+0x82>
 800533c:	06dd      	lsls	r5, r3, #27
 800533e:	d411      	bmi.n	8005364 <__swsetup_r+0x50>
 8005340:	2309      	movs	r3, #9
 8005342:	6033      	str	r3, [r6, #0]
 8005344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e03e      	b.n	80053ce <__swsetup_r+0xba>
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <__swsetup_r+0xd4>)
 8005352:	429c      	cmp	r4, r3
 8005354:	d101      	bne.n	800535a <__swsetup_r+0x46>
 8005356:	68ac      	ldr	r4, [r5, #8]
 8005358:	e7eb      	b.n	8005332 <__swsetup_r+0x1e>
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <__swsetup_r+0xd8>)
 800535c:	429c      	cmp	r4, r3
 800535e:	bf08      	it	eq
 8005360:	68ec      	ldreq	r4, [r5, #12]
 8005362:	e7e6      	b.n	8005332 <__swsetup_r+0x1e>
 8005364:	0758      	lsls	r0, r3, #29
 8005366:	d512      	bpl.n	800538e <__swsetup_r+0x7a>
 8005368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800536a:	b141      	cbz	r1, 800537e <__swsetup_r+0x6a>
 800536c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005370:	4299      	cmp	r1, r3
 8005372:	d002      	beq.n	800537a <__swsetup_r+0x66>
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff fd17 	bl	8004da8 <_free_r>
 800537a:	2300      	movs	r3, #0
 800537c:	6363      	str	r3, [r4, #52]	; 0x34
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	b94b      	cbnz	r3, 80053ae <__swsetup_r+0x9a>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a4:	d003      	beq.n	80053ae <__swsetup_r+0x9a>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 f959 	bl	8005660 <__smakebuf_r>
 80053ae:	89a0      	ldrh	r0, [r4, #12]
 80053b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053b4:	f010 0301 	ands.w	r3, r0, #1
 80053b8:	d00a      	beq.n	80053d0 <__swsetup_r+0xbc>
 80053ba:	2300      	movs	r3, #0
 80053bc:	60a3      	str	r3, [r4, #8]
 80053be:	6963      	ldr	r3, [r4, #20]
 80053c0:	425b      	negs	r3, r3
 80053c2:	61a3      	str	r3, [r4, #24]
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	b943      	cbnz	r3, 80053da <__swsetup_r+0xc6>
 80053c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053cc:	d1ba      	bne.n	8005344 <__swsetup_r+0x30>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	0781      	lsls	r1, r0, #30
 80053d2:	bf58      	it	pl
 80053d4:	6963      	ldrpl	r3, [r4, #20]
 80053d6:	60a3      	str	r3, [r4, #8]
 80053d8:	e7f4      	b.n	80053c4 <__swsetup_r+0xb0>
 80053da:	2000      	movs	r0, #0
 80053dc:	e7f7      	b.n	80053ce <__swsetup_r+0xba>
 80053de:	bf00      	nop
 80053e0:	2000000c 	.word	0x2000000c
 80053e4:	0800599c 	.word	0x0800599c
 80053e8:	080059bc 	.word	0x080059bc
 80053ec:	0800597c 	.word	0x0800597c

080053f0 <__assert_func>:
 80053f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053f2:	4614      	mov	r4, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <__assert_func+0x2c>)
 80053f8:	4605      	mov	r5, r0
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68d8      	ldr	r0, [r3, #12]
 80053fe:	b14c      	cbz	r4, 8005414 <__assert_func+0x24>
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <__assert_func+0x30>)
 8005402:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005406:	9100      	str	r1, [sp, #0]
 8005408:	462b      	mov	r3, r5
 800540a:	4906      	ldr	r1, [pc, #24]	; (8005424 <__assert_func+0x34>)
 800540c:	f000 f8e0 	bl	80055d0 <fiprintf>
 8005410:	f000 f9a3 	bl	800575a <abort>
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <__assert_func+0x38>)
 8005416:	461c      	mov	r4, r3
 8005418:	e7f3      	b.n	8005402 <__assert_func+0x12>
 800541a:	bf00      	nop
 800541c:	2000000c 	.word	0x2000000c
 8005420:	08005b4d 	.word	0x08005b4d
 8005424:	08005b5a 	.word	0x08005b5a
 8005428:	08005b88 	.word	0x08005b88

0800542c <_close_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	2300      	movs	r3, #0
 8005430:	4d05      	ldr	r5, [pc, #20]	; (8005448 <_close_r+0x1c>)
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	f7fb feb7 	bl	80011aa <_close>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_close_r+0x1a>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_close_r+0x1a>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20000258 	.word	0x20000258

0800544c <__sflush_r>:
 800544c:	898a      	ldrh	r2, [r1, #12]
 800544e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	4605      	mov	r5, r0
 8005454:	0710      	lsls	r0, r2, #28
 8005456:	460c      	mov	r4, r1
 8005458:	d458      	bmi.n	800550c <__sflush_r+0xc0>
 800545a:	684b      	ldr	r3, [r1, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dc05      	bgt.n	800546c <__sflush_r+0x20>
 8005460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	dc02      	bgt.n	800546c <__sflush_r+0x20>
 8005466:	2000      	movs	r0, #0
 8005468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546e:	2e00      	cmp	r6, #0
 8005470:	d0f9      	beq.n	8005466 <__sflush_r+0x1a>
 8005472:	2300      	movs	r3, #0
 8005474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005478:	682f      	ldr	r7, [r5, #0]
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	d032      	beq.n	80054e4 <__sflush_r+0x98>
 800547e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	075a      	lsls	r2, r3, #29
 8005484:	d505      	bpl.n	8005492 <__sflush_r+0x46>
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	1ac0      	subs	r0, r0, r3
 800548a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800548c:	b10b      	cbz	r3, 8005492 <__sflush_r+0x46>
 800548e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005490:	1ac0      	subs	r0, r0, r3
 8005492:	2300      	movs	r3, #0
 8005494:	4602      	mov	r2, r0
 8005496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005498:	4628      	mov	r0, r5
 800549a:	6a21      	ldr	r1, [r4, #32]
 800549c:	47b0      	blx	r6
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	d106      	bne.n	80054b2 <__sflush_r+0x66>
 80054a4:	6829      	ldr	r1, [r5, #0]
 80054a6:	291d      	cmp	r1, #29
 80054a8:	d82c      	bhi.n	8005504 <__sflush_r+0xb8>
 80054aa:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <__sflush_r+0x108>)
 80054ac:	40ca      	lsrs	r2, r1
 80054ae:	07d6      	lsls	r6, r2, #31
 80054b0:	d528      	bpl.n	8005504 <__sflush_r+0xb8>
 80054b2:	2200      	movs	r2, #0
 80054b4:	6062      	str	r2, [r4, #4]
 80054b6:	6922      	ldr	r2, [r4, #16]
 80054b8:	04d9      	lsls	r1, r3, #19
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	d504      	bpl.n	80054c8 <__sflush_r+0x7c>
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	d101      	bne.n	80054c6 <__sflush_r+0x7a>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b903      	cbnz	r3, 80054c8 <__sflush_r+0x7c>
 80054c6:	6560      	str	r0, [r4, #84]	; 0x54
 80054c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ca:	602f      	str	r7, [r5, #0]
 80054cc:	2900      	cmp	r1, #0
 80054ce:	d0ca      	beq.n	8005466 <__sflush_r+0x1a>
 80054d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d002      	beq.n	80054de <__sflush_r+0x92>
 80054d8:	4628      	mov	r0, r5
 80054da:	f7ff fc65 	bl	8004da8 <_free_r>
 80054de:	2000      	movs	r0, #0
 80054e0:	6360      	str	r0, [r4, #52]	; 0x34
 80054e2:	e7c1      	b.n	8005468 <__sflush_r+0x1c>
 80054e4:	6a21      	ldr	r1, [r4, #32]
 80054e6:	2301      	movs	r3, #1
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b0      	blx	r6
 80054ec:	1c41      	adds	r1, r0, #1
 80054ee:	d1c7      	bne.n	8005480 <__sflush_r+0x34>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c4      	beq.n	8005480 <__sflush_r+0x34>
 80054f6:	2b1d      	cmp	r3, #29
 80054f8:	d001      	beq.n	80054fe <__sflush_r+0xb2>
 80054fa:	2b16      	cmp	r3, #22
 80054fc:	d101      	bne.n	8005502 <__sflush_r+0xb6>
 80054fe:	602f      	str	r7, [r5, #0]
 8005500:	e7b1      	b.n	8005466 <__sflush_r+0x1a>
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	e7ad      	b.n	8005468 <__sflush_r+0x1c>
 800550c:	690f      	ldr	r7, [r1, #16]
 800550e:	2f00      	cmp	r7, #0
 8005510:	d0a9      	beq.n	8005466 <__sflush_r+0x1a>
 8005512:	0793      	lsls	r3, r2, #30
 8005514:	bf18      	it	ne
 8005516:	2300      	movne	r3, #0
 8005518:	680e      	ldr	r6, [r1, #0]
 800551a:	bf08      	it	eq
 800551c:	694b      	ldreq	r3, [r1, #20]
 800551e:	eba6 0807 	sub.w	r8, r6, r7
 8005522:	600f      	str	r7, [r1, #0]
 8005524:	608b      	str	r3, [r1, #8]
 8005526:	f1b8 0f00 	cmp.w	r8, #0
 800552a:	dd9c      	ble.n	8005466 <__sflush_r+0x1a>
 800552c:	4643      	mov	r3, r8
 800552e:	463a      	mov	r2, r7
 8005530:	4628      	mov	r0, r5
 8005532:	6a21      	ldr	r1, [r4, #32]
 8005534:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005536:	47b0      	blx	r6
 8005538:	2800      	cmp	r0, #0
 800553a:	dc06      	bgt.n	800554a <__sflush_r+0xfe>
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	e78e      	b.n	8005468 <__sflush_r+0x1c>
 800554a:	4407      	add	r7, r0
 800554c:	eba8 0800 	sub.w	r8, r8, r0
 8005550:	e7e9      	b.n	8005526 <__sflush_r+0xda>
 8005552:	bf00      	nop
 8005554:	20400001 	.word	0x20400001

08005558 <_fflush_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b913      	cbnz	r3, 8005568 <_fflush_r+0x10>
 8005562:	2500      	movs	r5, #0
 8005564:	4628      	mov	r0, r5
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	b118      	cbz	r0, 8005572 <_fflush_r+0x1a>
 800556a:	6983      	ldr	r3, [r0, #24]
 800556c:	b90b      	cbnz	r3, 8005572 <_fflush_r+0x1a>
 800556e:	f7fe ffc1 	bl	80044f4 <__sinit>
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <_fflush_r+0x6c>)
 8005574:	429c      	cmp	r4, r3
 8005576:	d11b      	bne.n	80055b0 <_fflush_r+0x58>
 8005578:	686c      	ldr	r4, [r5, #4]
 800557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <_fflush_r+0xa>
 8005582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005584:	07d0      	lsls	r0, r2, #31
 8005586:	d404      	bmi.n	8005592 <_fflush_r+0x3a>
 8005588:	0599      	lsls	r1, r3, #22
 800558a:	d402      	bmi.n	8005592 <_fflush_r+0x3a>
 800558c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558e:	f7ff f854 	bl	800463a <__retarget_lock_acquire_recursive>
 8005592:	4628      	mov	r0, r5
 8005594:	4621      	mov	r1, r4
 8005596:	f7ff ff59 	bl	800544c <__sflush_r>
 800559a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800559c:	4605      	mov	r5, r0
 800559e:	07da      	lsls	r2, r3, #31
 80055a0:	d4e0      	bmi.n	8005564 <_fflush_r+0xc>
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	059b      	lsls	r3, r3, #22
 80055a6:	d4dd      	bmi.n	8005564 <_fflush_r+0xc>
 80055a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055aa:	f7ff f847 	bl	800463c <__retarget_lock_release_recursive>
 80055ae:	e7d9      	b.n	8005564 <_fflush_r+0xc>
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <_fflush_r+0x70>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	d101      	bne.n	80055ba <_fflush_r+0x62>
 80055b6:	68ac      	ldr	r4, [r5, #8]
 80055b8:	e7df      	b.n	800557a <_fflush_r+0x22>
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <_fflush_r+0x74>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	bf08      	it	eq
 80055c0:	68ec      	ldreq	r4, [r5, #12]
 80055c2:	e7da      	b.n	800557a <_fflush_r+0x22>
 80055c4:	0800599c 	.word	0x0800599c
 80055c8:	080059bc 	.word	0x080059bc
 80055cc:	0800597c 	.word	0x0800597c

080055d0 <fiprintf>:
 80055d0:	b40e      	push	{r1, r2, r3}
 80055d2:	b503      	push	{r0, r1, lr}
 80055d4:	4601      	mov	r1, r0
 80055d6:	ab03      	add	r3, sp, #12
 80055d8:	4805      	ldr	r0, [pc, #20]	; (80055f0 <fiprintf+0x20>)
 80055da:	f853 2b04 	ldr.w	r2, [r3], #4
 80055de:	6800      	ldr	r0, [r0, #0]
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	f7ff fcaf 	bl	8004f44 <_vfiprintf_r>
 80055e6:	b002      	add	sp, #8
 80055e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055ec:	b003      	add	sp, #12
 80055ee:	4770      	bx	lr
 80055f0:	2000000c 	.word	0x2000000c

080055f4 <_lseek_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	2200      	movs	r2, #0
 80055fe:	4d05      	ldr	r5, [pc, #20]	; (8005614 <_lseek_r+0x20>)
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb fdf5 	bl	80011f2 <_lseek>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_lseek_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_lseek_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000258 	.word	0x20000258

08005618 <__swhatbuf_r>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	460e      	mov	r6, r1
 800561c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005620:	4614      	mov	r4, r2
 8005622:	2900      	cmp	r1, #0
 8005624:	461d      	mov	r5, r3
 8005626:	b096      	sub	sp, #88	; 0x58
 8005628:	da07      	bge.n	800563a <__swhatbuf_r+0x22>
 800562a:	2300      	movs	r3, #0
 800562c:	602b      	str	r3, [r5, #0]
 800562e:	89b3      	ldrh	r3, [r6, #12]
 8005630:	061a      	lsls	r2, r3, #24
 8005632:	d410      	bmi.n	8005656 <__swhatbuf_r+0x3e>
 8005634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005638:	e00e      	b.n	8005658 <__swhatbuf_r+0x40>
 800563a:	466a      	mov	r2, sp
 800563c:	f000 f894 	bl	8005768 <_fstat_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	dbf2      	blt.n	800562a <__swhatbuf_r+0x12>
 8005644:	9a01      	ldr	r2, [sp, #4]
 8005646:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800564a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800564e:	425a      	negs	r2, r3
 8005650:	415a      	adcs	r2, r3
 8005652:	602a      	str	r2, [r5, #0]
 8005654:	e7ee      	b.n	8005634 <__swhatbuf_r+0x1c>
 8005656:	2340      	movs	r3, #64	; 0x40
 8005658:	2000      	movs	r0, #0
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	b016      	add	sp, #88	; 0x58
 800565e:	bd70      	pop	{r4, r5, r6, pc}

08005660 <__smakebuf_r>:
 8005660:	898b      	ldrh	r3, [r1, #12]
 8005662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005664:	079d      	lsls	r5, r3, #30
 8005666:	4606      	mov	r6, r0
 8005668:	460c      	mov	r4, r1
 800566a:	d507      	bpl.n	800567c <__smakebuf_r+0x1c>
 800566c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	2301      	movs	r3, #1
 8005676:	6163      	str	r3, [r4, #20]
 8005678:	b002      	add	sp, #8
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	466a      	mov	r2, sp
 800567e:	ab01      	add	r3, sp, #4
 8005680:	f7ff ffca 	bl	8005618 <__swhatbuf_r>
 8005684:	9900      	ldr	r1, [sp, #0]
 8005686:	4605      	mov	r5, r0
 8005688:	4630      	mov	r0, r6
 800568a:	f7ff fbd9 	bl	8004e40 <_malloc_r>
 800568e:	b948      	cbnz	r0, 80056a4 <__smakebuf_r+0x44>
 8005690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005694:	059a      	lsls	r2, r3, #22
 8005696:	d4ef      	bmi.n	8005678 <__smakebuf_r+0x18>
 8005698:	f023 0303 	bic.w	r3, r3, #3
 800569c:	f043 0302 	orr.w	r3, r3, #2
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	e7e3      	b.n	800566c <__smakebuf_r+0xc>
 80056a4:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <__smakebuf_r+0x7c>)
 80056a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	6020      	str	r0, [r4, #0]
 80056ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	9b00      	ldr	r3, [sp, #0]
 80056b4:	6120      	str	r0, [r4, #16]
 80056b6:	6163      	str	r3, [r4, #20]
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	b15b      	cbz	r3, 80056d4 <__smakebuf_r+0x74>
 80056bc:	4630      	mov	r0, r6
 80056be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056c2:	f000 f863 	bl	800578c <_isatty_r>
 80056c6:	b128      	cbz	r0, 80056d4 <__smakebuf_r+0x74>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	89a0      	ldrh	r0, [r4, #12]
 80056d6:	4305      	orrs	r5, r0
 80056d8:	81a5      	strh	r5, [r4, #12]
 80056da:	e7cd      	b.n	8005678 <__smakebuf_r+0x18>
 80056dc:	0800448d 	.word	0x0800448d

080056e0 <__ascii_mbtowc>:
 80056e0:	b082      	sub	sp, #8
 80056e2:	b901      	cbnz	r1, 80056e6 <__ascii_mbtowc+0x6>
 80056e4:	a901      	add	r1, sp, #4
 80056e6:	b142      	cbz	r2, 80056fa <__ascii_mbtowc+0x1a>
 80056e8:	b14b      	cbz	r3, 80056fe <__ascii_mbtowc+0x1e>
 80056ea:	7813      	ldrb	r3, [r2, #0]
 80056ec:	600b      	str	r3, [r1, #0]
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	1e10      	subs	r0, r2, #0
 80056f2:	bf18      	it	ne
 80056f4:	2001      	movne	r0, #1
 80056f6:	b002      	add	sp, #8
 80056f8:	4770      	bx	lr
 80056fa:	4610      	mov	r0, r2
 80056fc:	e7fb      	b.n	80056f6 <__ascii_mbtowc+0x16>
 80056fe:	f06f 0001 	mvn.w	r0, #1
 8005702:	e7f8      	b.n	80056f6 <__ascii_mbtowc+0x16>

08005704 <__malloc_lock>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__malloc_lock+0x8>)
 8005706:	f7fe bf98 	b.w	800463a <__retarget_lock_acquire_recursive>
 800570a:	bf00      	nop
 800570c:	20000250 	.word	0x20000250

08005710 <__malloc_unlock>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__malloc_unlock+0x8>)
 8005712:	f7fe bf93 	b.w	800463c <__retarget_lock_release_recursive>
 8005716:	bf00      	nop
 8005718:	20000250 	.word	0x20000250

0800571c <_read_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	2200      	movs	r2, #0
 8005726:	4d05      	ldr	r5, [pc, #20]	; (800573c <_read_r+0x20>)
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	f7fb fd20 	bl	8001170 <_read>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_read_r+0x1e>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_read_r+0x1e>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	20000258 	.word	0x20000258

08005740 <__ascii_wctomb>:
 8005740:	4603      	mov	r3, r0
 8005742:	4608      	mov	r0, r1
 8005744:	b141      	cbz	r1, 8005758 <__ascii_wctomb+0x18>
 8005746:	2aff      	cmp	r2, #255	; 0xff
 8005748:	d904      	bls.n	8005754 <__ascii_wctomb+0x14>
 800574a:	228a      	movs	r2, #138	; 0x8a
 800574c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	4770      	bx	lr
 8005754:	2001      	movs	r0, #1
 8005756:	700a      	strb	r2, [r1, #0]
 8005758:	4770      	bx	lr

0800575a <abort>:
 800575a:	2006      	movs	r0, #6
 800575c:	b508      	push	{r3, lr}
 800575e:	f000 f84d 	bl	80057fc <raise>
 8005762:	2001      	movs	r0, #1
 8005764:	f7fb fcfa 	bl	800115c <_exit>

08005768 <_fstat_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	2300      	movs	r3, #0
 800576c:	4d06      	ldr	r5, [pc, #24]	; (8005788 <_fstat_r+0x20>)
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	f7fb fd23 	bl	80011c0 <_fstat>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d102      	bne.n	8005784 <_fstat_r+0x1c>
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	b103      	cbz	r3, 8005784 <_fstat_r+0x1c>
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	bd38      	pop	{r3, r4, r5, pc}
 8005786:	bf00      	nop
 8005788:	20000258 	.word	0x20000258

0800578c <_isatty_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	2300      	movs	r3, #0
 8005790:	4d05      	ldr	r5, [pc, #20]	; (80057a8 <_isatty_r+0x1c>)
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fb fd21 	bl	80011de <_isatty>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_isatty_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_isatty_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000258 	.word	0x20000258

080057ac <_raise_r>:
 80057ac:	291f      	cmp	r1, #31
 80057ae:	b538      	push	{r3, r4, r5, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	460d      	mov	r5, r1
 80057b4:	d904      	bls.n	80057c0 <_raise_r+0x14>
 80057b6:	2316      	movs	r3, #22
 80057b8:	6003      	str	r3, [r0, #0]
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057c2:	b112      	cbz	r2, 80057ca <_raise_r+0x1e>
 80057c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057c8:	b94b      	cbnz	r3, 80057de <_raise_r+0x32>
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 f830 	bl	8005830 <_getpid_r>
 80057d0:	462a      	mov	r2, r5
 80057d2:	4601      	mov	r1, r0
 80057d4:	4620      	mov	r0, r4
 80057d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057da:	f000 b817 	b.w	800580c <_kill_r>
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d00a      	beq.n	80057f8 <_raise_r+0x4c>
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	d103      	bne.n	80057ee <_raise_r+0x42>
 80057e6:	2316      	movs	r3, #22
 80057e8:	6003      	str	r3, [r0, #0]
 80057ea:	2001      	movs	r0, #1
 80057ec:	e7e7      	b.n	80057be <_raise_r+0x12>
 80057ee:	2400      	movs	r4, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057f6:	4798      	blx	r3
 80057f8:	2000      	movs	r0, #0
 80057fa:	e7e0      	b.n	80057be <_raise_r+0x12>

080057fc <raise>:
 80057fc:	4b02      	ldr	r3, [pc, #8]	; (8005808 <raise+0xc>)
 80057fe:	4601      	mov	r1, r0
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f7ff bfd3 	b.w	80057ac <_raise_r>
 8005806:	bf00      	nop
 8005808:	2000000c 	.word	0x2000000c

0800580c <_kill_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	2300      	movs	r3, #0
 8005810:	4d06      	ldr	r5, [pc, #24]	; (800582c <_kill_r+0x20>)
 8005812:	4604      	mov	r4, r0
 8005814:	4608      	mov	r0, r1
 8005816:	4611      	mov	r1, r2
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	f7fb fc8f 	bl	800113c <_kill>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d102      	bne.n	8005828 <_kill_r+0x1c>
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	b103      	cbz	r3, 8005828 <_kill_r+0x1c>
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	bf00      	nop
 800582c:	20000258 	.word	0x20000258

08005830 <_getpid_r>:
 8005830:	f7fb bc7d 	b.w	800112e <_getpid>

08005834 <_init>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr

08005840 <_fini>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr
